{"version":3,"sources":["../node_modules/n3/lib sync /^/N3.*$","../node_modules/@trust/webcrypto/src/algorithms sync","Actions/actionTypes.ts","config.ts","Reducers/accountReducer.ts","Reducers/dialogsReducer.ts","Reducers/itemsReducer.ts","Reducers/pathReducer.ts","Reducers/uploadReducer.ts","Reducers/reducer.ts","Reducers/currentBlobReducer.ts","Reducers/errorReducer.ts","Reducers/loadingReducer.ts","serviceWorker.ts","Api/Item.ts","Api/folderUtils.ts","Api/AclItem.ts","Api/aclUtils.ts","Api/Api.ts","Api/ApiHandler.ts","Api/ApiCache.ts","Actions/Actions.ts","Components/File/File.tsx","Components/FileList/FileListEmptyMessage.tsx","Components/Loader/Loader.tsx","Components/FileList/FileList.tsx","Components/ContextMenu/ContextMenuActions/CreateFolderAction.tsx","Components/ContextMenu/ContextMenuActions/CreateFileAction.tsx","Components/ContextMenu/ContextMenuActions/UploadFileAction.tsx","Components/Navbar/ThreeDotsMenu.tsx","Components/Breadcrumb/BreadcrumbText.tsx","Components/Navbar/Navbar.tsx","Components/ContextMenu/ContextMenuActions/OpenAction.tsx","Components/ContextMenu/ContextMenuActions/RemoveAction.tsx","Components/ContextMenu/ContextMenuActions/MoveAction.tsx","Components/ContextMenu/ContextMenuActions/CopyAction.tsx","Components/ContextMenu/ContextMenuActions/EditAction.tsx","Components/ContextMenu/ContextMenuActions/RenameAction.tsx","Components/ContextMenu/ContextMenuActions/ZipAction.tsx","Components/ContextMenu/ContextMenuActions/ExtractAction.tsx","Components/ContextMenu/ContextMenuActions/DownloadAction.tsx","Components/ContextMenu/ContextMenuActions/OpenInNewTabAction.tsx","Components/ContextMenu/ContextMenuActions/UploadMetadataAction.tsx","Components/ContextMenu/ContextMenuActions/AccessControlAction.tsx","Components/ContextMenu/ContextMenuActions/AddNewVersionActions.tsx","Components/ContextMenu/ContextMenuActions/ExposeMetadataAction.tsx","Components/ContextMenu/ContextMenuActions/RevertVersionAction.tsx","Components/ContextMenu/ContextMenu.tsx","Components/HistoryHandler/HistoryHandler.tsx","Components/Dialogs/Menu/Menu.tsx","Components/Dialogs/Content/Content.tsx","Components/Dialogs/Media/Media.tsx","Components/Dialogs/Edit/Edit.tsx","Components/Dialogs/CreateFolder/CreateFolder.tsx","Components/Dialogs/CreateFile/CreateFile.tsx","Components/Dialogs/Rename/Rename.tsx","Components/File/FileSublist/FileSublist.tsx","Components/FileList/FileListSublist/FileListSublist.tsx","Components/Dialogs/ChooseLocation/ChooseLocation.tsx","Components/Dialogs/Move/Move.tsx","Components/Dialogs/Copy/Copy.tsx","Components/FileUploader/UploadFileList.tsx","Components/FileUploader/FileUploader.tsx","Components/Dialogs/UploadFile/UploadFile.tsx","Components/Dialogs/UploadMetadata/Discipline.tsx","Components/Dialogs/UploadMetadata/UploadMetadata.tsx","Components/Dialogs/AccessControl/AccessControl.tsx","Components/Dialogs/AddNewVersion/AddNewVersion.tsx","Components/Dialogs/ExposeMetadata/ExposeMetadata.tsx","Components/Dialogs/Dialogs.tsx","Components/Notification/DynamicSnackbar.tsx","App.tsx","index.tsx"],"names":["map","./N3Lexer","./N3Lexer.js","./N3Parser","./N3Parser.js","./N3Store","./N3Store.js","./N3StreamParser","./N3StreamParser.js","./N3StreamWriter","./N3StreamWriter.js","./N3Util","./N3Util.js","./N3Writer","./N3Writer.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","DIALOGS","host","config","getHost","setHost","newHost","endsWith","slice","initialState","loggedIn","webId","initialVisibleDialogs","values","name","defineProperty","reduce","prev","cur","objectSpread","initialContextMenuState","open","x","y","initialItemsState","inCurFolder","filter","selected","removeItem","items","item","selectedItem","equals","addItem","concat","toConsumableArray","initialPath","initialUploadState","fileList","progress","rootReducer","combineReducers","account","state","arguments","length","undefined","action","type","value","blob","URL","createObjectURL","revokeObjectURL","contextMenu","visibleDialogs","errorMessage","includes","loading","path","upload","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","Item","url","size","classCallCheck","this","_name","_path","_url","_size","getPathFromUrl","pop","createClass","key","every","val","index","decodeURI","getHumanFileSize","get","FileItem","_Item","possibleConstructorReturn","getPrototypeOf","apply","inherits","patterns","image","test","media","editable","extractable","metadata","notUpdatable","version","video","FolderItem","_Item2","byteString","bytes","parseInt","Math","pow","toFixed","urlString","pathname","split","getFolderItems","graph","subj","files","folders","each","rdflib","forEach","subjectName","subjectNode","nsSize","any","getSizeByGraph","baseUrl","folderNode","isAnInstanceOfClass","types","some","_ref","isFolder","push","text2graph","_x","_x2","_text2graph","_callee","text","contentType","_args","regenerator_default","a","wrap","_context","next","guessFileType","abrupt","Promise","reject","stop","ext","replace","AclItem","agent","accessTo","read","write","append","control","isGroup","_key","_agent","_accessTo","_read","_write","_append","_control","_isGroup","aclNamespace","pavOntology","dublinCoreOntology","schemaOntology","parseACl","acls","i","subject","checkIsGroup","getAgentName","getAccessToByGraph","getMode","saveNewVersion","content","fileName","folderPath","newVersion","oldVersion","updater","oldStatement","newStatement","wholeTtlNode","metadataNode","newNodePrevVer","update","uri","ok","message","exposeMetadata","remoteRegistryUrl","ttlURL","newContent","updatedSubj","remotedGraph","keyword","discipline","getVersion","versionNum","getContent","root","buildACLContent","aclList","arrAuth","arrMode","join","agentType","modeName","mode","agentClass","fileClient","require","createACL","_x3","_createACL","filePath","createFile","fileCreated","err","fetchFile","_x4","_x5","_fetchFile","_callee2","_context2","buildFileUrl","solidAuth","assertSuccessfulResponse","fetchRemoteFile","_x6","_fetchRemoteFile","_callee3","_context3","fetchFolder","_x7","_x8","_fetchFolder","_callee4","folderName","_context4","buildFolderUrl","headers","Accept","readFolder","_x9","_x10","_readFolder","_callee5","response","folderRDF","folderItems","_context5","sent","folderUtils","_callee7","_context7","aclUtils","_callee8","remoteRegistryURL","registryRDF","_context8","_callee9","destination","itemNames","_context9","copyItems","removeItems","_callee10","oldName","newName","_context10","copyFile","_callee11","oldFolderName","newFolderName","_context11","copyFolder","removeFolderRecursively","_x29","_x30","_x31","_copyItems","_callee12","promises","_context12","_ref2","_ref3","_ref4","_ref5","all","Response","_x32","_x33","_x34","_x35","_copyFile","_callee13","originPath","originName","destinationPath","destinationName","fileResponse","_context13","_x36","_x37","_x38","_x39","_copyFolder","_callee14","_ref6","_context14","createFolder","_ref7","_ref8","_callee15","_context15","Array","from","file","updateFile","_x42","_x43","_createFolder","_callee16","_context16","folderExists","createItem","Blob","_x44","_x45","_x46","_updateFile","_callee17","_context17","_callee18","aclItem","_context18","_x50","_x51","_x52","_createFile","_callee19","_context19","_callee20","itemName","link","request","_context20","method","slug","Content-Type","body","_x57","_x58","_removeItems","_callee21","_context21","_x59","_x60","_removeItem","_callee22","_context22","status","_x61","_x62","_removeFolderRecursively","_callee23","_context23","removeFolderContents","_x63","_x64","_removeFolderContents","_callee24","_ref9","_context24","_ref10","_ref11","_x65","_x66","_folderExists","_callee25","_context25","t0","cache","_data","itemList","hasOwnProperty","_this","_len","paths","contains","handleFetchError","asyncToGenerator","mark","detailedErrorMessage","displayErrorMessage","displayMessages","group","401","403","404","500","stack","JSON","stringify","groupEnd","fixPath","getItemList","API","add","getBasedURL","p","getFileBlob","filename","renameFile","newFileName","remove","_x23","_x24","_x25","_renameFile","renameFolder","_x26","_x27","_x28","_renameFolder","trim","moveItems","filenames","_x20","_x21","_x22","_moveItems","uploadFiles","_x40","_x41","_upload","updateACL","_x47","_x48","_x49","_updateACLFile","getAsZip","zip","JSZip","addItemsToZip","zipFolder","folder","binary","extractZipArchive","_args3","loadAsync","uploadExtractedZipArchive","curFolder","_args5","getItemsInZipFolder","relativePath","getItemNameFromPath","getParentPathFromPath","dir","async","substr","lastIndexOf","solidLogin","dispatch","getState","displayLoading","solidPopupLogin","session","updateLoginStatus","r","setErrorMessage","String","finally","stopLoading","setWebId","setLoggedIn","setLoggedOut","resetWebId","popupUri","clearCache","clear","handleExposeData","_getState2","resetSelectedItems","_x17","_x18","_x19","_exposeMetadata","closeDialog","EXPOSE_METADATA","displayCurrentItemList","handleAddNewVersion","preVersion","currentVersion","_getState3","setFileUploadProgress","resetNewVersionUploader","_x13","_x14","_x15","_x16","_updateVersion","updateVersion","APIHandler","setTimeout","f","getFilePathUrl","getProfileUrl","createResearchDataACL","filepath","profilePath","find","getDisplayName","createMetadataACL","setItems","refreshItemList","promptDownload","msSaveOrOpenBlob","document","createElement","href","download","appendChild","click","removeChild","getFileContent","resetFileContent","setFileContent","loadAndEditFile","openDialog","EDIT","loadAndDisplayFile","CONTENT","displaySelectedMediaFile","MEDIA","targetPath","COPY","setSelectedItemsFromLastTo","lastFile","_getState25$items","selectedItems","lastPreviouslySelected","lastPreviouslySelectedIndex","indexOf","lastSelectedIndex","isInRange","num","start","end","toAdd","selectItems","resetFileUploader","UPLOAD_FILE","resetFileUploadList","ADD_NEW_VERSION","resetMetadataUploader","UPLOAD_METADATA","enterFolder","setPath","resetFilter","enterFolderByItem","makeActionCreator","moveFolderUpwards","resetPath","resetItems","selectItem","toggleSelectedItem","filterItems","setFileUploadList","openContextMenu","closeContextMenu","File","_this$props","props","isSelected","handleClick","handleDoubleClick","handleContextMenu","avatarStyle","backgroundColor","blue","realSize","getDisplaySize","react_default","className","onClick","onDoubleClick","onContextMenu","data-selected","ListItem_default","ListItemAvatar_default","Avatar_default","style","InsertDriveFile_default","Folder_default","ListItemText_default","primary","secondary","Component","connect","ownProps","isEditable","isImage","isMedia","event","preventDefault","stopPropagation","nativeEvent","MouseEvent","clientX","clientY","TouchEvent","touches","pageX","pageY","warn","shiftKey","ctrlKey","FileListEmptyMessage","withStyles","theme","createStyles","margin","spacing","unit","Grid_default","container","justify","CircularProgress_default","classes","color","FileList","isLoading","itemComponents","Components_File_File","Loader_Loader","FileListEmptyMessage_FileListEmptyMessage","filterMatch","first","second","toLocaleLowerCase","CREATE_FOLDER","callback","handleClose","MenuItem_default","ListItemIcon_default","CreateNewFolder_default","Typography_default","variant","CREATE_FILE","CloudUpload_default","ThreeDotsMenu","anchorEl","setState","currentTarget","marginLeft","IconButton_default","aria-label","aria-owns","aria-haspopup","MoreVert_default","Menu_default","onClose","ContextMenuActions_CreateFolderAction","ContextMenuActions_CreateFileAction","ContextMenuActions_UploadFileAction","React","BreadcrumbText","handleClickPath","rootTitle","handleGoBack","canGoBack","separator","rootPath","data-index","lastPath","directories","Button_default","display","KeyboardArrowLeft_default","breakpoints","up","width","marginBottom","grow","flexGrow","menuButton","marginRight","title","search","position","borderRadius","shape","fade","palette","common","white","&:hover","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","refreshIcon","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","handleChange","moveUpwards","n","moveFolderUpwardsAndRefresh","handleRefresh","AppBar_default","Toolbar_default","noWrap","Components_Breadcrumb_BreadcrumbText","Search_default","InputBase_default","placeholder","onChange","input","Refresh_default","Navbar_ThreeDotsMenu","OpenInBrowser_default","Delete_default","MOVE","HowToVote_default","FileCopy_default","RENAME","WrapText_default","archiveName","generateAsync","Archive_default","Unarchive_default","_getState16","downloadName","CloudDownload_default","Link_default","ACCESS_CONTROL","Settings_default","alert","SettingsBackupRestore_default","ContextMenu","acts","anchorReference","anchorPosition","top","left","transformOrigin","vertical","horizontal","PaperProps","ContextMenuActions_OpenAction","ContextMenuActions_OpenInNewTabAction","ContextMenuActions_UploadMetadataAction","ContextMenuActions_AccessControlAction","AddNewVersionActions","ContextMenuActions_ExposeMetadataAction","ContextMenuActions_RevertVersionAction","ContextMenuActions_DownloadAction","ContextMenuActions_ZipAction","ContextMenuActions_ExtractAction","EditAction","ContextMenuActions_CopyAction","ContextMenuActions_MoveAction","RenameAction","ContextMenuActions_RemoveAction","getActionsForMultipleItems","getActionsForItem","getActionsForFile","getActionsForFolder","actions","isNotUpdateable","isExtractable","isMetadata","isVersionFile","HistoryHandler","call","history","states","stateIndex","createBrowserHistory","listen","handlePop","handleReplace","handlePush","updateBrowserHistory","prevState","locationsEqual","_this$props2","encodeURI","newState","Fragment","getLocationObjectFromUrl","origin","_location$state","URLSearchParams","_getLocationObjectFro","FormDialog","isLoggedIn","encodedUrl","targetForm","form","querySelector","handleSubmit","handleLogin","handleLogout","Dialog_default","aria-labelledby","fullWidth","maxWidth","DialogTitle_default","DialogContent_default","gutterBottom","TextField_default","autoFocus","label","bind","DialogActions_default","CHOOSE_LOCATION","lastBlobUrl","blobUrl","src","alt","isVideo","react_plyr_lib_default","iconUrl","textField","createRef","_this2","fetch","t","current","textArea","minHeight","defaultValue","ref","DialogContentText_default","handleSave","updateTextFile","inputRef","createNewFolder","previousName","FileSublist","FileListSublist","handleOpenFolder","FileSublist_FileSublist","initialHost","prevProps","updateItems","ApiHandler","actionName","_this$state","FileList_FileListSublist_FileListSublist","disabled","move","targetLocation","ChooseLocation","copy","UploadFileList","list","dense","List_default","component","FileUploader","inputElement","handleReset","handleSelectedFiles","styles","inputfile","inputreset","htmlFor","multiple","FileUploader_UploadFileList","canUpload","Components_FileUploader_FileUploader","LinearProgress_default","_getState4","target","green","&$checked","checked","Checkbox_default","assign","CheckboxLabels","_React$useState","useState","checkedA","checkedB","checkedC","checkedD","checkedE","checkedF","checkedG","_React$useState2","slicedToArray","FormGroup_default","row","FormControlLabel_default","activeIndex","updateInput","inputVal","_","VerticalTabs","MyTab","index_es","aria-describedby","flexContainer","flexDirection","indicator","Tabs","borderBottom","Tab","_getState6","handleTextChange","handleNewTextChange","handleDelete","splice","button","toString","handleNewChange","handleAdd","validURL","resetState","destFile","str","RegExp","_this3","Table_default","padding","TableHead_default","TableRow_default","TableCell_default","TableBody_default","AddBox_default","nextVersion","ExposeMetadata","metadatainfo","Dialogs","Menu_Menu","Content","Media","Edit","CreateFolder","CreateFile","Move","Copy","Rename","UploadFile","UploadMetadata","AddNewVersion","Dialogs_ExposeMetadata_ExposeMetadata","AccessControl","DynamicSnackbar","errorMsg","notificationDuration","Snackbar_default","anchorOrigin","autoHideDuration","ContentProps","close","Close_default","createMuiTheme","typography","useNextVariants","App","init","core_styles","handleHideContextMenu","Navbar","Components_FileList_FileList","Components_ContextMenu_ContextMenu","Notification_DynamicSnackbar","Dialogs_Dialogs","Components_HistoryHandler_HistoryHandler","element","tagName","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","react_redux_es","src_App","getElementById","process","addEventListener","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.86e2e7cc.chunk.js","sourcesContent":["var map = {\n\t\"./N3Lexer\": 191,\n\t\"./N3Lexer.js\": 191,\n\t\"./N3Parser\": 192,\n\t\"./N3Parser.js\": 192,\n\t\"./N3Store\": 257,\n\t\"./N3Store.js\": 257,\n\t\"./N3StreamParser\": 258,\n\t\"./N3StreamParser.js\": 258,\n\t\"./N3StreamWriter\": 264,\n\t\"./N3StreamWriter.js\": 264,\n\t\"./N3Util\": 193,\n\t\"./N3Util.js\": 193,\n\t\"./N3Writer\": 197,\n\t\"./N3Writer.js\": 197\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 475;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 655;","import { Item } from \"../Api/Item\";\r\n\r\nexport interface Action<V> {\r\n    type: string;\r\n    value: V;\r\n};\r\n\r\nexport const SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\r\nexport const ENTER_FOLDER = 'ENTER_FOLDER';\r\nexport const MOVE_FOLDER_UPWARDS = 'MOVE_FOLDER_UPWARDS';\r\nexport const SET_PATH = 'SET_PATH';\r\n\r\nexport const SET_LOGGED_IN = 'SET_LOGGED_IN';\r\nexport const SET_LOGGED_OUT = 'SET_LOGGED_OUT';\r\nexport const RESET_HOST = 'RESET_HOST';\r\nexport const SET_HOST = 'SET_HOST'; // TODO: Consider renaming to BASE_URL\r\nexport const RESET_WEB_ID = 'RESET_WEB_ID';\r\nexport const SET_WEB_ID = 'SET_WEB_ID';\r\n\r\nexport const SET_ITEMS = 'SET_ITEMS';\r\nexport const SET_ACLITEMS = 'SET_ACLITEMS';\r\n\r\nexport const SELECT_ITEMS = 'SELECT_ITEMS';\r\nexport const TOGGLE_SELECTED_ITEM = 'TOGGLE_SELECTED_ITEM';\r\nexport const DESELECT_ITEM = 'DESELECT_ITEM';\r\n\r\nexport const FILTER_ITEMS = 'FILTER_ITEMS';\r\nexport const RESET_FILTER = 'REMOVE_FILTER';\r\n\r\nexport const DISPLAY_LOADING = 'DISPLAY_LOADING';\r\nexport const STOP_LOADING = 'STOP_LOADING';\r\n\r\nexport const RESET_LOADED_BLOB = 'RESET_LOADED_BLOB';\r\nexport const SET_LOADED_BLOB = 'SET_LOADED_BLOB';\r\n\r\nexport const SET_UPLOAD_FILE_PROGRESS = 'SET_UPLOAD_FILE_PROGRESS';\r\nexport const SET_UPLOAD_FILE_LIST = 'SET_UPLOAD_FILE_LIST';\r\n\r\nexport const OPEN_CONTEXT_MENU = 'OPEN_CONTEXT_MENU';\r\nexport const CLOSE_CONTEXT_MENU = 'CLOSE_CONTEXT_MENU';\r\n\r\nexport const OPEN_DIALOG = 'OPEN_DIALOG';\r\nexport const CLOSE_DIALOG = 'CLOSE_DIALOG';\r\n\r\nexport enum DIALOGS {\r\n    CHOOSE_LOCATION = 'CHOOSE_LOCATION',\r\n    CREATE_FOLDER = 'CREATE_FOLDER',\r\n    CREATE_FILE = 'CREATE_FILE',\r\n    UPLOAD_FILE = 'UPLOAD_FILE',\r\n    EXPOSE_METADATA = 'EXPOSE_METADATA',\r\n    ADD_NEW_VERSION = 'ADD_NEW_VERSION',\r\n    UPLOAD_METADATA = 'UPLOAD_METADATA',\r\n    ACCESS_CONTROL = 'ACCESS_CONTROL',\r\n    RENAME = 'RENAME',\r\n    MOVE = 'MOVE',\r\n    COPY = 'COPY',\r\n    CONTENT = 'CONTENT',\r\n    MEDIA = 'MEDIA',\r\n    EDIT = 'EDIT',\r\n    CONTEXT_MENU = 'CONTEXT_MENU',\r\n};","let host: string | null = null;\r\n\r\nexport default {\r\n    getHost() {\r\n        return host;\r\n    },\r\n    setHost(newHost: string) {\r\n        host = newHost;\r\n        while (host.endsWith('/'))\r\n            host = host.slice(0, -1);\r\n    }\r\n};\r\n","import { Action, SET_LOGGED_IN, SET_LOGGED_OUT, SET_HOST, SET_WEB_ID, RESET_HOST, RESET_WEB_ID } from \"../Actions/actionTypes\";\r\nimport config from \"../config\";\r\n\r\ninterface AccountState {\r\n    loggedIn: boolean;\r\n    host: string | null;\r\n    webId: string | null;\r\n}\r\n\r\nconst initialState: AccountState = {\r\n    loggedIn: false,\r\n    host: null,\r\n    webId: null\r\n};\r\n\r\nexport const account = (state = initialState, action: Action<string|null|void>): AccountState => {\r\n    switch(action.type) {\r\n        case SET_LOGGED_IN:\r\n            return { ...state, loggedIn: true };\r\n        case SET_LOGGED_OUT:\r\n            return { ...state, loggedIn: false };\r\n        case SET_HOST:\r\n            config.setHost(action.value as string); // TODO\r\n            return { ...state, host: action.value as string };\r\n        case RESET_HOST:\r\n            return { ...state, host: null };\r\n        case SET_WEB_ID:\r\n            return { ...state, webId: action.value as string|null };\r\n        case RESET_WEB_ID:\r\n            return { ...state, webId: null };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { DIALOGS, Action, OPEN_DIALOG, CLOSE_DIALOG, OPEN_CONTEXT_MENU, CLOSE_CONTEXT_MENU } from \"../Actions/actionTypes\";\r\n\r\n// Initialize state with values of DIALOGS as keys and false (closed) as value\r\nconst initialVisibleDialogs: Record<DIALOGS, boolean> = Object.values(DIALOGS)\r\n    .map((name: DIALOGS) => ({ [name]: false } as Record<DIALOGS, boolean>))\r\n    .reduce((prev, cur) => ({ ...prev, ...cur })) as Record<DIALOGS, boolean>;\r\n\r\nexport const visibleDialogs = (state = initialVisibleDialogs, action: Action<DIALOGS>): typeof initialVisibleDialogs => {\r\n    switch (action.type) {\r\n        case OPEN_DIALOG:\r\n            return { ...state, [action.value]: true };\r\n        case CLOSE_DIALOG:\r\n            return { ...state, [action.value]: false };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialContextMenuState = {\r\n    open: false,\r\n    x: 0,\r\n    y: 0,\r\n};\r\n\r\nexport const contextMenu = (state = initialContextMenuState, action: Action<any>): typeof initialContextMenuState => {\r\n    switch (action.type) {\r\n        case OPEN_CONTEXT_MENU:\r\n            return {\r\n                ...state,\r\n                open: true,\r\n                x: action.value.x,\r\n                y: action.value.y\r\n            };\r\n        case CLOSE_CONTEXT_MENU:\r\n            return { ...state, open: false };\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Item } from \"../Api/Item\";\r\nimport { Action, SET_ITEMS, SELECT_ITEMS, DESELECT_ITEM, FILTER_ITEMS, RESET_FILTER, TOGGLE_SELECTED_ITEM } from \"../Actions/actionTypes\";\r\n\r\ninterface ItemsState {\r\n    inCurFolder: Item[];\r\n    filter: string;\r\n    selected: Item[];\r\n}\r\n\r\nconst initialItemsState: ItemsState = {\r\n    inCurFolder: [],\r\n    filter: '',\r\n    selected: [],\r\n};\r\n\r\nexport const items = (state = initialItemsState, action: Action<any>): ItemsState => {\r\n    switch(action.type) {\r\n        case SET_ITEMS:\r\n            return { ...state, inCurFolder: action.value as Item[] };\r\n        case SELECT_ITEMS:\r\n            return { ...state, selected: action.value as Item[] };\r\n        case DESELECT_ITEM:\r\n            return { ...state, selected: removeItem(state.selected, action.value as Item) };\r\n        case TOGGLE_SELECTED_ITEM:\r\n            return { \r\n                ...state,\r\n                selected: state.selected.includes(action.value) ?\r\n                    removeItem(state.selected, action.value as Item)\r\n                    : addItem(state.selected, action.value as Item)\r\n            };\r\n        case FILTER_ITEMS:\r\n            return { ...state, filter: action.value as string };\r\n        case RESET_FILTER:\r\n            return { ...state, filter: '' };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst removeItem = (items: Item[], item: Item) => {\r\n    return items.filter(selectedItem => !selectedItem.equals(item));\r\n}\r\n\r\nconst addItem = (items: Item[], item: Item) => {\r\n    return [...items, item];\r\n}","import { Action, ENTER_FOLDER, SET_PATH, MOVE_FOLDER_UPWARDS } from \"../Actions/actionTypes\";\r\n\r\n\r\nconst initialPath: string[] = [];\r\n\r\nexport const path = (state = initialPath, action: Action<any>): typeof initialPath => {\r\n    switch(action.type) {\r\n        case ENTER_FOLDER:\r\n            return [...state, action.value];\r\n        case MOVE_FOLDER_UPWARDS:\r\n            return action.value > 0 ?\r\n                state.slice(0, -action.value)\r\n                : state;\r\n        case SET_PATH:\r\n            return [...action.value];\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Action, SET_UPLOAD_FILE_LIST, SET_UPLOAD_FILE_PROGRESS } from \"../Actions/actionTypes\";\r\n\r\nconst initialUploadState = {\r\n    fileList: null as FileList|null,\r\n    progress: 0,\r\n};\r\n\r\nexport const upload = (state = initialUploadState, action: Action<FileList|number>): typeof initialUploadState => {\r\n    switch(action.type) {\r\n        case SET_UPLOAD_FILE_LIST:\r\n            return { ...state, fileList: action.value as FileList };\r\n        case SET_UPLOAD_FILE_PROGRESS:\r\n            return { ...state, progress: action.value as number };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { account } from './accountReducer';\r\nimport { blob } from './currentBlobReducer';\r\nimport { visibleDialogs, contextMenu } from './dialogsReducer';\r\nimport { errorMessage } from './errorReducer';\r\nimport { items } from './itemsReducer';\r\nimport { loading } from './loadingReducer';\r\nimport { path } from './pathReducer';\r\nimport { upload } from './uploadReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    account,\r\n    blob,\r\n    contextMenu,\r\n    visibleDialogs,\r\n    errorMessage,\r\n    items,\r\n    loading,\r\n    path,\r\n    upload,\r\n});\r\n\r\nexport default rootReducer;\r\nexport type AppState = ReturnType<typeof rootReducer>;","import { Action, SET_LOADED_BLOB, RESET_LOADED_BLOB } from \"../Actions/actionTypes\";\r\n\r\nexport const blob = (state: string|null = null, action: Action<Blob>): typeof state => {\r\n    switch(action.type) {\r\n        case SET_LOADED_BLOB:\r\n            return URL.createObjectURL(action.value);\r\n        case RESET_LOADED_BLOB:\r\n            if (state !== null)\r\n                URL.revokeObjectURL(state);\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Action, SET_ERROR_MESSAGE } from \"../Actions/actionTypes\";\r\n\r\nexport const errorMessage = (state = '', action: Action<string>): typeof state => {\r\n    switch(action.type) {\r\n        case SET_ERROR_MESSAGE:\r\n            return action.value;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Action, DISPLAY_LOADING, STOP_LOADING } from \"../Actions/actionTypes\";\r\n\r\nconst initialLoadingState: boolean = false;\r\n\r\nexport const loading = (state = initialLoadingState, action: Action<void>): boolean => {\r\n    switch(action.type) {\r\n        case DISPLAY_LOADING:\r\n            return true;\r\n        case STOP_LOADING:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config: ServiceWorkerConfig) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config: ServiceWorkerConfig) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config: ServiceWorkerConfig) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n\r\n\r\nexport interface ServiceWorkerConfig {\r\n  onUpdate(registration: ServiceWorkerRegistration): void;\r\n  onSuccess(registration: ServiceWorkerRegistration): void;\r\n}","/**\r\n * Class for an arbitrary item from a solid pod\r\n */\r\nexport class Item {\r\n    _name: string;\r\n    _path: string[];\r\n    _url: string;\r\n    _size?: string\r\n\r\n    constructor(url: string, size?: string) {\r\n        const path = getPathFromUrl(url);\r\n\r\n        this._name = path.pop() || '';\r\n        this._path = path;\r\n        this._url = url;\r\n        this._size = size;\r\n    }\r\n\r\n    // Make properties readonly\r\n    get name() { return this._name; }\r\n    get path() { return this._path; }\r\n    get url() { return this._url; }\r\n    get size() { return this._size; }\r\n\r\n    equals(item: Item) {\r\n        return this.name === item.name\r\n            && this.path.length === item.path.length\r\n            && this.path.every((val, index) => val === item.path[index]);\r\n    }\r\n\r\n    getDisplayName() {\r\n        return decodeURI(this.name);\r\n    }\r\n\r\n    getDisplaySize() {\r\n        return this._size ? getHumanFileSize(this._size) : 'Unknown size';\r\n    }\r\n}\r\n\r\nexport class FileItem extends Item {\r\n    isImage() {\r\n        return patterns.image.test(this.name);\r\n    }\r\n\r\n    isMedia() {\r\n        return patterns.media.test(this.name);\r\n    }\r\n\r\n    isEditable() {\r\n        return patterns.editable.test(this.name);\r\n    }\r\n\r\n    isExtractable() {\r\n        return patterns.extractable.test(this.name);\r\n    }\r\n\r\n    isMetadata() {\r\n        return patterns.metadata.test(this.name);\r\n    }\r\n\r\n    isNotUpdateable(){\r\n        return !patterns.notUpdatable.test(this.name);\r\n    }\r\n\r\n    isVersionFile(){\r\n        return patterns.version.test(this.name);\r\n    }\r\n\r\n    isVideo() {\r\n        return patterns.video.test(this.name);\r\n    }\r\n}\r\n\r\nexport class FolderItem extends Item { }\r\n\r\n\r\n// regex patterns for testing if a file is of a specific type\r\nconst patterns = {\r\n    editable: /\\.(txt|diff?|patch|svg|asc|cnf|cfg|conf|html?|cfm|cgi|aspx?|ini|pl|py|md|css|cs|jsx?|jsp|log|htaccess|htpasswd|gitignore|gitattributes|env|json|atom|eml|rss|markdown|sql|xml|xslt?|sh|rb|as|bat|cmd|cob|for|ftn|frm|frx|inc|lisp|scm|coffee|php[3-6]?|java|c|cbl|go|h|scala|vb|tmpl|lock|go|yml|yaml|tsv|lst|ttl)$/i,\r\n    image: /\\.(jpe?g|gif|bmp|png|svg|tiff?)$/i,\r\n    media: /\\.(mp3|ogg|wav|mp4|webm)$/i,\r\n    video: /\\.(mp4|webm|ogg)$/i,\r\n    extractable: /\\.(zip)$/i,\r\n    metadata: /\\.(ttl|n3)$/i,\r\n    version: /\\.(old)$/i,\r\n    notUpdatable: /\\.(old|ttl|n3)$/i\r\n};\r\n\r\n/**\r\n * Calculate file size by bytes in human readable format\r\n */\r\nexport const getHumanFileSize = (byteString: string|number): string => {\r\n    const bytes = typeof byteString === 'string' ?\r\n        parseInt(byteString)\r\n        : byteString;\r\n    const e = (Math.log(bytes) / Math.log(1e3)) | 0;\r\n    return +(bytes / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';\r\n};\r\n\r\n\r\n/**\r\n * Get path including the last element (e.g. [public, test, index.html])\r\n */\r\nconst getPathFromUrl = (urlString: string): string[] => {\r\n    const url = new URL(urlString);\r\n    return url.pathname.split('/').filter(val => val !== '');\r\n}","// Based on https://github.com/jeff-zucker/solid-file-client/blob/master/src/folderUtils\r\nimport * as rdflib from 'rdflib';\r\nimport { FileItem, FolderItem } from './Item';\r\nimport { FolderItems } from './types';\r\n\r\nexport function getSizeByGraph(graph: rdflib.IndexedFormula, subjectName: string): string | undefined {\r\n    const subjectNode = rdflib.sym(subjectName);\r\n    const nsSize = rdflib.sym('http://www.w3.org/ns/posix/stat#size');\r\n    const size = graph.any(subjectNode, nsSize, undefined, undefined);\r\n\r\n    return (size && 'value' in size) ? size.value : undefined;\r\n}\r\n\r\n/**\r\n * @param {rdflib.IndexedFormula} graph a rdflib.graph() database instance\r\n * @param {string} baseUrl location of the folder\r\n * @returns {boolean}\r\n */\r\nexport function isFolder(graph: rdflib.IndexedFormula, baseUrl: string): boolean {\r\n    const folderNode = rdflib.sym(baseUrl);\r\n    const isAnInstanceOfClass = rdflib.sym('http://www.w3.org/1999/02/22-rdf-syntax-ns#type');\r\n    const types = graph.each(folderNode, isAnInstanceOfClass, undefined, undefined);\r\n    return Object.values(types)\r\n        .some(({ value }) => value.match('ldp#BasicContainer') !== null);\r\n}\r\n\r\nexport function getFolderItems(graph: rdflib.IndexedFormula, subj: string): FolderItems {\r\n    const files: FileItem[] = [];\r\n    const folders: FolderItem[] = [];\r\n\r\n    graph.each(\r\n        rdflib.sym(subj),\r\n        rdflib.sym('http://www.w3.org/ns/ldp#contains'),\r\n        undefined,\r\n        undefined\r\n    ).forEach(item => {\r\n        \r\n        const url = item.value;\r\n        const size = getSizeByGraph(graph, url);\r\n\r\n        if (isFolder(graph, url))\r\n            folders.push(new FolderItem(url, size));\r\n        else\r\n            files.push(new FileItem(url, size));\r\n    });\r\n\r\n    return { files, folders };\r\n}\r\n\r\n/**\r\n * @param {string} text RDF text that can be passed to $rdf.parse()\r\n * @param {string} baseUrl the base url of the item\r\n * @param {string} contentType Content-Type of the request\r\n * @returns {Promise<rdflib.IndexedFormula>} a rdfilb.graph() database instance with parsed RDF\r\n */\r\nexport async function text2graph(text: string, baseUrl: string, contentType: string = ''): Promise<rdflib.IndexedFormula> {\r\n    contentType = contentType || guessFileType(baseUrl);\r\n    const graph = rdflib.graph();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        rdflib.parse(text, graph, baseUrl, contentType, () => {});\r\n        resolve(graph);\r\n    });\r\n}\r\n\r\nfunction guessFileType(url: string): string {\r\n    const ext = url.replace(/.*\\./, '');\r\n    if (ext.match(/\\/$/)) return 'dir';\r\n    if (ext.match(/(md|markdown)/)) return 'text/markdown';\r\n    if (ext.match(/html/)) return 'text/html';\r\n    if (ext.match(/xml/)) return 'text/xml';\r\n    if (ext.match(/ttl/)) return 'text/turtle';\r\n    if (ext.match(/n3/)) return 'text/n3';\r\n    if (ext.match(/rq/)) return 'application/sparql';\r\n    if (ext.match(/css/)) return 'text/css';\r\n    if (ext.match(/txt/)) return 'text/plain';\r\n    if (ext.match(/json/)) return 'application/json';\r\n    if (ext.match(/js/)) return 'application/javascript';\r\n    if (ext.match(/(png|gif|jpeg|tif)/)) return 'image';\r\n    if (ext.match(/(mp3|aif|ogg)/)) return 'audio';\r\n    if (ext.match(/(avi|mp4|mpeg)/)) return 'video';\r\n    /* default */ return 'text/turtle';\r\n}\r\n","/**\r\n * Class for an ACL item in solid pod\r\n */\r\nexport class AclItem {\r\n    _key: number;\r\n    _agent: string;\r\n    _accessTo: string;\r\n    _read: boolean;\r\n    _write: boolean;\r\n    _append: boolean;\r\n    _control: boolean;\r\n    _isGroup: boolean;\r\n\r\n    constructor(key: number, agent: string, accessTo: string, read: boolean, write: boolean, append: boolean, control: boolean, isGroup: boolean) {\r\n        this._key = key;\r\n        this._agent = agent;\r\n        this._accessTo = accessTo;\r\n        this._read = read;\r\n        this._write = write;\r\n        this._append = append;\r\n        this._control = control;\r\n        this._isGroup = isGroup;\r\n    }\r\n\r\n    // Make properties readonly\r\n    get agent() { return this._agent; }\r\n    get accessTo() { return this._accessTo; }\r\n    get isGroup() { return this._isGroup; }\r\n    get read() { return this._read; }\r\n    get write() { return this._write; }\r\n    get append() { return this._append; }\r\n    get control() { return this._control; }\r\n}\r\n\r\n","import * as rdflib from 'rdflib';\r\nimport { AclItem } from './AclItem';\r\nimport { AclList } from './types';\r\n\r\nconst aclNamespace = \"http://www.w3.org/ns/auth/acl#\";\r\nconst pavOntology = \"http://purl.org/pav/\";\r\nconst dublinCoreOntology = \"http://purl.org/dc/terms/\";\r\nconst schemaOntology = \"http://schema.org/\"\r\n\r\nexport function parseACl(text: string, subj: string): AclItem[] {\r\n    const graph = rdflib.graph();\r\n    const acls: AclItem[] = [];\r\n\r\n    rdflib.parse(text, graph, subj, \"text/turtle\", () => {\r\n        let i = 0;\r\n        graph.each(\r\n            undefined, undefined, rdflib.sym(aclNamespace + 'Authorization'), rdflib.sym(subj)\r\n        ).forEach(item => {\r\n\r\n            const subject = item.value;\r\n            const isGroup = checkIsGroup(graph, subject);\r\n            const agentType = isGroup ? 'agentClass' : 'agent';\r\n            const agent = getAgentName(graph, subject, agentType);\r\n            const accessTo = getAccessToByGraph(graph, subject);\r\n            const read = getMode(graph, subject, \"Read\");\r\n            const write = getMode(graph, subject, \"Write\");\r\n            const append = getMode(graph, subject, \"Append\");\r\n            const control = getMode(graph, subject, \"Control\");\r\n            acls.push(new AclItem(i++, agent, accessTo, read, write, append, control, isGroup));\r\n        });\r\n    });\r\n    return acls;\r\n};\r\n\r\nexport function saveNewVersion(content: string, fileName: string, folderPath: string, newVersion: string, oldVersion: string): void {\r\n    const graph = rdflib.graph()\r\n    const updater = new rdflib.UpdateManager(graph);\r\n    const versionTerm = \"version\";\r\n    const creatorTerm = \"creator\";\r\n    const hasEarlierVersionTerm = \"hasEarlierVersion\";\r\n    const hasVersionTerm = \"hasVersion\";\r\n    const identifierTerm = \"identifier\";\r\n    const url = folderPath + \"/\" + fileName;\r\n\r\n    rdflib.parse(content, graph, url, \"text/turtle\", () => {\r\n        let metadata = graph.any(undefined, rdflib.sym(dublinCoreOntology + creatorTerm), undefined, rdflib.sym(url));\r\n        //remove old version\r\n        let oldStatement = graph.match(rdflib.sym(metadata.value), rdflib.sym(pavOntology + versionTerm), undefined, undefined);\r\n        \r\n        let newStatement = [];\r\n        const wholeTtlNode = rdflib.sym(url);\r\n        const metadataNode = rdflib.sym(metadata.value);\r\n        const newNodePrevVer = rdflib.sym(folderPath + \"/\"+ versionTerm +\"/\" + oldVersion + \"/\" + fileName + \".old\");\r\n        //update new version \r\n        newStatement.push(rdflib.st(metadataNode, rdflib.sym(pavOntology + versionTerm), newVersion, wholeTtlNode));\r\n        //update hasEarlierVersion\r\n        newStatement.push(rdflib.st(metadataNode, rdflib.sym(pavOntology + hasEarlierVersionTerm), newNodePrevVer, wholeTtlNode));\r\n        //define new statement for previous version\r\n        newStatement.push(rdflib.st(newNodePrevVer, rdflib.sym(pavOntology + hasVersionTerm), oldVersion, wholeTtlNode));\r\n        newStatement.push(rdflib.st(newNodePrevVer, rdflib.sym(dublinCoreOntology + identifierTerm), newNodePrevVer, wholeTtlNode));\r\n\r\n        //call update to file\r\n        updater.update(oldStatement, newStatement, (uri, ok, message) => {\r\n            if (!ok)\r\n                console.log('err:' + message)\r\n        })\r\n    });\r\n};\r\n\r\nexport function exposeMetadata(remoteRegistryUrl: string, content: string, ttlURL: string, newContent: {keyword:string, discipline:string}): void {\r\n    const graph = rdflib.graph();\r\n    const updater = new rdflib.UpdateManager(graph);\r\n\r\n    const updatedSubj = rdflib.sym(ttlURL);\r\n    const remotedGraph = rdflib.sym(remoteRegistryUrl);\r\n    const keywordTerm = \"keyword\";\r\n    const typeTerm = \"type\";\r\n    const subjectTerm = \"subject\";\r\n    const identifierTerm = \"identifier\";\r\n\r\n    rdflib.parse(content, graph, remoteRegistryUrl, \"text/turtle\", () => {\r\n        //old statements \r\n        let oldStatement = []\r\n        oldStatement= graph.match(updatedSubj, rdflib.sym(schemaOntology + keywordTerm), undefined,  remotedGraph);\r\n        //new statements\r\n        let newStatement = [];\r\n        newStatement.push(rdflib.st(updatedSubj, rdflib.sym(dublinCoreOntology + typeTerm), \"Metadata\", remotedGraph));\r\n        newStatement.push(rdflib.st(updatedSubj, rdflib.sym(schemaOntology + keywordTerm), newContent.keyword, remotedGraph));\r\n        newStatement.push(rdflib.st(updatedSubj, rdflib.sym(dublinCoreOntology + subjectTerm), newContent.discipline, remotedGraph));\r\n        newStatement.push(rdflib.st(updatedSubj, rdflib.sym(dublinCoreOntology + identifierTerm), updatedSubj, remotedGraph));\r\n\r\n        updater.update(oldStatement, newStatement, (uri, ok, message) => {\r\n            if (!ok)\r\n                console.log('err:' + message)\r\n        })\r\n    });\r\n}\r\n\r\nexport function getVersion(text: string, subj: string): string {\r\n    const graph = rdflib.graph();\r\n    let versionNum = \"\";\r\n    rdflib.parse(text, graph, subj, \"text/turtle\", () => {\r\n        let version = graph.match(\r\n            undefined, rdflib.sym(pavOntology + \"version\"), undefined, rdflib.sym(subj)\r\n        )\r\n        if (version.length)\r\n            versionNum = version[0]['object']['value']\r\n    });\r\n    return versionNum;\r\n};\r\n\r\nexport function getContent(text: string, subj: string): {} {\r\n    const graph = rdflib.graph();\r\n    let content = { keyword: \"\", discipline: \"\" };\r\n    rdflib.parse(text, graph, subj, \"text/turtle\", () => {\r\n        let root = graph.any(\r\n            undefined, rdflib.sym(schemaOntology + \"keyword\"), undefined, rdflib.sym(subj)\r\n        );\r\n        if (root && root.value) {\r\n            let keyword = graph.any(\r\n                rdflib.sym(root.value), rdflib.sym(schemaOntology + \"keyword\"), undefined, undefined\r\n            )\r\n            if (keyword) content.keyword = keyword.value;\r\n            let discipline = graph.any(\r\n                rdflib.sym(root.value), rdflib.sym(dublinCoreOntology + \"subject\"), undefined, undefined\r\n            )\r\n            if (discipline) content.discipline = discipline.value;\r\n        }\r\n    });\r\n    return content;\r\n};\r\n\r\n\r\n/**\r\n * @param {string} text RDF text that can be passed to $rdf.parse()\r\n * @param {string} baseUrl the base url of the item\r\n * @returns {Promise<rdflib.IndexedFormula>} a rdfilb.graph() database instance with parsed RDF\r\n */\r\nexport async function aclText2graph(text: string, baseUrl: string): Promise<rdflib.IndexedFormula> {\r\n    const contentType = 'text/turtle';\r\n    const graph = rdflib.graph();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        rdflib.parse(text, graph, baseUrl, contentType, () => { });\r\n        resolve(graph);\r\n    });\r\n}\r\n\r\n\r\nexport function buildACLContent(aclList: AclItem[]): string {\r\n    let arrAuth: String[] = [];\r\n    aclList.forEach(item => {\r\n        arrAuth.push(``);\r\n        arrAuth.push(`<#authorization${item._key}> a  acl:Authorization;`);\r\n        arrAuth.push(`acl:${item._isGroup ? 'agentClass' : 'agent'} <${item._agent}>;`);\r\n        arrAuth.push(`acl:defaultForNew <./>;`);\r\n        arrAuth.push(`acl:accessTo <${item._accessTo}>;`);\r\n        let arrMode = [];\r\n        if (item._read)\r\n            arrMode.push('acl:Read');\r\n        if (item._write)\r\n            arrMode.push('acl:Write');\r\n        if (item._append)\r\n            arrMode.push('acl:Append');\r\n        if (item._control)\r\n            arrMode.push('acl:Control');\r\n        arrAuth.push(`acl:mode  ${arrMode.join(\", \")}.`);\r\n    });\r\n    return '@prefix  acl:  <http://www.w3.org/ns/auth/acl#> . \\n' + arrAuth.join(\"\\n\");\r\n}\r\n\r\nexport function getAclList(graph: rdflib.IndexedFormula, subj: string): AclList {\r\n    const acls: AclItem[] = [];\r\n    let i = 1;\r\n    graph.each(\r\n        undefined, undefined, rdflib.sym(aclNamespace + 'Authorization'), rdflib.sym(subj)\r\n    ).forEach(item => {\r\n\r\n        const subject = item.value;\r\n        const isGroup = checkIsGroup(graph, subject);\r\n        const agentType = isGroup ? 'agentClass' : 'agent';\r\n        const agent = getAgentName(graph, subject, agentType);\r\n        const accessTo = getAccessToByGraph(graph, subject);\r\n        const read = getMode(graph, subject, \"Read\");\r\n        const write = getMode(graph, subject, \"Write\");\r\n        const append = getMode(graph, subject, \"Append\");\r\n        const control = getMode(graph, subject, \"Control\");\r\n        acls.push(new AclItem(i++, agent, accessTo, read, write, append, control, isGroup));\r\n    });\r\n    return { acls };\r\n}\r\n\r\nexport function getAccessToByGraph(graph: rdflib.IndexedFormula, subjectName: string): string {\r\n    const subjectNode = rdflib.sym(subjectName);\r\n    const accessTo = graph.any(subjectNode, rdflib.sym(aclNamespace + 'accessTo'), undefined, undefined);\r\n    return (accessTo && 'value' in accessTo) ? accessTo.value : \"\";\r\n}\r\n\r\nexport function getAgentName(graph: rdflib.IndexedFormula, subjectName: string, agentType: string): string {\r\n    const subjectNode = rdflib.sym(subjectName);\r\n    const agent = graph.any(subjectNode, rdflib.sym(aclNamespace + agentType), undefined, undefined);\r\n    return (agent && 'value' in agent) ? agent.value : \"\";\r\n}\r\n\r\nexport function getMode(graph: rdflib.IndexedFormula, subjectName: string, modeName: string): boolean {\r\n    const subjectNode = rdflib.sym(subjectName);\r\n    const mode = graph.match(subjectNode, rdflib.sym(aclNamespace + 'mode'), rdflib.sym(aclNamespace + modeName), undefined);\r\n    return (mode && mode.length == 1) ? true : false;\r\n}\r\n\r\nexport function checkIsGroup(graph: rdflib.IndexedFormula, subjectName: string): boolean {\r\n    const subjectNode = rdflib.sym(subjectName);\r\n    const agentClass = graph.match(subjectNode, rdflib.sym(aclNamespace + 'agentClass'), undefined, undefined);\r\n    return (agentClass && agentClass.length == 1) ? true : false;\r\n}","import config from './../config';\r\nimport * as folderUtils from './folderUtils';\r\nimport * as aclUtils from './aclUtils';\r\nimport * as solidAuth from 'solid-auth-client';\r\nimport { FolderItems, AclList } from './types';\r\nimport { AclItem } from './AclItem';\r\nimport { promises } from 'fs';\r\nconst fileClient = require('solid-file-client');\r\n\r\nexport async function createACL(path: string, fileName: string, content: Blob | string): Promise<boolean> {\r\n    const baseUrl = `${config.getHost()}${path}`;\r\n    const filePath = baseUrl + \"/\" + fileName;\r\n    return fileClient.createFile(filePath, content).then((fileCreated: any) => {\r\n        console.log(`Created acl file ${fileCreated}.`);\r\n        return true;\r\n    }, (err: any) => {\r\n        console.log(err);\r\n        return false;\r\n    });\r\n}\r\n/**\r\n * Fetch API to get item\r\n */\r\nexport async function fetchFile(path: string, fileName?: string): Promise<Response> {\r\n    const url = buildFileUrl(path, fileName);\r\n\r\n    return solidAuth.fetch(url)\r\n        .then(assertSuccessfulResponse);\r\n};\r\n\r\n/**\r\n * Fetch API to get item\r\n */\r\nexport async function fetchRemoteFile(url: string): Promise<Response> {\r\n    return solidAuth.fetch(url)\r\n        .then(assertSuccessfulResponse);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to get folder\r\n */\r\nexport async function fetchFolder(path: string, folderName?: string): Promise<Response> {\r\n    const url = buildFolderUrl(path, folderName);\r\n    return solidAuth.fetch(url, { headers: { \"Accept\": \"text/turtle\" } })\r\n        .then(assertSuccessfulResponse);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to retrieve object containing a files and folders array\r\n */\r\nexport async function readFolder(path: string, folderName?: string): Promise<FolderItems> {\r\n    const url = buildFolderUrl(path, folderName);\r\n\r\n    const response = await fetchFolder(path, folderName);\r\n    const folderRDF = await response.text();\r\n    const graph = await folderUtils.text2graph(folderRDF, url, 'text/turtle');\r\n    const folderItems = folderUtils.getFolderItems(graph, url);\r\n\r\n    return folderItems;\r\n}\r\n\r\n/**\r\n * Fetch API to retrieve acl triple\r\n */\r\nexport async function readAcl(path: string, aclFileName?: string): Promise<AclList> {\r\n    const url = buildFileUrl(path, aclFileName);\r\n\r\n    const response = await fetchFile(path, aclFileName);\r\n    const responseRDF = await response.text();\r\n    const graph = await aclUtils.aclText2graph(responseRDF, url);\r\n    const aclList = aclUtils.getAclList(graph, url);\r\n\r\n    return aclList;\r\n}\r\n\r\nexport async function updateVersion(path: string, fileName: string, newVersion: string, oldVersion: string) {\r\n    const folderPath = buildFileUrl(path, \"\");\r\n    const response = await fetchFile(path, fileName);\r\n    const responseRDF = await response.text();\r\n    aclUtils.saveNewVersion(responseRDF, fileName, folderPath, newVersion, oldVersion);\r\n}\r\n\r\nexport async function exposeMetadata(path: string, fileName: string, newContent: { keyword: string, discipline: string }) {\r\n    const ttlURL = buildFileUrl(\"/\" + path, fileName);\r\n    const remoteRegistryURL = \"https://davu.solid.community/public/registry/index.ttl\";\r\n    const response = await fetchRemoteFile(remoteRegistryURL);\r\n    const registryRDF = await response.text();\r\n    aclUtils.exposeMetadata(remoteRegistryURL , registryRDF, ttlURL, newContent);\r\n}\r\n\r\n\r\n\r\n/**\r\n * Fetch API to move items\r\n */\r\nexport async function moveItems(path: string, destination: string, itemNames: string[]): Promise<Response> {\r\n    await copyItems(path, destination, itemNames);\r\n    return removeItems(path, itemNames);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to rename a file\r\n */\r\nexport async function renameFile(path: string, oldName: string, newName: string): Promise<Response> {\r\n    await copyFile(path, oldName, path, newName);\r\n    return removeItem(path, oldName);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to rename a folder\r\n */\r\nexport async function renameFolder(path: string, oldFolderName: string, newFolderName: string): Promise<Response> {\r\n    await copyFolder(path, oldFolderName, path, newFolderName);\r\n    return removeFolderRecursively(path, oldFolderName);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to copy files\r\n */\r\nexport async function copyItems(path: string, destination: string, itemNames: string[]): Promise<Response> {\r\n    let { files, folders } = await readFolder(path);\r\n\r\n    files = files.filter(({ name }) => itemNames.includes(name));\r\n    folders = folders.filter(({ name }) => itemNames.includes(name));\r\n\r\n    const promises = [\r\n        ...files.map(({ name }) => copyFile(path, name, destination, name)),\r\n        ...folders.map(({ name }) => copyFolder(path, name, destination, name))\r\n    ];\r\n\r\n    await Promise.all(promises);\r\n    return new Response();\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to copy a file\r\n */\r\nexport async function copyFile(originPath: string, originName: string, destinationPath: string, destinationName: string): Promise<Response> {\r\n    const fileResponse = await fetchFile(originPath, originName);\r\n    const content = await fileResponse.blob();\r\n\r\n    return createFile(destinationPath, destinationName, content);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to copy a folder recursively\r\n */\r\nexport async function copyFolder(originPath: string, originName: string, destinationPath: string, destinationName: string): Promise<Response> {\r\n    // TODO: Combine these two promises for better performance\r\n    await createFolder(destinationPath, destinationName);\r\n    const { files, folders } = await readFolder(originPath, originName);\r\n\r\n    const promises = [\r\n        ...files.map(({ name }) => copyFile(`${originPath}/${originName}`, name, `${destinationPath}/${destinationName}`, name)),\r\n        ...folders.map(({ name }) => copyFolder(`${originPath}/${originName}`, name, `${destinationPath}/${destinationName}`, name))\r\n    ];\r\n\r\n    await Promise.all(promises);\r\n    return new Response();\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to upload files\r\n */\r\nexport async function upload(path: string, fileList: FileList): Promise<Response> {\r\n    const promises = Array.from(fileList).map(file => updateFile(path, file.name, file));\r\n    await Promise.all(promises);\r\n    return new Response();\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to create a folder\r\n */\r\nexport async function createFolder(path: string, folderName: string): Promise<Response> {\r\n    if (await folderExists(path, folderName))\r\n        return new Response();\r\n\r\n    return createItem(path, folderName, new Blob(), '<http://www.w3.org/ns/ldp#BasicContainer>; rel=\"type\"');\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to replace or create a new file\r\n */\r\nexport async function updateFile(path: string, fileName: string, content: Blob | string): Promise<Response> {\r\n    await removeItem(path, fileName);\r\n    return createFile(path, fileName, content);\r\n}\r\n\r\n/**\r\n * Fetch API to replace or create a new ACL file\r\n */\r\nexport async function updateACLFile(path: string, fileName: string, aclItem: AclItem[]): Promise<boolean> {\r\n    await removeItem(path, fileName);\r\n    console.log(\"Remove ACL file\");\r\n    const content = await aclUtils.buildACLContent(aclItem);\r\n    return createACL(path, fileName, content);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to create a new file\r\n */\r\nexport async function createFile(path: string, fileName: string, content: Blob | string): Promise<Response> {\r\n    return createItem(path, fileName, content, '<http://www.w3.org/ns/ldp#Resource>; rel=\"type\"');\r\n}\r\n\r\n\r\nexport function getBasedUrl(path: string) {\r\n    return `${config.getHost()}${path}`;\r\n}\r\n\r\nasync function createItem(path: string, itemName: string, content: Blob | string, link: string): Promise<Response> {\r\n    const baseUrl = `${config.getHost()}${path}`;\r\n    const request = {\r\n        method: 'POST',\r\n        headers: {\r\n            link,\r\n            slug: itemName,\r\n            'Content-Type': <any>undefined // TODO: This hack can be removed if this issue is fixed: https://github.com/solid/node-solid-server/issues/1165\r\n        },\r\n        body: content\r\n    };\r\n    return solidAuth.fetch(baseUrl, request)\r\n        .then(assertSuccessfulResponse);\r\n}\r\n\r\n/**\r\n * Fetch API to remove multiple items\r\n */\r\nexport async function removeItems(path: string, itemNames: string[]): Promise<Response> {\r\n    return Promise.all(itemNames.map(itemName => removeItem(path, itemName)))\r\n        .then(() => new Response());\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to remove one item\r\n */\r\nexport async function removeItem(path: string, itemName: string): Promise<Response> {\r\n    const url = buildFileUrl(path, itemName);\r\n\r\n    const response = await solidAuth.fetch(url, { method: 'DELETE' });\r\n    if (response.status === 409 || response.status === 301) {\r\n        // Solid pod returns 409 if the item is a folder and is not empty\r\n        // Solid pod returns 301 if is attempted to read a folder url without '/' at the end (from buildFileUrl)\r\n        return removeFolderRecursively(path, itemName);\r\n    }\r\n    else if (response.status === 404) {\r\n        // Don't throw if the item didn't exist\r\n        return response;\r\n    }\r\n    else {\r\n        assertSuccessfulResponse(response);\r\n        return response;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to remove contents and folder itself recursively\r\n */\r\nexport async function removeFolderRecursively(path: string, folderName: string): Promise<Response> {\r\n    await removeFolderContents(path, folderName);\r\n    return removeItem(path, folderName);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to remove contents of one folder recursively\r\n */\r\nexport async function removeFolderContents(path: string, folderName: string): Promise<Response> {\r\n    const folderPath = `${path}/${folderName}`;\r\n\r\n    const { files, folders } = await readFolder(path, folderName);\r\n    const promises = [\r\n        ...files.map(({ name }) => removeItem(folderPath, name)),\r\n        ...folders.map(({ name }) => removeFolderRecursively(folderPath, name))\r\n    ];\r\n    await Promise.all(promises);\r\n    return new Response();\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to check if a folder exists\r\n */\r\nexport async function folderExists(path: string, folderName: string): Promise<boolean> {\r\n    try {\r\n        await fetchFolder(path, folderName);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        if (error instanceof Response && error.status === 404)\r\n            return false;\r\n\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Build up an url from a path relative to the storage location and a folder name\r\n */\r\nfunction buildFolderUrl(path: string, folderName?: string): string {\r\n    return buildFileUrl(path, folderName) + '/';\r\n}\r\n\r\n\r\n/**\r\n * Build up an url from a path relative to the storage location and a fileName\r\n */\r\nfunction buildFileUrl(path: string, fileName?: string): string {\r\n    let url = `${config.getHost()}${path}/${fileName || ''}`;\r\n    while (url.slice(-1) === '/')\r\n        url = url.slice(0, -1);\r\n\r\n    return url;\r\n}\r\n\r\n\r\n/**\r\n * Throw response if fetch response was unsuccessful\r\n * @param {Response} response\r\n * @returns {Response}\r\n */\r\nfunction assertSuccessfulResponse(response: Response): Response {\r\n    if (!response.ok)\r\n        throw response;\r\n    return response;\r\n}\r\n","import * as API from './Api';\r\nimport JSZip from 'jszip';\r\nimport { FileItem, FolderItem, Item } from './Item';\r\nimport ApiCache from './ApiCache';\r\nimport { AclItem } from './AclItem';\r\n\r\nconst cache = new ApiCache();\r\n\r\n\r\n/**\r\n * Log a fetch response error and throw it again\r\n * @param {*} error \r\n */\r\nconst handleFetchError = async (error: Error | Response | string) => {\r\n    let detailedErrorMessage = '';\r\n    let displayErrorMessage: string | undefined;\r\n\r\n    console.group('handleFetchError');\r\n    if (error instanceof Response) {\r\n        detailedErrorMessage = await error.text();\r\n\r\n        console.error(`url: ${error.url}`);\r\n        console.error(`status: ${error.status}`);\r\n\r\n        const displayMessages: Record<string, string> = {\r\n            '401': `The ressource at ${error.url} requires you to login.`,\r\n            '403': `You don't have permission to access the ressource at ${error.url}.\r\n            Please make sure that you are logged in with the correct account.\r\n            If the server runs with version 5.0.0 or higher, make sure you gave this app read/write permission`,\r\n            '404': `The ressource at ${error.url} was not found`,\r\n            '500': `An internal server error occured...\r\n            ${detailedErrorMessage}`,\r\n        };\r\n        if (error.status in displayMessages)\r\n            displayErrorMessage = displayMessages[error.status];\r\n    }\r\n    else if (error instanceof Error) {\r\n        detailedErrorMessage = error.message;\r\n        console.error(error.stack);\r\n    }\r\n    else if (typeof error === 'string') {\r\n        detailedErrorMessage = error;\r\n    }\r\n    else {\r\n        detailedErrorMessage = JSON.stringify(error);\r\n    }\r\n    console.error(`errorMessage: ${detailedErrorMessage}`);\r\n    console.error(`error: ${error}`);\r\n    console.groupEnd();\r\n\r\n    throw new Error((displayErrorMessage) ? displayErrorMessage : detailedErrorMessage);\r\n}\r\n\r\n/**\r\n * Clean path string removing double slashes and prepending a slash if non-empty\r\n */\r\nconst fixPath = (path: string): string => {\r\n    if (path === \"\")\r\n        return path;\r\n    return ('/' + path).replace(/\\/\\//g, '/');\r\n};\r\n\r\n/**\r\n * Wrap API response for retrieving item list\r\n * itemList is cached automatically\r\n * @param {String} path\r\n * @returns {Promise<API.FolderItems>}\r\n */\r\nexport const getItemList = (path: string): Promise<Item[]> => {\r\n    path = fixPath(path);\r\n    if (cache.contains(path))\r\n        return Promise.resolve(cache.get(path));\r\n    return API.readFolder(path)\r\n        .then(({ files, folders }) => [...files, ...folders])\r\n        .then(itemList => cache.add(path, itemList))\r\n        .catch(handleFetchError);\r\n};\r\n\r\nexport const clearCacheForFolder = (path: string) => cache.remove(fixPath(path));\r\nexport const clearCache = () => cache.clear();\r\nexport const getBasedURL = (p: string) => {return API.getBasedUrl(fixPath(p))}\r\n/**\r\n * Wrap API response for retrieving file content\r\n */\r\nexport const getFileBlob = (path: string, filename: string): Promise<Blob> => {\r\n    path = fixPath(path);\r\n    return API.fetchFile(path, filename)\r\n        .then(response => response.blob())\r\n        .catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API response for retrieving file content\r\n */\r\nexport const getFileACL = (path: string, filename: string): Promise<AclItem[]> => {\r\n    path = fixPath(path);\r\n    return API.readAcl(path, filename)\r\n        .then(({ acls }) => acls)\r\n        .catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API response for renaming a file\r\n */\r\nexport const renameFile = (path: string, fileName: string, newFileName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.renameFile(path, fileName, newFileName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n\r\n/**\r\n * Wrap API response for renaming a folder\r\n */\r\nexport const renameFolder = (path: string, folderName: string, newFolderName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.renameFolder(path, folderName, newFolderName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for creating a folder\r\n */\r\nexport const createFolder = (path: string, folderName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    if (!(folderName || '').trim()) {\r\n        return Promise.reject('Invalid folder name');\r\n    }\r\n    return API.createFolder(path, folderName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for removing a file or folder\r\n */\r\nexport const removeItems = (path: string, filenames: string[]): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    if (!filenames.length) {\r\n        return Promise.reject('No files to remove');\r\n    }\r\n    return API.removeItems(path, filenames)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for moving a file or folder\r\n */\r\nexport const moveItems = (path: string, destination: string, filenames: string[]): Promise<Response> => {\r\n    path = fixPath(path);\r\n    destination = fixPath(destination);\r\n    cache.remove(path, destination);\r\n    if (!filenames.length) {\r\n        return Promise.reject('No files to move');\r\n    }\r\n    return API.moveItems(path, destination, filenames)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for copying a file or folder\r\n */\r\nexport const copyItems = (path: string, destination: string, filenames: string[]): Promise<Response> => {\r\n    path = fixPath(path);\r\n    destination = fixPath(destination);\r\n    cache.remove(path, destination);\r\n    if (!filenames.length) {\r\n        return Promise.reject('No files to copy');\r\n    }\r\n    return API.copyItems(path, destination, filenames)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for uploading files\r\n */\r\nexport const uploadFiles = (path: string, fileList: FileList): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n\r\n    if (!fileList.length) {\r\n        return Promise.reject('No files to upload');\r\n    }\r\n    return API.upload(path, fileList)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for uploading a file\r\n */\r\nexport const updateFile = (path: string, fileName: string, content: Blob|string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.updateFile(path, fileName, content)\r\n        .catch(handleFetchError);\r\n};\r\n\r\nexport const createACL = (path: string, fileName: string, content: Blob|string): Promise<boolean> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.createACL(path, fileName, content)\r\n        .catch(handleFetchError);\r\n};\r\n\r\nexport const updateACL = (path: string, fileName: string, aclItem: AclItem[]): Promise<boolean> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.updateACLFile(path, fileName, aclItem).catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API response for zipping multiple items\r\n */\r\nexport const getAsZip = (path: string, itemList: Item[]): Promise<JSZip> => {\r\n    path = fixPath(path);\r\n    const zip = new JSZip();\r\n\r\n    return addItemsToZip(zip, path, itemList)\r\n        .then(() => zip);\r\n}\r\n\r\n/**\r\n * Add items to a zip object recursively\r\n */\r\nconst addItemsToZip = (zip: JSZip, path: string, itemList: Item[]): Promise<void[]> => {\r\n    const promises = itemList.map(async item => {\r\n        if (item instanceof FolderItem) {\r\n            const zipFolder = zip.folder(item.name);\r\n            const folderPath = `${path}/${item.name}`;\r\n            const folderItems = await getItemList(folderPath);\r\n            await addItemsToZip(zipFolder, folderPath, folderItems);\r\n        }\r\n        else if (item instanceof FileItem) {\r\n            const blob = await getFileBlob(path, item.name);\r\n            zip.file(item.name, blob, { binary: true });\r\n        }\r\n    });\r\n\r\n    return Promise.all(promises);\r\n}\r\n\r\n/**\r\n * Wrap API response for extracting a zip archive\r\n */\r\nexport const extractZipArchive = async (path: string, destination: string = path, fileName: string) => {\r\n    const blob = await getFileBlob(path, fileName);\r\n    const zip = await JSZip.loadAsync(blob);\r\n\r\n    return uploadExtractedZipArchive(zip, destination);\r\n};\r\n\r\n/**\r\n * Recursively upload all files and folders from an extracted zip archive\r\n */\r\nasync function uploadExtractedZipArchive(zip: JSZip, destination: string, curFolder = ''): Promise<void[]> {\r\n    const promises = getItemsInZipFolder(zip, curFolder)\r\n        .map(async item => {\r\n            const relativePath = item.name;\r\n            const itemName = getItemNameFromPath(relativePath);\r\n            const path = getParentPathFromPath(`${destination}/${relativePath}`);\r\n\r\n            if (item.dir) {\r\n                await createFolder(path, itemName);\r\n                await uploadExtractedZipArchive(zip, destination, relativePath);\r\n            }\r\n            else {\r\n                const blob = await item.async('blob');\r\n                await updateFile(path, itemName, blob);\r\n            }\r\n        });\r\n\r\n    return Promise.all(promises);\r\n};\r\n\r\nfunction getItemsInZipFolder(zip: JSZip, folderPath: string): JSZip.JSZipObject[] {\r\n    return Object.keys(zip.files)\r\n        .filter(fileName => {\r\n            // Only items in the current folder and subfolders\r\n            const relativePath = fileName.slice(folderPath.length, fileName.length);\r\n            if (!relativePath || fileName.slice(0, folderPath.length) !== folderPath)\r\n                return false;\r\n            \r\n            // No items from subfolders\r\n            if (relativePath.includes('/') && relativePath.slice(0, -1).includes('/'))\r\n                return false;\r\n\r\n            return true;\r\n        })\r\n        .map(key => zip.files[key]);\r\n};\r\n\r\nfunction getItemNameFromPath(path: string): string {\r\n    path = path.endsWith('/') ? path.slice(0, -1) : path;\r\n    return path.substr(path.lastIndexOf('/') + 1);\r\n}\r\n\r\nfunction getParentPathFromPath(path: string): string {\r\n    path = path.endsWith('/') ? path.slice(0, -1) : path;\r\n    path = path.substr(0, path.lastIndexOf('/'));\r\n    return path;\r\n}\r\n","// eslint-disable-next-line no-unused-vars\r\nimport { Item } from './Item';\r\n\r\nexport default class ApiCache {\r\n    _data: Record<string, Item[]> = {};\r\n\r\n    /**\r\n     * Add data to the cache\r\n     */\r\n    add(path: string, itemList: Item[]): Item[] {\r\n        this._data[path] = itemList;\r\n        return itemList;\r\n    }\r\n\r\n    /**\r\n     * Return true if the url is already cached\r\n     */\r\n    contains(path: string): boolean {\r\n        return this._data.hasOwnProperty(path);\r\n    }\r\n\r\n    /**\r\n     * Get the cached data\r\n     */\r\n    get(path: string): Item[] {\r\n        return this._data[path];\r\n    }\r\n\r\n    /**\r\n     * Remove paths from the cache\r\n     */\r\n    remove(...paths: string[]) {\r\n        paths.filter(path => this.contains(path))\r\n            .forEach(path => delete this._data[path]);\r\n    }\r\n\r\n    /**\r\n     * Clear the whole cache\r\n     */\r\n    clear() {\r\n        this._data = {};\r\n    }\r\n}\r\n","import * as APIHandler from '../Api/ApiHandler';\r\nimport * as solidAuth from 'solid-auth-client';\r\nimport { createBrowserHistory, History } from 'history';\r\nimport { Item, FileItem, FolderItem } from '../Api/Item';\r\nimport { Action, ENTER_FOLDER, SET_LOGGED_IN, SET_LOGGED_OUT, SET_HOST, SET_ITEMS, SET_ACLITEMS, SET_WEB_ID, SELECT_ITEMS, TOGGLE_SELECTED_ITEM, DESELECT_ITEM, FILTER_ITEMS, RESET_FILTER, DISPLAY_LOADING, STOP_LOADING, DIALOGS, OPEN_DIALOG, CLOSE_DIALOG, SET_LOADED_BLOB, SET_UPLOAD_FILE_LIST, SET_UPLOAD_FILE_PROGRESS, SET_PATH, MOVE_FOLDER_UPWARDS, RESET_LOADED_BLOB, RESET_HOST, RESET_WEB_ID, SET_ERROR_MESSAGE, OPEN_CONTEXT_MENU, CLOSE_CONTEXT_MENU } from './actionTypes';\r\nimport { AppState } from '../Reducers/reducer';\r\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\r\nimport { AclItem } from '../Api/AclItem';\r\nimport { saveNewVersion } from '../Api/aclUtils';\r\nimport { updateVersion, exposeMetadata } from '../Api/Api';\r\n\r\nexport type MyThunk = ThunkAction<void, AppState, null, Action<any>>;\r\nexport type MyDispatch = ThunkDispatch<AppState, null, Action<any>>;\r\n\r\nexport const initApp = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(updateLoginStatus());\r\n  dispatch(openDialog(DIALOGS.CHOOSE_LOCATION));\r\n};\r\n\r\n\r\nexport const solidLogin = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(displayLoading());\r\n\r\n  solidPopupLogin()\r\n    .then(session => dispatch(updateLoginStatus(session)))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const updateLoginStatus = (session?: Session | null): MyThunk => async (dispatch, getState) => {\r\n  session = session || await solidAuth.currentSession();\r\n  if (!session) {\r\n    dispatch(setLoggedOut());\r\n    dispatch(resetWebId());\r\n  }\r\n  else {\r\n    dispatch(setWebId(session.webId));\r\n    dispatch(setLoggedIn());\r\n  }\r\n}\r\n\r\nasync function solidPopupLogin() {\r\n  return solidAuth.popupLogin({ popupUri: './vendor/solid-auth-client/popup.html' });\r\n}\r\n\r\n\r\nexport const solidLogout = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(displayLoading());\r\n\r\n  solidAuth.logout()\r\n    .then(() => {\r\n      dispatch(resetPath());\r\n      dispatch(resetItems());\r\n      dispatch(resetSelectedItems());\r\n      dispatch(setLoggedOut());\r\n      dispatch(resetWebId());\r\n\r\n      dispatch(openDialog(DIALOGS.CHOOSE_LOCATION));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const clearCache = (): MyThunk => (dispatch, getState) => APIHandler.clearCache();\r\n\r\n\r\n/**\r\n * Request API to get file list for the selected path then refresh UI\r\n */\r\nexport const uploadFiles = (): MyThunk => (dispatch, getState) => {\r\n  const { path, upload: { fileList } } = getState();\r\n\r\n  if (fileList === null)\r\n    return dispatch(setErrorMessage(\"Couldn't find files to upload\"));\r\n\r\n  dispatch(displayLoading());\r\n  dispatch(resetSelectedItems());\r\n  dispatch(setFileUploadProgress(50));\r\n\r\n  APIHandler.uploadFiles(path.join('/'), fileList)\r\n    .then(r => {\r\n      dispatch(setFileUploadProgress(100));\r\n      setTimeout(f => {\r\n        dispatch(resetFileUploader());\r\n      }, 300);\r\n      dispatch(displayCurrentItemList());\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const handleExposeData = (item: Item, newContent: { keyword: string, discipline: string }): MyThunk => (dispatch, getState) => {\r\n  const { path, upload: { fileList } } = getState();\r\n\r\n  dispatch(displayLoading());\r\n  dispatch(resetSelectedItems());\r\n\r\n  let folderPath = path.join('/');\r\n  exposeMetadata(folderPath, item.name, newContent);\r\n  dispatch(closeDialog(DIALOGS.EXPOSE_METADATA))\r\n  dispatch(displayCurrentItemList());\r\n};\r\n\r\nexport const handleAddNewVersion = (item: Item, preVersion: string, currentVersion: string): MyThunk => (dispatch, getState) => {\r\n  const { path, upload: { fileList } } = getState();\r\n\r\n  dispatch(displayLoading());\r\n  dispatch(resetSelectedItems());\r\n  dispatch(setFileUploadProgress(50));\r\n  const versionFolderName = \"version\";\r\n  let folderPath = path.join('/');\r\n  const destination = folderPath + \"/\" + versionFolderName + \"/\" + preVersion;\r\n  const itemNames = [item.name];\r\n\r\n  if (fileList === null) {\r\n    dispatch(resetNewVersionUploader());\r\n    dispatch(displayCurrentItemList());\r\n    return dispatch(setErrorMessage(\"Couldn't find files to upload\"));\r\n  }\r\n  if (fileList[0].name != item.name) {\r\n    dispatch(resetNewVersionUploader());\r\n    dispatch(displayCurrentItemList());\r\n    return dispatch(setErrorMessage(\"The new version need to has same file name\"));\r\n  }\r\n\r\n  updateVersion('/' + folderPath, fileList[0].name + \".ttl\", currentVersion, preVersion);\r\n\r\n  APIHandler.createFolder(folderPath, versionFolderName)\r\n    .then(r => {\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(setFileUploadProgress(100));\r\n      setTimeout(f => {\r\n        dispatch(resetNewVersionUploader());\r\n      }, 300);\r\n      folderPath += \"/\" + versionFolderName + \"/\";\r\n      APIHandler.createFolder(folderPath, preVersion)\r\n        .then(r => {\r\n          folderPath += \"/\" + preVersion + \"/\";\r\n          APIHandler.moveItems(path.join('/'), destination, itemNames)\r\n            .then(r => {\r\n              APIHandler.renameFile(destination, item.name, item.name + \".old\")\r\n                .catch(r => dispatch(setErrorMessage(String(r))))\r\n                .finally(() => dispatch(stopLoading()));\r\n              APIHandler.uploadFiles(path.join('/'), fileList)\r\n                .then(r => {\r\n                  dispatch(displayCurrentItemList());\r\n                })\r\n                .catch(r => dispatch(setErrorMessage(String(r))))\r\n                .finally(() => {\r\n                  dispatch(stopLoading());\r\n                });\r\n            })\r\n            .catch(r => dispatch(setErrorMessage(String(r))))\r\n            .finally(() => dispatch(stopLoading()));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const uploadReseachData = (): MyThunk => (dispatch, getState) => {\r\n  const { path, upload: { fileList } } = getState();\r\n\r\n  if (fileList === null)\r\n    return dispatch(setErrorMessage(\"Couldn't find files to upload\"));\r\n\r\n  dispatch(displayLoading());\r\n  dispatch(resetSelectedItems());\r\n  dispatch(setFileUploadProgress(50));\r\n\r\n  APIHandler.uploadFiles(path.join('/'), fileList)\r\n    .then(r => {\r\n      dispatch(setFileUploadProgress(100));\r\n      setTimeout(f => {\r\n        dispatch(resetFileUploader());\r\n      }, 300);\r\n      dispatch(displayCurrentItemList());\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => {\r\n      dispatch(createResearchDataACL(fileList[0].name, 'b'));\r\n      dispatch(stopLoading());\r\n    });\r\n};\r\n\r\nconst getFilePathUrl = (path: string[], fileName: string): string => {\r\n  return APIHandler.getBasedURL(path.join('/')) + '/' + fileName;\r\n}\r\n\r\nconst getProfileUrl = (): string => {\r\n  return APIHandler.getBasedURL(\"profile/card#me\");\r\n}\r\n\r\nexport const createResearchDataACL = (fileName: string, content: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  let filepath = getFilePathUrl(path, fileName);\r\n  let profilePath = getProfileUrl();\r\n\r\n  content = `@prefix  acl:  <http://www.w3.org/ns/auth/acl#> .\r\n    <#authorization0> a  acl:Authorization;\r\n    acl:agent <${profilePath}>;\r\n    acl:accessTo <${filepath}>;\r\n    acl:defaultForNew <./>;\r\n    acl:mode  acl:Read, acl:Write, acl:Control, acl:Append.`\r\n\r\n  fileName += \".acl\";\r\n\r\n  dispatch(displayLoading());\r\n  APIHandler.createACL(path.join('/'), fileName, content)\r\n    .then(r => {\r\n      dispatch(displayCurrentItemList());\r\n      return APIHandler.getItemList(path.join('/'));\r\n    })\r\n    .then(itemList => itemList.find(item => item.getDisplayName() === fileName))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const uploadMetadata = (): MyThunk => (dispatch, getState) => {\r\n  const { path, upload: { fileList } } = getState();\r\n\r\n  if (fileList === null)\r\n    return dispatch(setErrorMessage(\"Couldn't find files to upload\"));\r\n\r\n  dispatch(displayLoading());\r\n  dispatch(resetSelectedItems());\r\n  dispatch(setFileUploadProgress(50));\r\n\r\n  APIHandler.uploadFiles(path.join('/'), fileList)\r\n    .then(r => {\r\n      dispatch(setFileUploadProgress(100));\r\n      setTimeout(f => {\r\n        dispatch(resetMetadataUploader());\r\n      }, 300);\r\n      dispatch(displayCurrentItemList());\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => {\r\n      dispatch(createMetadataACL(fileList[0].name, 'b'));\r\n      dispatch(stopLoading());\r\n    });\r\n};\r\n\r\nexport const editAccessControl = (): MyThunk => (dispatch, getState) => {\r\n  const { path, upload: { fileList } } = getState();\r\n\r\n};\r\n\r\nexport const createMetadataACL = (fileName: string, content: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  let filepath = getFilePathUrl(path, fileName);\r\n  let profilePath = getProfileUrl();\r\n\r\n  content = `@prefix  acl:  <http://www.w3.org/ns/auth/acl#> .\r\n    <#authorization0> a  acl:Authorization;\r\n    acl:agent <${profilePath}>;\r\n    acl:accessTo <${filepath}>;\r\n    acl:defaultForNew <./>;\r\n    acl:mode  acl:Read, acl:Write, acl:Control, acl:Append.\r\n\r\n    <#authorization1> a  acl:Authorization;\r\n    acl:defaultForNew  <./>;\r\n    acl:accessTo   <${filepath}>; \r\n    acl:mode   acl:Read;\r\n    acl:agentClass <http://xmlns.com/foaf/0.1/Agent>.`\r\n\r\n  fileName += \".acl\";\r\n\r\n  dispatch(displayLoading());\r\n  APIHandler.createACL(path.join('/'), fileName, content)\r\n    .then(r => {\r\n      dispatch(displayCurrentItemList());\r\n      return APIHandler.getItemList(path.join('/'));\r\n    })\r\n    .then(itemList => itemList.find(item => item.getDisplayName() === fileName))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const createFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  APIHandler.updateFile(path.join('/'), fileName, new Blob())\r\n    .then(r => {\r\n      dispatch(closeDialog(DIALOGS.CREATE_FILE));\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(loadAndEditFile(fileName));\r\n      return APIHandler.getItemList(path.join('/'));\r\n    })\r\n    .then(itemList => itemList.find(item => item.getDisplayName() === fileName))\r\n    .then(item => {\r\n      if (!item)\r\n        throw new Error(\"Couldn't load created file for editing\");\r\n      dispatch(selectItem(item));\r\n      dispatch(getFileContent(item.name));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\nexport const updateAccessControl = (fileName: string, aclItem: AclItem[]): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  //change name to point to .acl file\r\n  fileName += \".acl\";\r\n\r\n  APIHandler.updateACL(path.join('/'), fileName, aclItem)\r\n    .then(r => {\r\n      dispatch(closeDialog(DIALOGS.ACCESS_CONTROL));\r\n      dispatch(displayCurrentItemList());\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n}\r\n\r\nexport const updateTextFile = (fileName: string, content: Blob | string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  APIHandler.updateFile(path.join('/'), fileName, content)\r\n    .then(r => {\r\n      dispatch(closeDialog(DIALOGS.EDIT));\r\n      dispatch(displayCurrentItemList());\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n}\r\n\r\n/**\r\n * Request API to display file list for the selected path\r\n */\r\nexport const displayCurrentItemList = (): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n  dispatch(resetSelectedItems());\r\n  APIHandler.getItemList(path.join('/'))\r\n    .then(items => dispatch(setItems(items)))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to reload the file list and then refresh UI\r\n */\r\nexport const refreshItemList = (): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  APIHandler.clearCacheForFolder(path.join('/'));\r\n  return dispatch(displayCurrentItemList());\r\n};\r\n\r\n\r\n/**\r\n * Request API to rename file then dispatch defined events\r\n */\r\nexport const renameFile = (fileName: string, newFileName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  APIHandler.renameFile(path.join('/'), fileName, newFileName)\r\n    .then(() => {\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(closeDialog(DIALOGS.RENAME));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to rename file then dispatch defined events\r\n */\r\nexport const renameFolder = (folderName: string, newFolderName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  APIHandler.renameFolder(path.join('/'), folderName, newFolderName)\r\n    .then(() => {\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(closeDialog(DIALOGS.RENAME));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to download the specified items\r\n */\r\nexport const downloadItems = (items: Item[]): MyThunk => async (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  try {\r\n    let blob;\r\n    let downloadName = items[0].name;\r\n    if (items.length === 1 && items[0] instanceof FileItem) {\r\n      blob = await APIHandler.getFileBlob(path.join('/'), items[0].name);\r\n    }\r\n    else {\r\n      const zip = await APIHandler.getAsZip(path.join('/'), items);\r\n      blob = await zip.generateAsync({ type: 'blob' });\r\n\r\n      if (items.length > 1)\r\n        downloadName = 'Archive';\r\n      downloadName = `${downloadName}.zip`;\r\n    }\r\n\r\n    promptDownload(blob, downloadName);\r\n  }\r\n  catch (e) {\r\n    dispatch(setErrorMessage(String(e)));\r\n  }\r\n  dispatch(stopLoading());\r\n};\r\n\r\n/**\r\n * Request API to upload the items as zip archive\r\n */\r\nexport const zipAndUpload = (items: Item[]): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  const archiveName = (items.length === 1 && items[0] instanceof FolderItem) ?\r\n    `${items[0].name}.zip`\r\n    : 'Archive.zip';\r\n\r\n  APIHandler.getAsZip(path.join('/'), items)\r\n    .then(zip => zip.generateAsync({ type: 'blob' }))\r\n    .then(blob => APIHandler.updateFile(path.join('/'), archiveName, blob))\r\n    .then(() => dispatch(displayCurrentItemList()))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API for extracting a zip archive\r\n */\r\nexport const extractZipFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  APIHandler.extractZipArchive(path.join('/'), path.join('/'), fileName)\r\n    .then(r => dispatch(displayCurrentItemList()))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n// code based on https://stackoverflow.com/a/30832210/6548154\r\nfunction promptDownload(file: Blob, fileName: string) {\r\n  if (window.navigator.msSaveOrOpenBlob) // IE10+\r\n    window.navigator.msSaveOrOpenBlob(file, fileName);\r\n  else { // Others\r\n    const a = document.createElement(\"a\");\r\n    const url = URL.createObjectURL(file);\r\n    a.href = url;\r\n    a.download = fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    setTimeout(() => {\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * Opens the item in a new tab\r\n */\r\nexport const openInNewTab = (item: Item): MyThunk => (dispatch, getState) => {\r\n  window.open(item.url, '_blank');\r\n};\r\n\r\n\r\n/**\r\n * Request API to get file content then dispatch defined events\r\n */\r\nexport const getFileContent = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n  dispatch(resetFileContent());\r\n\r\n  APIHandler.getFileBlob(path.join('/'), fileName)\r\n    .then(blob => dispatch(setFileContent(blob)))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to get acl file content then dispatch defined events\r\n */\r\nexport const getACLContent = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n  dispatch(resetFileContent());\r\n\r\n  APIHandler.getFileACL(path.join('/'), fileName)\r\n    .then(items => dispatch(setAclItems(items)))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to get file content and open the edit dialogue\r\n */\r\nexport const loadAndEditFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  dispatch(getFileContent(fileName));\r\n  dispatch(openDialog(DIALOGS.EDIT));\r\n};\r\n\r\nexport const loadExposeMetadata = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  dispatch(getFileContent(fileName));\r\n  dispatch(openDialog(DIALOGS.EXPOSE_METADATA));\r\n};\r\n\r\nexport const loadMetadataFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  dispatch(getFileContent(fileName + '.ttl'));\r\n  dispatch(openDialog(DIALOGS.ADD_NEW_VERSION));\r\n};\r\n\r\n/**\r\n * Request API to get file content and open the edit dialogue\r\n */\r\nexport const loadAndOpenAccessControl = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  dispatch(getFileContent(fileName + \".acl\"));\r\n  dispatch(openDialog(DIALOGS.ACCESS_CONTROL));\r\n};\r\n\r\n\r\n/**\r\n * Request API to get file content and display it\r\n */\r\nexport const loadAndDisplayFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  dispatch(getFileContent(fileName));\r\n  dispatch(openDialog(DIALOGS.CONTENT));\r\n};\r\n\r\n\r\n/**\r\n * Request API to display an audio or video file\r\n */\r\nexport const displaySelectedMediaFile = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(openDialog(DIALOGS.MEDIA));\r\n};\r\n\r\n\r\n/**\r\n * Request API to create a folder then dispatch defined events\r\n */\r\nexport const createNewFolder = (folderName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  APIHandler.createFolder(path.join('/'), folderName)\r\n    .then(r => {\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(closeDialog(DIALOGS.CREATE_FOLDER));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to remove multiple items\r\n */\r\nexport const removeItems = (items: Item[]): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  const itemNames = items.map(f => f.name);\r\n\r\n  APIHandler.removeItems(path.join('/'), itemNames)\r\n    .then(r => dispatch(displayCurrentItemList()))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to move multiple items\r\n */\r\nexport const moveItems = (items: Item[], { host, path: targetPath }: { host: string, path: string[] }): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n\r\n  const destination = targetPath.join('/');\r\n  const itemNames = items.map(f => f.name);\r\n\r\n  APIHandler.moveItems(path.join('/'), destination, itemNames)\r\n    .then(r => {\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(closeDialog(DIALOGS.MOVE));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to copy an item then dispatch defined events\r\n */\r\nexport const copyItems = (items: Item[], { host, path: targetPath }: { host: string, path: string[] }): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  const destination = targetPath.join('/');\r\n  const itemNames = items.map(f => f.name);\r\n\r\n  APIHandler.copyItems(path.join('/'), destination, itemNames)\r\n    .then(r => {\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(closeDialog(DIALOGS.COPY));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * This handles multiple selection by using shift key\r\n */\r\nexport const setSelectedItemsFromLastTo = (lastFile: Item): MyThunk => (dispatch, getState) => {\r\n  const { items: { inCurFolder: items, selected: selectedItems } } = getState();\r\n\r\n  const lastPreviouslySelected = [...selectedItems].pop();\r\n  if (!lastPreviouslySelected)\r\n    return dispatch(setErrorMessage(\"Couldn't enlarge selection because no items were previously selected\"));\r\n\r\n  const lastPreviouslySelectedIndex = items.indexOf(lastPreviouslySelected);\r\n  const lastSelectedIndex = items.indexOf(lastFile);\r\n\r\n  const isInRange = (num: number, start: number, end: number) => start <= num && num <= end;\r\n  const toAdd = lastSelectedIndex > lastPreviouslySelectedIndex ?\r\n    items.filter((item, index) => isInRange(index, lastPreviouslySelectedIndex, lastSelectedIndex))\r\n    : items.filter((item, index) => isInRange(index, lastSelectedIndex, lastPreviouslySelectedIndex));\r\n\r\n  dispatch(selectItems([...selectedItems, ...toAdd]));\r\n};\r\n\r\n\r\nexport const resetFileUploader = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(setFileUploadProgress(0));\r\n  dispatch(closeDialog(DIALOGS.UPLOAD_FILE));\r\n  dispatch(resetFileUploadList());\r\n};\r\n\r\nexport const resetNewVersionUploader = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(setFileUploadProgress(0));\r\n  dispatch(closeDialog(DIALOGS.ADD_NEW_VERSION));\r\n  dispatch(resetFileUploadList());\r\n};\r\n\r\nexport const resetAccessControl = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(setFileUploadProgress(0));\r\n  dispatch(closeDialog(DIALOGS.ACCESS_CONTROL));\r\n  dispatch(resetFileUploadList());\r\n};\r\n\r\n\r\nexport const resetMetadataUploader = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(setFileUploadProgress(0));\r\n  dispatch(closeDialog(DIALOGS.UPLOAD_METADATA));\r\n  dispatch(resetFileUploadList());\r\n};\r\n\r\n\r\nexport const enterFolder = (path: string[]): MyThunk => (dispatch, getState) => {\r\n  dispatch(setPath(path));\r\n  dispatch(resetFilter());\r\n  dispatch(displayCurrentItemList());\r\n};\r\n\r\nexport const enterFolderByItem = (item: Item): MyThunk => (dispatch, getState) => {\r\n  const path = item.path;\r\n  // Open containing folder if it is a file\r\n  dispatch(enterFolder(item instanceof FileItem ? path : [...path, item.name]));\r\n};\r\n\r\nexport const moveFolderUpwardsAndRefresh = (n: number): MyThunk => (dispatch, getState) => {\r\n  dispatch(moveFolderUpwards(n));\r\n  dispatch(refreshItemList());\r\n};\r\n\r\nexport const rightClickOnFile = (item: Item): MyThunk => (dispatch, getState) => {\r\n  const { items: { selected } } = getState();\r\n  const isSelected = selected.includes(item);\r\n\r\n  !isSelected && dispatch(selectItem(item));\r\n};\r\n\r\n\r\n// Create action which can be dispatched\r\nconst makeActionCreator: <VALUE = void>(type: string) => (value: VALUE) => Action<VALUE> = <VALUE = void>(type: string) => (value: VALUE) => {\r\n  return {\r\n    type,\r\n    value\r\n  };\r\n};\r\n\r\nexport const moveFolderUpwards = makeActionCreator<number>(MOVE_FOLDER_UPWARDS);\r\nexport const setPath = makeActionCreator<string[]>(SET_PATH);\r\nexport const resetPath = () => setPath([]);\r\n\r\nexport const setLoggedIn = makeActionCreator(SET_LOGGED_IN);\r\nexport const setLoggedOut = makeActionCreator(SET_LOGGED_OUT);\r\nexport const setHost = makeActionCreator<string>(SET_HOST);\r\nexport const resetHost = makeActionCreator(RESET_HOST);\r\nexport const setWebId = makeActionCreator<string>(SET_WEB_ID);\r\nexport const resetWebId = makeActionCreator(RESET_WEB_ID);\r\n\r\nexport const setItems = makeActionCreator<Item[]>(SET_ITEMS);\r\nexport const resetItems = () => setItems([]);\r\n\r\nexport const setAclItems = makeActionCreator<AclItem[]>(SET_ACLITEMS);\r\nexport const resetAclItems = () => setAclItems([]);\r\n\r\nexport const selectItems = makeActionCreator<Item[]>(SELECT_ITEMS);\r\nexport const selectItem = (item: Item) => selectItems([item]);\r\nexport const resetSelectedItems = () => selectItems([]);\r\nexport const toggleSelectedItem = makeActionCreator<Item>(TOGGLE_SELECTED_ITEM);\r\nexport const deselectItem = makeActionCreator<Item>(DESELECT_ITEM);\r\n\r\nexport const filterItems = makeActionCreator<string>(FILTER_ITEMS);\r\nexport const resetFilter = makeActionCreator(RESET_FILTER);\r\n\r\n\r\nexport const displayLoading = makeActionCreator(DISPLAY_LOADING);\r\nexport const stopLoading = makeActionCreator(STOP_LOADING);\r\n\r\nexport const resetFileContent = makeActionCreator(RESET_LOADED_BLOB);\r\nexport const setFileContent = makeActionCreator<Blob>(SET_LOADED_BLOB);\r\nexport const setFileUploadList = makeActionCreator<FileList | null>(SET_UPLOAD_FILE_LIST);\r\nexport const resetFileUploadList = () => setFileUploadList(null);\r\nexport const setFileUploadProgress = makeActionCreator<number>(SET_UPLOAD_FILE_PROGRESS);\r\n\r\nexport const openDialog = makeActionCreator<DIALOGS>(OPEN_DIALOG);\r\nexport const closeDialog = makeActionCreator<DIALOGS>(CLOSE_DIALOG);\r\nexport const openContextMenu = makeActionCreator<{ x: number, y: number }>(OPEN_CONTEXT_MENU);\r\nexport const closeContextMenu = makeActionCreator(CLOSE_CONTEXT_MENU);\r\n\r\nexport const setErrorMessage = makeActionCreator<string>(SET_ERROR_MESSAGE);\r\nexport const resetErrorMessage = () => setErrorMessage('');\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    setSelectedItemsFromLastTo, loadAndEditFile, loadAndDisplayFile, displaySelectedMediaFile,\r\n    rightClickOnFile, enterFolderByItem, MyDispatch, openContextMenu, toggleSelectedItem, selectItems\r\n} from '../../Actions/Actions';\r\nimport './File.css';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport { FileItem, Item } from '../../Api/Item';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nclass File extends Component<FileProps> {\r\n    render() {\r\n        const { isSelected, item, handleClick, handleDoubleClick, handleContextMenu } = this.props;\r\n        const avatarStyle = {\r\n            backgroundColor: isSelected ? blue['A200'] : undefined\r\n        };\r\n        const realSize = (item instanceof FileItem) ? item.getDisplaySize() : null;\r\n        return (\r\n            <div className=\"File\" onClick={handleClick} onDoubleClick={handleDoubleClick} onContextMenu={handleContextMenu} data-selected={isSelected}>\r\n                <ListItem>\r\n                    <ListItemAvatar>\r\n                        <Avatar style={avatarStyle}>\r\n                            { (item instanceof FileItem) ? <FileIcon /> : <FolderIcon />}\r\n                        </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText className=\"filename\" primary={item.getDisplayName()} secondary={realSize} />\r\n                </ListItem>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\ninterface FileOwnProps {\r\n    item: Item;\r\n}\r\ninterface StateProps {\r\n    isSelected: boolean;\r\n}\r\ninterface DispatchProps {\r\n    handleClick(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n    handleDoubleClick(): void;\r\n    handleContextMenu(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n}\r\ninterface FileProps extends FileOwnProps, StateProps, DispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: FileOwnProps): StateProps => {\r\n    return {\r\n        isSelected: state.items.selected.includes(ownProps.item)\r\n    };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch, ownProps: FileOwnProps): DispatchProps => {\r\n    return {\r\n        handleDoubleClick: () => {\r\n            const item = ownProps.item;\r\n\r\n            if (item instanceof FileItem) {\r\n                if (item.isEditable())\r\n                    dispatch(loadAndEditFile(item.name));\r\n                else if (item.isImage())\r\n                    dispatch(loadAndDisplayFile(item.name));\r\n                else if (item.isMedia())\r\n                    dispatch(displaySelectedMediaFile());\r\n            }\r\n            else\r\n                dispatch(enterFolderByItem(item));\r\n        },\r\n\r\n        handleContextMenu: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            let x = 0;\r\n            let y = 0;\r\n\r\n            if (event.nativeEvent instanceof MouseEvent) {\r\n                x = event.nativeEvent.clientX;\r\n                y = event.nativeEvent.clientY;\r\n            }\r\n            else if (event.nativeEvent instanceof TouchEvent) {\r\n                x = event.nativeEvent.touches[0].pageX;\r\n                y = event.nativeEvent.touches[0].pageY;\r\n            }\r\n            else {\r\n                console.warn(\"Unknown click event\", event);\r\n            }\r\n\r\n            if (event.shiftKey) {\r\n                dispatch(setSelectedItemsFromLastTo(ownProps.item));\r\n            } else {\r\n                dispatch(rightClickOnFile(ownProps.item));\r\n            }\r\n            \r\n            dispatch(openContextMenu({ x, y }));\r\n        },\r\n\r\n        handleClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\r\n            event.stopPropagation();\r\n\r\n            if (event.ctrlKey) {\r\n                dispatch(toggleSelectedItem(ownProps.item));\r\n            } else if (event.shiftKey) {\r\n                dispatch(setSelectedItemsFromLastTo(ownProps.item));\r\n            } else {\r\n                dispatch(selectItems([ownProps.item]));\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(File);\r\n","import React from 'react';\r\nimport './FileListEmptyMessage.css';\r\n\r\nexport default function FileListEmptyMessage() {\r\n    return (\r\n        <div className=\"FileListEmptyMessage\">\r\n            No files in this folder\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, createStyles, Theme, WithStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  progress: {\r\n    margin: theme.spacing.unit * 10,\r\n  },\r\n});\r\n\r\nfunction Loader(props: LoaderProps) {\r\n    return (\r\n        <Grid container justify=\"center\">\r\n            <CircularProgress className={props.classes.progress} color=\"secondary\" />\r\n        </Grid>\r\n    );\r\n}\r\n\r\ninterface LoaderProps extends WithStyles<typeof styles> {};\r\n\r\nexport default withStyles(styles)(Loader);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport File from '../File/File'; \r\nimport FileListEmptyMessage from './FileListEmptyMessage';\r\nimport Loader from '../Loader/Loader'; \r\nimport './FileList.css';\r\nimport { Item } from '../../Api/Item';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nclass FileList extends Component<FileListProps> {\r\n    render() {\r\n        const { items, isLoading } = this.props;\r\n        const itemComponents = items.map((item, key) => {\r\n            return <File item={item} key={key} />;\r\n        });\r\n\r\n        return <div className=\"FileList\">\r\n            { isLoading ? \r\n                <Loader /> : \r\n                itemComponents.length ? itemComponents : <FileListEmptyMessage />\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\ninterface StateProps {\r\n    items: Item[];\r\n    isLoading: boolean;\r\n}\r\ninterface FileListProps extends StateProps {};\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    const items = state.items.inCurFolder\r\n        .filter(item => filterMatch(item.getDisplayName(), state.items.filter));\r\n\r\n    return {\r\n        items,\r\n        isLoading: state.loading,\r\n    };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nconst filterMatch = (first: string, second: string) => {\r\n    return first.toLocaleLowerCase().match(second.toLocaleLowerCase());\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FileList);\r\n\r\n\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CreateNewFolderIcon from '@material-ui/icons/CreateNewFolder';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction CreateFolderAction(props: CreateFolderActionProps) {\r\n    const {handleClick, handleClose} = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <CreateNewFolderIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Add new folder\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface CreateFolderActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.CREATE_FOLDER));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateFolderAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction CreateFileAction(props: CreateFileActionProps) {\r\n    const {handleClick, handleClose} = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <InsertDriveFileIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Create file\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface CreateFileActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.CREATE_FILE));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateFileAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction UploadFileAction(props: UploadFileActionProps) {\r\n    const { handleClick, handleClose } = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <CloudUploadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Upload Research Data\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface UploadFileActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.UPLOAD_FILE));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadFileAction);\r\n","import React from 'react';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { connect } from 'react-redux';\r\nimport CreateFolderAction from '../ContextMenu/ContextMenuActions/CreateFolderAction';\r\nimport CreateFileAction from '../ContextMenu/ContextMenuActions/CreateFileAction';\r\nimport UploadFileAction from '../ContextMenu/ContextMenuActions/UploadFileAction';\r\nimport ChooseLocationAction from '../ContextMenu/ContextMenuActions/ChooseLocationAction';\r\n\r\nconst style = {\r\n  color: 'white'\r\n};\r\n\r\nclass ThreeDotsMenu extends React.Component {\r\n  state = {\r\n    anchorEl: null as HTMLElement|null,\r\n  };\r\n\r\n  handleClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n    this.setState({ anchorEl: event.currentTarget });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ anchorEl: null });\r\n  };\r\n\r\n  render() {\r\n    const { anchorEl } = this.state;\r\n\r\n    return (\r\n      <div style={{marginLeft:'1em'}}>\r\n        <IconButton color=\"inherit\" \r\n          style={style}\r\n          aria-label=\"More\"\r\n          aria-owns={Boolean(anchorEl) ? 'long-menu' : undefined}\r\n          aria-haspopup=\"true\"\r\n          onClick={this.handleClick}>\r\n          <MoreVertIcon />\r\n        </IconButton>\r\n\r\n        <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={this.handleClose}>\r\n          <CreateFolderAction handleClose={this.handleClose} />\r\n          <CreateFileAction handleClose={this.handleClose} />\r\n          <UploadFileAction handleClose={this.handleClose} />\r\n          {/* <ChooseLocationAction handleClose={this.handleClose} /> */}\r\n        </Menu>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ThreeDotsMenu);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles, createStyles, Theme, WithStyles } from '@material-ui/core/styles';\r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport './BreadcrumbText.css';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  lastPath: {\r\n    display: 'block',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none'\r\n    }\r\n  },\r\n  paths: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    }\r\n  }\r\n});\r\n\r\nclass BreadcrumbText extends Component<BreadcrumbTextProps> {\r\n\r\n    render() {\r\n        const { classes, handleClickPath, path, rootTitle, handleGoBack, canGoBack } = this.props;\r\n\r\n        const separator = <span>&gt;</span>;\r\n        const rootPath = <span onClick={() => handleClickPath(-1)} data-index={0}>\r\n            { rootTitle } { path.length ? separator : '' }\r\n        </span>;\r\n        const lastPath = [...path].pop() || rootTitle;\r\n\r\n        const directories = path.map((dir, index) => {\r\n            return <span key={index} data-index={index} onClick={(e) => handleClickPath(index)}>\r\n                <span>{dir}</span> { path.length -1 !== index ? separator : '' }&nbsp;\r\n            </span>\r\n        });\r\n\r\n        return (\r\n            <div className=\"BreadcrumbText\">\r\n                <div className={classes.lastPath}>\r\n                    <Button onClick={handleGoBack} color=\"inherit\" type=\"button\" style={{display: canGoBack ? 'inline-flex' : 'none'}}>\r\n                        <KeyboardArrowLeftIcon />\r\n                    </Button>\r\n                    {lastPath}\r\n                </div>\r\n                <div className={classes.paths}>{rootPath} {directories}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface BreadcrumbTextProps extends WithStyles<typeof styles> {\r\n    handleClickPath(index: number): void;\r\n    handleGoBack(): void;\r\n    canGoBack: boolean;\r\n    path: string[];\r\n    rootTitle: string;\r\n\r\n}\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(BreadcrumbText));\r\n","import React, { ChangeEvent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport { withStyles, Theme, createStyles, WithStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { connect } from 'react-redux';\r\nimport { refreshItemList, moveFolderUpwardsAndRefresh, filterItems, MyDispatch } from '../../Actions/Actions';\r\nimport ThreeDotsMenu from './ThreeDotsMenu';\r\nimport BreadcrumbText from '../Breadcrumb/BreadcrumbText';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  root: {\r\n    width: '100%',\r\n    marginBottom: '4.3em'\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  title: {\r\n    display: 'block', // was none\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing.unit,\r\n      width: 'auto',\r\n      display: 'block'\r\n    },\r\n  },\r\n  searchIcon: {\r\n    width: theme.spacing.unit * 9,\r\n    color: '#efefef',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: '#efefef',\r\n    width: '100%',\r\n  },\r\n  refreshIcon: {\r\n    color: '#efefef'    \r\n  },\r\n  inputInput: {\r\n    paddingTop: theme.spacing.unit,\r\n    paddingRight: theme.spacing.unit,\r\n    paddingBottom: theme.spacing.unit,\r\n    paddingLeft: theme.spacing.unit * 10,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: 100,\r\n      '&:focus': {\r\n        width: 200,\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nfunction SearchAppBar(props: SearchAppBarProps) {\r\n  const { classes, path, filter, moveUpwards, canGoBack, handleChange, handleRefresh } = props;\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\r\n            <BreadcrumbText \r\n                path={path} \r\n                handleClickPath={index => moveUpwards(path.length - index - 1)} \r\n                handleGoBack={() => moveUpwards(1)}\r\n                canGoBack={canGoBack}\r\n                rootTitle=\"SoLiDaM\"\r\n            />\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              value={filter}\r\n              onChange={handleChange}\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n            />\r\n          </div>\r\n          <IconButton color=\"inherit\" className={classes.refreshIcon} aria-label=\"Refresh\" onClick={handleRefresh}>\r\n            <RefreshIcon/>\r\n          </IconButton>\r\n          <ThreeDotsMenu />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface StateProps {\r\n  filter: string;\r\n  path: string[];\r\n  canGoBack: boolean; \r\n}\r\ninterface DispatchProps {\r\n  handleChange(event: ChangeEvent<HTMLInputElement>): void;\r\n  moveUpwards(n: number): void;\r\n  handleRefresh(): void;\r\n}\r\ninterface SearchAppBarProps extends StateProps, DispatchProps, WithStyles<typeof styles> {\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        filter: state.items.filter,\r\n        path: state.path,\r\n        canGoBack: state.path.length > 0,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleChange: (event) => {\r\n            dispatch(filterItems(event.currentTarget.value));\r\n        },\r\n        moveUpwards: (n) => {\r\n          console.log('moveUpwards', n);\r\n          dispatch(moveFolderUpwardsAndRefresh(n));\r\n        },\r\n        handleRefresh: () => dispatch(refreshItemList())\r\n    };\r\n};\r\n\r\n\r\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(SearchAppBar));\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { loadAndDisplayFile, displaySelectedMediaFile, loadAndEditFile, enterFolderByItem, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\r\nimport { FileItem, FolderItem, Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction OpenAction(props: OpenActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <OpenInBrowserIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Open\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface OpenActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            const item = selectedItems[0];\r\n\r\n            if (item instanceof FolderItem)\r\n                dispatch(enterFolderByItem(item));\r\n            else if (item instanceof FileItem) {\r\n                if (item.isEditable())\r\n                    dispatch(loadAndEditFile(item.name));\r\n                else if (item.isImage())\r\n                    dispatch(loadAndDisplayFile(item.name));\r\n                else if (item.isMedia())\r\n                    dispatch(displaySelectedMediaFile());\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { removeItems, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction RemoveAction(props: RemoveActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <DeleteIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Remove\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface RemoveActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(removeItems(selectedItems));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction MoveAction(props: MoveActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick()}>\r\n            <ListItemIcon>\r\n                <HowToVoteIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Move\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface MoveActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.MOVE));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS, Action } from '../../../Actions/actionTypes';\r\n\r\nfunction CopyAction(props: CopyActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={handleClick}>\r\n            <ListItemIcon>\r\n                <FileCopyIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Copy\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface CopyActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.COPY));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CopyAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { loadAndEditFile, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction OpenAction(props: OpenActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <OpenInBrowserIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Edit\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface OpenActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(loadAndEditFile(selectedItems[0].name));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport WrapTextIcon from '@material-ui/icons/WrapText';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction MoveAction(props: MoveActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={handleClick}>\r\n            <ListItemIcon>\r\n                <WrapTextIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Rename\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface MoveActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.RENAME));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ArchiveIcon from '@material-ui/icons/Archive';\r\nimport { zipAndUpload, MyDispatch } from '../../../Actions/Actions';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction ZipAction(props: ZipActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <ArchiveIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Zip here\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface ZipActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(zipAndUpload(selectedItems));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ZipAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport UnarchiveIcon from '@material-ui/icons/Unarchive';\r\nimport { extractZipFile, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nfunction ExtractAction(props: ExtractActionProps) {\r\n    const {handleClick, selectedItems} = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <UnarchiveIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Extract here\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface ExtractActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(extractZipFile(selectedItems[0].name));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExtractAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { downloadItems, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport { FileItem, Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction DownloadAction(props: DownloadActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <CloudDownloadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                {(selectedItems.length === 1 && selectedItems[0] instanceof FileItem) ? \r\n                    'Download'\r\n                    : 'Download Zip'\r\n                }\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface DownloadActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(downloadItems(selectedItems));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DownloadAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { openInNewTab, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction OpenInNewTabAction(props: OpenInNewTabActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <LinkIcon   />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Open in new Tab\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface OpenInNewTabActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(openInNewTab(selectedItems[0]));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenInNewTabAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction UploadMetadataAction(props: UploadMetadataActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={handleClick}>\r\n            <ListItemIcon>\r\n                <CloudUploadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Upload Metadata\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface UploadMetadataActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.UPLOAD_METADATA));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadMetadataAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudUploadIcon from '@material-ui/icons/Settings';\r\nimport { openDialog, MyDispatch, loadAndOpenAccessControl } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nfunction AccessControlAction(props: AccessControlActionProps) {\r\n\r\n    const { handleClick, selectedItems } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <CloudUploadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Access Control\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface AccessControlActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {selectedItems: state.items.selected};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(loadAndOpenAccessControl(selectedItems[0].name));\r\n        }\r\n        // handleClick: () => {\r\n        //     dispatch(openDialog(DIALOGS.ACCESS_CONTROL));\r\n        // }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessControlAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport { openDialog, MyDispatch, loadMetadataFile } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nfunction AddNewVersionAction(props: AddNewVersionActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <CloudUploadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Add new Version\r\n            </Typography>\r\n        </MenuItem>\r\n    );\r\n}\r\n\r\ninterface AddNewVersionActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n    // handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(loadMetadataFile(selectedItems[0].name));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNewVersionAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nimport { openDialog, MyDispatch, loadExposeMetadata } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nfunction ExposeMetadataAction(props: ExposeMetadataActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <HowToVoteIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Expose Metadata\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface ExposeMetadataActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(loadExposeMetadata(selectedItems[0].name));\r\n            // dispatch(openDialog(DIALOGS.EXPOSE_METADATA));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExposeMetadataAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SettingsBackupRestore from '@material-ui/icons/SettingsBackupRestore';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction RevertVersionAction(props: RevertVersionActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick()}>\r\n            <ListItemIcon>\r\n                <SettingsBackupRestore />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Revert Version\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface RevertVersionActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            alert(\"Revert file!\");\r\n            //dispatch(alert(\"Revert file!\"));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RevertVersionAction);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './ContextMenu.css';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport OpenAction from './ContextMenuActions/OpenAction';\r\nimport RemoveAction from './ContextMenuActions/RemoveAction';\r\nimport MoveAction from './ContextMenuActions/MoveAction';\r\nimport CopyAction from './ContextMenuActions/CopyAction';\r\nimport EditAction from './ContextMenuActions/EditAction';\r\nimport RenameAction from './ContextMenuActions/RenameAction';\r\nimport ZipAction from './ContextMenuActions/ZipAction';\r\nimport ExtractAction from './ContextMenuActions/ExtractAction';\r\nimport DownloadAction from './ContextMenuActions/DownloadAction';\r\nimport OpenInNewTabAction from './ContextMenuActions/OpenInNewTabAction';\r\nimport { Item, FileItem, FolderItem } from '../../Api/Item';\r\nimport { AppState } from '../../Reducers/reducer';\r\nimport UploadMetadataAction from './ContextMenuActions/UploadMetadataAction';\r\nimport AccessControlAction from './ContextMenuActions/AccessControlAction';\r\nimport AddNewVersionActions from './ContextMenuActions/AddNewVersionActions';\r\nimport ExposeMetadataAction from './ContextMenuActions/ExposeMetadataAction';\r\nimport RevertVersionAction from './ContextMenuActions/RevertVersionAction';\r\n\r\nclass ContextMenu extends Component<ContextMenuProps> {\r\n\r\n    render() {\r\n        const { acts, open, x, y } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Menu\r\n                    anchorReference=\"anchorPosition\"\r\n                    anchorPosition={{ top: y, left: x }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={open}\r\n                    onClose={() => { }}\r\n                    PaperProps={{ style: { width: 190 } }}>\r\n                    {acts.includes('open') && <OpenAction />}\r\n                    {acts.includes('openInNewTab') && <OpenInNewTabAction />}\r\n                    {acts.includes('uploadMetadata') && <UploadMetadataAction />}\r\n                    {acts.includes('accessControl') && <AccessControlAction/>}\r\n                    {acts.includes('addNewVersion') && <AddNewVersionActions/>}\r\n                    {acts.includes('exposeMetadata') && <ExposeMetadataAction/>}\r\n                    {acts.includes('revertVersion') && <RevertVersionAction/>}\r\n                    {acts.includes('download') && <DownloadAction />}\r\n                    {acts.includes('compress') && <ZipAction />}\r\n                    {acts.includes('extract') && <ExtractAction />}\r\n                    {acts.includes('edit') && <EditAction />}\r\n                    {acts.includes('copy') && <CopyAction />}\r\n                    {acts.includes('move') && <MoveAction />}\r\n                    {acts.includes('rename') && <RenameAction />}\r\n                    {acts.includes('remove') && <RemoveAction />}\r\n                </Menu>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps {\r\n    acts: string[];\r\n    open: boolean;\r\n    x: number;\r\n    y: number;\r\n}\r\ninterface ContextMenuProps extends StateProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        x: state.contextMenu.x,\r\n        y: state.contextMenu.y,\r\n        open: state.contextMenu.open,\r\n        acts: getActionsForMultipleItems(state.items.selected),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\n\r\n/**\r\n * Get available actions for multiple items\r\n */\r\nconst getActionsForMultipleItems = (items: Item[]): string[] => {\r\n    return items.length === 1 ?\r\n        getActionsForItem(items[0])\r\n        : [\r\n            'copy',\r\n            'move',\r\n            'remove',\r\n            'download',\r\n            'compress',\r\n        ];\r\n};\r\n\r\n/**\r\n * Get available actions for an item\r\n */\r\nconst getActionsForItem = (item: Item) => {\r\n    const commonActions = [\r\n        'openInNewTab',\r\n        'copy',\r\n        'move',\r\n        'rename',\r\n        'remove',\r\n        'download',\r\n    ];\r\n    return [\r\n        ...commonActions,\r\n        ...((item instanceof FileItem) ?\r\n            getActionsForFile(item)\r\n            : getActionsForFolder(item))\r\n    ];\r\n};\r\n\r\n/**\r\n * Get available file specific actions\r\n */\r\nconst getActionsForFile = (file: FileItem) => {\r\n    const actions = ['accessControl'];\r\n    (file.isNotUpdateable()) && actions.push('addNewVersion');\r\n    file.isEditable() && actions.push('edit');\r\n    file.isExtractable() && actions.push('extract');\r\n    (file.isImage() || file.isMedia()) && actions.push('open');\r\n    !file.isMetadata() && actions.push('uploadMetadata');\r\n    file.isMetadata() && actions.push('exposeMetadata');\r\n    file.isVersionFile() && actions.push('revertVersion');\r\n\r\n    return actions;\r\n};\r\n\r\n/**\r\n * Get available folder specific actions\r\n */\r\nconst getActionsForFolder = (folder: FolderItem) => {\r\n    return [\r\n        'open',\r\n        'compress'\r\n    ];\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContextMenu);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createBrowserHistory, History, Location } from \"history\";\r\nimport { MyDispatch, setHost, enterFolder } from \"../../Actions/Actions\";\r\nimport { AppState } from \"../../Reducers/reducer\";\r\n\r\nclass HistoryHandler extends Component<HistoryHandlerProps> {\r\n    private history: History<LocationState>;\r\n    private states: LocationState[];\r\n    private stateIndex: number;\r\n\r\n    constructor(props: HistoryHandlerProps) {\r\n        super(props);\r\n\r\n        this.states = [];\r\n        this.stateIndex = -1;\r\n        this.history = createBrowserHistory();\r\n        this.history.listen((location, action) => {\r\n            switch(action) {\r\n                case 'POP':\r\n                    this.handlePop(location);\r\n                    break;\r\n                case 'REPLACE':\r\n                    this.handleReplace(location);\r\n                    break;\r\n                case 'PUSH':\r\n                    this.handlePush(location);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const { host, path } = this.props;\r\n\r\n        // Don't update history when the host is invalid\r\n        if (host === null)\r\n            return;\r\n        if (this.states.length === 0 || this.stateIndex < 0)\r\n            return this.updateBrowserHistory();\r\n        \r\n        const prevState = this.states[this.stateIndex];\r\n\r\n        if (!locationsEqual({ host, path }, prevState))\r\n            this.updateBrowserHistory();\r\n    }\r\n\r\n    updateBrowserHistory() {\r\n        const { host, path } = this.props;\r\n        const url = encodeURI(`${host}/${path.join('/')}`);\r\n        const newState = {\r\n            host: host || '',\r\n            path,\r\n            index: this.stateIndex + 1,\r\n        };\r\n\r\n        this.history.push(`?url=${url}`, newState);\r\n    }\r\n\r\n    handlePop(location: Location<LocationState>) {\r\n        this.stateIndex = location.state.index;\r\n        this.props.handlePop(location);\r\n    }\r\n\r\n    handleReplace(location: Location<LocationState>) {\r\n        this.states[this.stateIndex] = location.state;\r\n    }\r\n\r\n    handlePush(location: Location<LocationState>) {\r\n        this.states = [...this.states.slice(0, ++this.stateIndex), location.state];\r\n    }\r\n\r\n    render() {\r\n        // This Component doesn't provide anything to the DOM\r\n        // The only reason it is a component is to get access to the state and dispatch\r\n        return <></>;\r\n    }\r\n}\r\n\r\ninterface LocationState extends MyLocation {\r\n    index: number;\r\n}\r\ninterface MyLocation {\r\n    host: string;\r\n    path: string[];\r\n}\r\n\r\n\r\ninterface StateProps {\r\n    host: string | null;\r\n    path: string[];\r\n}\r\ninterface DispatchProps {\r\n    handlePop(location: Location<LocationState>): void;\r\n}\r\ninterface HistoryHandlerProps extends StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => ({\r\n    host: state.account.host,\r\n    path: state.path\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handlePop: (location: Location<LocationState>) => {\r\n            let host = '';\r\n            let path: string[] = [];\r\n\r\n            if (location && typeof location.state !== typeof undefined) {\r\n                ({ host, path } = location.state);\r\n            }\r\n            else {\r\n                const params = new URLSearchParams(location.search.substr(1));\r\n                const url = params.get('url');\r\n                if (url !== null) {\r\n                    ({ host, path } = getLocationObjectFromUrl(url));\r\n                }\r\n            }\r\n            dispatch(setHost(host));\r\n            dispatch(enterFolder(path));\r\n        }\r\n    };\r\n};\r\n\r\nexport const getLocationObjectFromUrl = (urlString: string) => {\r\n    const url = new URL(urlString);\r\n    const host = url.origin;\r\n    const path = url.pathname.split('/').filter(val => val !== '');\r\n\r\n    return {\r\n        host,\r\n        path\r\n    };\r\n}\r\n\r\nconst locationsEqual = (first: MyLocation, second: MyLocation) => {\r\n    return first.host === second.host\r\n           && first.path.length === second.path.length\r\n           && first.path.every((val, index) => val === second.path[index]);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HistoryHandler);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { connect } from 'react-redux';\r\nimport { solidLogin, setHost, enterFolder, solidLogout, clearCache, MyDispatch, setErrorMessage, closeDialog } from '../../../Actions/Actions';\r\nimport { getLocationObjectFromUrl } from '../../HistoryHandler/HistoryHandler';\r\nimport { DialogButtonClickEvent, DialogDispatchProps, DialogStateProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<ChooseLocationProps> {\r\n    state = {\r\n        location: '',\r\n    };\r\n\r\n    componentWillReceiveProps(props: ChooseLocationProps) {\r\n        const { isLoggedIn, webId } = props;\r\n        const params = new URLSearchParams(document.location.search.substr(1));\r\n        const encodedUrl = params.get('url');\r\n\r\n        if (encodedUrl !== null) {\r\n            const location = decodeURI(encodedUrl);\r\n            this.setState({ location });\r\n        }\r\n        else if (isLoggedIn && webId) {\r\n            const location = (new URL(webId)).origin;\r\n            this.setState({ location });\r\n        }\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) {\r\n        const targetForm = event.currentTarget.form;\r\n        if (targetForm) {\r\n            const input = targetForm.querySelector('input');\r\n            if (input) {\r\n                const location = input.value;\r\n                this.setState({ location });\r\n                return;\r\n            }\r\n        }\r\n        console.log(\"Couldn't find location input\");\r\n    }\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        this.props.handleSubmit(event, { location: this.state.location });\r\n    }\r\n\r\n    render() {\r\n        let { location } = this.state;\r\n        location = location ? location : '';\r\n        const { handleClose, handleLogin, handleLogout, open, isLoggedIn, webId } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-choose-location\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-choose-location\">Choose the storage location</DialogTitle>\r\n                    <DialogContent>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                            {!isLoggedIn ?\r\n                                \"If you want to access private resources, please login with the button below.\"\r\n                                : \"Logged in as \" + webId + \".\"\r\n                            }\r\n                        </Typography>\r\n                        {!isLoggedIn ?\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={handleLogin}>Login</Button>\r\n                            : <Button variant=\"outlined\" onClick={handleLogout}>Logout</Button>\r\n                        }\r\n\r\n                        <Typography variant=\"body1\">\r\n                            Please enter the directory you want to open below.\r\n                    </Typography>\r\n                        <TextField autoFocus fullWidth\r\n                            margin=\"normal\"\r\n                            label=\"Storage Location\"\r\n                            variant=\"outlined\"\r\n                            onChange={this.handleChange.bind(this)}\r\n                            value={location} />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                            Open directory\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    webId: string | null;\r\n    isLoggedIn: boolean;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleLogin(event: DialogButtonClickEvent): void;\r\n    handleLogout(event: DialogButtonClickEvent): void;\r\n    handleSubmit(event: DialogButtonClickEvent, { location }: { location: string }): void;\r\n}\r\ninterface ChooseLocationProps extends StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CHOOSE_LOCATION,\r\n        webId: state.account.webId,\r\n        isLoggedIn: state.account.loggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CHOOSE_LOCATION));\r\n        },\r\n        handleLogin: event => {\r\n            event.preventDefault();\r\n            dispatch(solidLogin());\r\n        },\r\n        handleLogout: event => {\r\n            event.preventDefault();\r\n            dispatch(solidLogout());\r\n        },\r\n        handleSubmit: (event, { location }) => {\r\n            event.preventDefault();\r\n            if (!location)\r\n                return dispatch(setErrorMessage(\"Please enter the folder which should be opened\"));\r\n\r\n            const { host, path } = getLocationObjectFromUrl(location);\r\n            dispatch(closeDialog(DIALOGS.CHOOSE_LOCATION));\r\n            dispatch(setHost(host));\r\n            dispatch(clearCache());\r\n            dispatch(enterFolder(path));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { closeDialog, MyDispatch, openDialog } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<ContentProps> {\r\n\r\n    state = {\r\n        lastBlobUrl: null,\r\n        content: '...',\r\n        loading: false\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open } = this.props;\r\n        return (\r\n          <div style={{marginLeft:'1em'}}>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-content\" fullWidth={true} maxWidth={'sm'}>\r\n              <DialogTitle id=\"form-dialog-content\">Viewing file </DialogTitle>\r\n              <DialogContent>\r\n                <img src={this.props.blobUrl} alt=\"\" style={{maxWidth: '100%'}}/>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                  Close\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    blobUrl: string | undefined;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {}\r\ninterface ContentProps extends StateProps, DispatchProps {}\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CONTENT,\r\n        blobUrl: state.blob || undefined\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DialogDispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CONTENT));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport Plyr from 'react-plyr';\r\nimport 'plyr/dist/plyr.css';\r\nimport { FileItem } from '../../../Api/Item';\r\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<MediaProps> {\r\n    render() {\r\n        const { file, handleClose, open } = this.props;\r\n\r\n        const fileName = file ? file.name : undefined;\r\n        const url = file ? file.url : undefined;\r\n        const provider = file ? (file.isVideo() ? 'html5' : 'audio') : '';\r\n        const type = file ? (file.isVideo() ? 'video' : 'audio') : undefined;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-display-media\" fullWidth={true} maxWidth={'lg'}>\r\n                <DialogTitle id=\"form-dialog-display-media\">Display Media</DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        file ?\r\n                            (\r\n                                <div>\r\n                                    <p>Playing {file.name}</p>\r\n                                    <Plyr type={type} /*TODO: provider={provider}*/ url={url} iconUrl=\"./vendor/plyr/plyr.svg\" />\r\n                                </div>\r\n                            )\r\n                            : <p>No media file opened</p>\r\n                            \r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    file?: FileItem;\r\n}\r\ninterface MediaProps extends StateProps, DialogDispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    const open = state.visibleDialogs.MEDIA;\r\n\r\n    const file = state.items.selected[0];   \r\n\r\n    if (file instanceof FileItem) {\r\n            return {\r\n                open,\r\n                file,\r\n            };\r\n    }\r\n    return { open };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DialogDispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.MEDIA));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { updateTextFile, MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nclass FormDialog extends Component<EditProps> {\r\n    private textField: React.RefObject<HTMLTextAreaElement> = createRef();\r\n    state = {\r\n        lastBlobUrl: null as string|null,\r\n        content: null as string|null,\r\n        loading: false\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            this.props.blobUrl && fetch(this.props.blobUrl).then(r => {\r\n                return r.text();\r\n            }).then(t => {\r\n                this.setState({\r\n                    content: t\r\n                });\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSave(event: DialogButtonClickEvent) {\r\n        event.preventDefault();\r\n        const textField = this.textField.current;\r\n        const item = this.props.item;\r\n        if (textField && item) {\r\n            const content = textField.value;\r\n            this.props.handleSubmit(event, {\r\n                itemName: item.name,\r\n                content\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open, item } = this.props;\r\n        const itemName = item ? item.getDisplayName() : 'No item selected';\r\n        const textAreaStyle = {\r\n            width: '100%',\r\n            minHeight: '300px'\r\n        };\r\n        const textArea = <textarea style={textAreaStyle} defaultValue={this.state.content || ''} ref={this.textField} />;\r\n\r\n        return (\r\n            <div>\r\n              <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-edit\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                  <DialogTitle id=\"form-dialog-edit\">Editing file: {itemName} </DialogTitle>\r\n                  <DialogContent>\r\n                    <DialogContentText>\r\n                      {this.state.loading ? 'Loading...' : textArea}\r\n                    </DialogContentText>\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                      Close\r\n                    </Button>\r\n                    <Button color=\"primary\" onClick={this.handleSave.bind(this)} type=\"submit\">\r\n                      Update\r\n                    </Button>\r\n                  </DialogActions>\r\n                </form>\r\n              </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    item: Item;\r\n    blobUrl: string;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { itemName, content }: { itemName: string, content: string }): void;\r\n}\r\ninterface EditProps extends StateProps, DispatchProps {}\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.EDIT, // TODO: rename visibleDialogs (e.g. to dialogIsOpen)\r\n        item: state.items.selected[0],\r\n        blobUrl: state.blob || ''\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.EDIT));\r\n        },\r\n        handleSubmit: (event, { itemName, content }) => {\r\n            dispatch(updateTextFile(itemName, content));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { createNewFolder, closeDialog, MyDispatch, setErrorMessage } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<CreateFolderProps> {\r\n    private textField: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const textField = this.textField.current;\r\n        if (textField) {\r\n            const folderName = textField.value;\r\n            this.props.handleSubmit(event, { folderName });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, handleSubmit, open } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-folder\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-create-folder\">Add new folder</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField autoFocus fullWidth margin=\"dense\" label=\"Container name\" type=\"text\" inputRef={this.textField} />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                            Save\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { folderName }: { folderName: string }): void;\r\n}\r\ninterface CreateFolderProps extends DialogStateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState): DialogStateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CREATE_FOLDER\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CREATE_FOLDER));\r\n        },\r\n        handleSubmit: (event, { folderName }) => {\r\n            event.preventDefault();\r\n            dispatch(createNewFolder(folderName));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { createFile, closeDialog, MyDispatch, setErrorMessage } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<CreateFileProps> {\r\n    private textField: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const textField = this.textField.current;\r\n        if (textField) {\r\n            const fileName = textField.value;\r\n            this.props.handleSubmit(event, { fileName });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-file\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-create-file\">Create file</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField autoFocus fullWidth margin=\"dense\" label=\"File name\" type=\"text\" inputRef={this.textField}/>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                            Create\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { fileName }: { fileName: string }): void;\r\n}\r\ninterface CreateFileProps extends DialogStateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState): DialogStateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CREATE_FILE\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CREATE_FILE));\r\n        },\r\n        handleSubmit: (event, { fileName }) => {\r\n            event.preventDefault();\r\n            dispatch(createFile(fileName));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, ChangeEvent, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { renameFile, renameFolder, MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport { FolderItem, Item } from '../../../Api/Item';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nclass FormDialog extends Component<RenameProps> {\r\n    private textField: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const textField = this.textField.current;\r\n        const item = this.props.item;\r\n        if (textField && item) {\r\n            const newName = textField.value;\r\n            this.props.handleSubmit(event, { item, newName });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open, item } = this.props;\r\n        const previousName = item ? item.name : '';\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-folder\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                  <DialogTitle id=\"form-dialog-create-folder\">Rename</DialogTitle>\r\n                  <DialogContent>\r\n                    <TextField autoFocus fullWidth margin=\"dense\" label=\"Item name\" type=\"text\" inputRef={this.textField} defaultValue={previousName} />\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                      Cancel\r\n                    </Button>\r\n                    <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                      Save\r\n                    </Button>\r\n                  </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    item?: Item;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { item, newName }: { item: Item, newName: string }): void;\r\n}\r\ninterface RenameProps extends StateProps, DispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.RENAME,\r\n        item: state.items.selected[0],\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.RENAME));\r\n        },\r\n        handleSubmit: (event, { item, newName }) => {\r\n            event.preventDefault();\r\n            if (item instanceof FolderItem) // TODO: Create renameItem\r\n                dispatch(renameFolder(item.name, newName));\r\n            else\r\n                dispatch(renameFile(item.name, newName));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport '../File.css';\r\nimport { FileItem, Item } from '../../../Api/Item';\r\n\r\n// TODO: Check main differences between normal File.tsx component\r\nfunction FileSublist(props: OwnProps) {\r\n    const { item, isSelected, handleClick, handleDoubleClick } = props;\r\n    const avatarStyle = {\r\n        backgroundColor: isSelected ? blue['A200'] : undefined\r\n    };\r\n    return (\r\n        <div className=\"File\" onClick={handleClick} data-selected={isSelected} onDoubleClick={handleDoubleClick}>\r\n            <ListItem>\r\n                <ListItemAvatar>\r\n                    <Avatar style={avatarStyle}>\r\n                        { (item instanceof FileItem) ? <FileIcon /> : <FolderIcon />}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={item.name} secondary=\"\" />\r\n            </ListItem>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface OwnProps {\r\n    item: Item;\r\n    isSelected: boolean;\r\n    handleClick(): void;\r\n    handleDoubleClick(): void;\r\n}\r\n\r\nexport default FileSublist;\r\n\r\n","import React from 'react';\r\nimport FileSublist from '../../File/FileSublist/FileSublist'; \r\nimport Loader from '../../Loader/Loader'; \r\nimport FileListEmptyMessage from '../FileListEmptyMessage';\r\nimport './FileListSublist.css'; \r\nimport { FolderItem } from '../../../Api/Item';\r\n\r\nfunction FileListSublist(props: OwnProps) {\r\n    const { items, isLoading, handleOpenFolder } = props;\r\n    \r\n    const itemComponents = items.map((item, key) => {\r\n        return <FileSublist\r\n            item={item}\r\n            isSelected={false}\r\n            handleClick={() => handleOpenFolder(item)}\r\n            handleDoubleClick={() => handleOpenFolder(item)}\r\n            key={key} />\r\n    });\r\n\r\n    return <div className=\"FileListSublist\">\r\n        { isLoading ? \r\n            <Loader /> : \r\n            itemComponents.length ? itemComponents : <FileListEmptyMessage />\r\n        }\r\n    </div>\r\n}\r\n\r\ninterface OwnProps {\r\n    items: FolderItem[];\r\n    isLoading: boolean;\r\n    handleOpenFolder(folder: FolderItem): void;\r\n}\r\n\r\nexport default FileListSublist;","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FileListSublist from '../../FileList/FileListSublist/FileListSublist'; \r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\nimport { Item, FolderItem } from '../../../Api/Item';\r\nimport * as ApiHandler from '../../../Api/ApiHandler';\r\n\r\nclass FormDialog extends Component<OwnProps, OwnState> {\r\n    private host: string;\r\n    private path: string[];\r\n\r\n    constructor(props: OwnProps) {\r\n        super(props);\r\n        const { initialPath, initialHost } = props;\r\n        this.host = initialHost;\r\n        this.path = initialPath;\r\n\r\n        this.state = {\r\n            items: [],\r\n            isLoading: true,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps: OwnProps) {\r\n        if (prevProps.initialHost !== this.props.initialHost\r\n            || prevProps.initialPath.join('') !== this.props.initialPath.join('')) {\r\n            this.host = this.props.initialHost;\r\n            this.path = this.props.initialPath;\r\n            this.updateItems();\r\n        }\r\n    }\r\n\r\n    handleGoBack() {\r\n        this.path = this.path.slice(0, -1);\r\n        this.updateItems();\r\n    }\r\n\r\n    handleOpenFolder(folder: FolderItem) {\r\n        this.path = [...folder.path, folder.name];\r\n        this.updateItems();\r\n    }\r\n\r\n    async updateItems() {\r\n        this.setState({ isLoading: true });\r\n        const items = (await ApiHandler.getItemList(this.path.join('/')))\r\n            .filter(item => item instanceof FolderItem);\r\n\r\n        this.setState({ isLoading: false, items });\r\n    }\r\n\r\n    render() {\r\n        const { open, handleClose, handleSubmit, actionName } = this.props;\r\n        const { items, isLoading } = this.state;\r\n        const host = this.host;\r\n        const path = this.path;\r\n        const url = `${host}/${path.join('/')}`;\r\n        const canGoBack = path.length > 0;\r\n        \r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-move\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-move\">\r\n                        {actionName} items to <small style={{color: 'grey'}}>{ url }</small>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <FileListSublist items={items} isLoading={isLoading} handleOpenFolder={this.handleOpenFolder.bind(this)}/>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleGoBack.bind(this)} color=\"primary\" type=\"button\" disabled={!canGoBack}>\r\n                            <KeyboardArrowLeftIcon /> Go back directory\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={(e) => handleSubmit({ host, path })} type=\"submit\">\r\n                            {actionName}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface OwnProps {\r\n    open: boolean;\r\n    actionName: string;\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    handleSubmit({ host, path }: { host: string, path: string[] }): void;\r\n    handleClose(): void;\r\n}\r\n\r\ninterface OwnState {\r\n    items: Item[];\r\n    isLoading: boolean;\r\n}\r\n\r\nexport default FormDialog;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { moveItems, closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { DialogStateProps } from '../dialogTypes';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nimport ChooseLocation from '../ChooseLocation/ChooseLocation';\r\n\r\nfunction MoveDialog(props: MoveProps) {\r\n    const { initialHost, initialPath, selectedItems, open, handleClose, move } = props;\r\n\r\n    return <ChooseLocation\r\n        open={open}\r\n        actionName=\"Move\"\r\n        initialHost={initialHost}\r\n        initialPath={initialPath}\r\n        handleClose={handleClose}\r\n        handleSubmit={(location) => move(selectedItems, location)}\r\n    />\r\n}\r\n\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps {\r\n    handleClose(): void;\r\n    move(selectedItems: Item[], { host, path }: { host: string, path: string[] }): void;\r\n}\r\ninterface MoveProps extends StateProps, DispatchProps {}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.MOVE,\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.MOVE));\r\n        },\r\n        move: (selectedItems, targetLocation) => {\r\n            dispatch(moveItems(selectedItems, targetLocation));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveDialog);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { copyItems, closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { DialogStateProps } from '../dialogTypes';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nimport ChooseLocation from '../ChooseLocation/ChooseLocation';\r\n\r\nfunction CopyDialog(props: CopyProps) {\r\n    const { initialHost, initialPath, selectedItems, open, handleClose, copy } = props;\r\n\r\n    return <ChooseLocation\r\n        open={open}\r\n        actionName=\"Copy\"\r\n        initialHost={initialHost}\r\n        initialPath={initialPath}\r\n        handleClose={handleClose}\r\n        handleSubmit={(location) => copy(selectedItems, location)}\r\n    />\r\n}\r\n\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps {\r\n    handleClose(): void;\r\n    copy(selectedItems: Item[], { host, path }: { host: string, path: string[] }): void;\r\n}\r\ninterface CopyProps extends StateProps, DispatchProps {}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.COPY,\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.COPY));\r\n        },\r\n        copy: (selectedItems, targetLocation) => {\r\n            dispatch(copyItems(selectedItems, targetLocation));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CopyDialog);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport { getHumanFileSize } from '../../Api/Item';\r\n\r\nfunction UploadFileList(props: UploadFileListProps) {\r\n    const { files } = props;\r\n    files[0];\r\n    const list = Array.from(files).map((f, i) =>\r\n        <ListItem dense key={i}>\r\n            <ListItemIcon>\r\n                <FileIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary={`${f.name} (${getHumanFileSize(f.size)})`} />\r\n        </ListItem>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <List component=\"nav\">\r\n                {list}\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface UploadFileListProps {\r\n    files: FileList;\r\n}\r\n\r\nexport default UploadFileList;\r\n","import React, { Component, createRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport UploadFileList from './UploadFileList';\r\n\r\nclass FileUploader extends Component<FileUploadProps> {\r\n    inputRef: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleReset(event: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent): void {\r\n        const inputElement = this.inputRef.current;\r\n        if (inputElement) {\r\n            inputElement.value = '';\r\n            this.props.handleReset(event);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { fileList, handleSelectedFiles } = this.props;\r\n        const styles = {\r\n            inputfile: {\r\n                // TODO: Change this to display none as soon, as the label button works\r\n                // display: 'none'\r\n            }, inputreset: {\r\n                display: (fileList && fileList.length) ? 'inline-flex' : 'none'\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"button-file\">\r\n                    <input style={styles.inputfile} id=\"button-file\" ref={this.inputRef} multiple type=\"file\" onChange={handleSelectedFiles} />\r\n                    {/*<Button component=\"span\" variant=\"contained\" color=\"primary\">\r\n                        Select Files\r\n                    </Button>*/}\r\n                </label>\r\n\r\n                <Button style={styles.inputreset} component=\"span\" type=\"reset\" onClick={this.handleReset.bind(this)}>\r\n                    Clear\r\n                </Button>\r\n\r\n                { fileList && <UploadFileList files={fileList} /> }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface FileUploadProps {\r\n    fileList: FileList|null;\r\n    handleReset(event: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent): void;\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n}\r\n\r\nexport default FileUploader;\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { connect } from 'react-redux';\r\nimport { resetFileUploader, uploadFiles, setFileUploadList, MyDispatch, resetFileUploadList, setErrorMessage, uploadReseachData } from '../../../Actions/Actions';\r\nimport FileUploader from '../../FileUploader/FileUploader';\r\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nclass FormDialog extends Component<UploadFileProps> {\r\n\r\n    render() {\r\n        const { handleClose, handleReset, handleSubmit, open, canUpload, progress, fileList, handleSelectedFiles } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-upload\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-upload\">\r\n                        Upload Research Data\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <FileUploader fileList={fileList} handleSelectedFiles={handleSelectedFiles} handleReset={handleReset}/>\r\n                        {canUpload ? <LinearProgress variant=\"determinate\" value={progress} /> : null }\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={handleSubmit} disabled={!canUpload} type=\"submit\">\r\n                            Upload\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    canUpload: boolean;\r\n    fileList: FileList|null;\r\n    progress: number;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n    handleReset(): void;\r\n}\r\ninterface UploadFileProps extends StateProps, DispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.UPLOAD_FILE,\r\n        canUpload: state.upload.fileList ? state.upload.fileList.length > 0 : false,\r\n        fileList: state.upload.fileList,\r\n        progress: state.upload.progress,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: (event) => {\r\n            dispatch(resetFileUploader());\r\n        },\r\n        handleSubmit: (event) => {\r\n            event.preventDefault();\r\n            dispatch(uploadReseachData());\r\n        },\r\n        handleSelectedFiles: (event) => {\r\n            const files = event.target.files;\r\n            dispatch(setFileUploadList(files));\r\n        },\r\n        handleReset: () => {\r\n            dispatch(resetFileUploadList());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\n\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    '&$checked': {\r\n      color: green[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\r\n\r\nexport default function CheckboxLabels() {\r\n  const [state, setState] = React.useState({\r\n    checkedA: false,\r\n    checkedB: false,\r\n    checkedC: false,\r\n    checkedD: false,\r\n    checkedE: false,\r\n    checkedF: false,\r\n    checkedG: false,\r\n  });\r\n\r\n  const handleChange = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  return (\r\n    <FormGroup row>\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedA}\r\n            onChange={handleChange('checkedA')}\r\n            value=\"checkedA\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Mathematics\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedB}\r\n            onChange={handleChange('checkedB')}\r\n            value=\"checkedB\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Computer Science\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedC}\r\n            onChange={handleChange('checkedC')}\r\n            value=\"checkedC\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Web engineering\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedD}\r\n            onChange={handleChange('checkedD')}\r\n            value=\"checkedD\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Physics\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedE}\r\n            onChange={handleChange('checkedE')}\r\n            value=\"checkedE\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Chemistry\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedG}\r\n            onChange={handleChange('checkedG')}\r\n            value=\"checkedG\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Biology\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedF}\r\n            onChange={handleChange('checkedF')}\r\n            value=\"checkedF\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Machine learning\"\r\n      />\r\n     \r\n    </FormGroup>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { connect } from 'react-redux';\r\nimport { resetFileUploader, uploadMetadata, setFileUploadList, MyDispatch, resetFileUploadList, setErrorMessage, resetMetadataUploader, createMetadataACL } from '../../../Actions/Actions';\r\nimport FileUploader from '../../FileUploader/FileUploader';\r\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { withStyles, Tabs, Tab, Typography, FormControl, InputLabel, Input, FormHelperText } from '@material-ui/core';\r\n\r\nimport SimpleListMenu from './Discipline';\r\n\r\n\r\n\r\nclass FormDialog extends Component<UploadFileProps> {\r\n\r\n    state = {\r\n        activeIndex: 0,\r\n        // inputVal: props.inputValue\r\n    }\r\n    updateInput = (val: any) => this.setState({ inputVal: val })\r\n\r\n\r\n    handleChange = (_: any, activeIndex: any) => this.setState({ activeIndex })\r\n    render() {\r\n        const { handleClose, handleReset, handleSubmit, open, canUpload, progress, fileList, handleSelectedFiles } = this.props;\r\n        let activeIndex = this.state.activeIndex;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-upload\" fullWidth={true} maxWidth={'sm'}>\r\n                <div>\r\n                    <VerticalTabs\r\n                        value={activeIndex}\r\n                        onChange={this.handleChange}\r\n                    >\r\n\r\n                        <MyTab label='Upload metadata file' />\r\n                        <MyTab label='Input metadata annotation' />\r\n                    </VerticalTabs>\r\n                    {activeIndex === 0 && <form>\r\n                        <DialogContent>\r\n                            <FileUploader fileList={fileList} handleSelectedFiles={handleSelectedFiles} handleReset={handleReset} />\r\n                            {canUpload ? <LinearProgress variant=\"determinate\" value={progress} /> : null}\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                                Cancel\r\n                        </Button>\r\n                            <Button color=\"primary\" onClick={handleSubmit} disabled={!canUpload} type=\"submit\">\r\n                                Upload\r\n                        </Button>\r\n                        </DialogActions>\r\n                    </form>}\r\n                    {activeIndex === 1 && <form>\r\n                        <DialogContent>\r\n                        <FormControl fullWidth={true}>\r\n                            <InputLabel htmlFor=\"my-input\">Title</InputLabel>\r\n                            <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n                        </FormControl>\r\n                        <FormControl fullWidth={true}>\r\n                            <InputLabel htmlFor=\"my-input\">Author</InputLabel>\r\n                            <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n                        </FormControl>\r\n                        <FormControl fullWidth={true} >\r\n                            <InputLabel htmlFor=\"my-input\">Description</InputLabel>\r\n                            <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n                        </FormControl>\r\n                        <FormControl fullWidth={true} >\r\n                            <InputLabel htmlFor=\"my-input\">Version</InputLabel>\r\n                            <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n                        </FormControl>\r\n                        <FormControl fullWidth={true}>\r\n                            <InputLabel htmlFor=\"my-input\">Keyword</InputLabel>\r\n                            <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n                        </FormControl>\r\n                        <FormControl fullWidth={true}>\r\n                            <SimpleListMenu/>\r\n                        </FormControl>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                                Cancel\r\n                        </Button>\r\n                            <Button color=\"primary\" onClick={handleSubmit} disabled={!canUpload} type=\"submit\">\r\n                                Submit\r\n                        </Button>\r\n                        </DialogActions>\r\n                    </form>}\r\n                </div>\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nconst VerticalTabs = withStyles(theme => ({\r\n    flexContainer: {\r\n        flexDirection: 'row'\r\n    },\r\n    indicator: {\r\n        display: 'none',\r\n    }\r\n}))(Tabs)\r\n\r\nconst MyTab = withStyles(theme => ({\r\n    selected: {\r\n        color: 'tomato',\r\n        borderBottom: '2px solid tomato'\r\n    }\r\n}))(Tab);\r\n\r\nfunction TabContainer(props: { children: React.ReactNode; }) {\r\n    return (\r\n        <Typography component=\"div\" style={{ padding: 24 }}>\r\n            {props.children}\r\n        </Typography>\r\n    );\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    canUpload: boolean;\r\n    fileList: FileList | null;\r\n    progress: number;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n    handleReset(): void;\r\n}\r\ninterface UploadFileProps extends StateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.UPLOAD_METADATA,\r\n        canUpload: state.upload.fileList ? state.upload.fileList.length > 0 : false,\r\n        fileList: state.upload.fileList,\r\n        progress: state.upload.progress,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: (event) => {\r\n            dispatch(resetMetadataUploader());\r\n        },\r\n        handleSubmit: (event) => {\r\n            event.preventDefault();\r\n            dispatch(uploadMetadata());\r\n        },\r\n        handleSelectedFiles: (event) => {\r\n            const files = event.target.files;\r\n            dispatch(setFileUploadList(files));\r\n        },\r\n        handleReset: () => {\r\n            dispatch(resetFileUploadList());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { setFileUploadList, MyDispatch, resetFileUploadList, resetAccessControl, updateAccessControl } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { Item } from '../../../Api/Item';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddIcon from '@material-ui/icons/AddBox';\r\nimport { FormControlLabel, Checkbox, ListItemIcon, MenuItem, DialogContent, DialogContentText, FormControl, Input } from '@material-ui/core';\r\nimport { AclItem } from '../../../Api/AclItem';\r\nimport { parseACl } from '../../../Api/aclUtils';\r\n\r\nclass FormDialog extends Component<AccessControlProps> {\r\n    private textField: React.RefObject<HTMLTextAreaElement> = createRef();\r\n    state = {\r\n        lastBlobUrl: null as string | null,\r\n        content: null as string | null,\r\n        loading: false,\r\n        isLoading: false,\r\n        accessTo: \"\",\r\n        agent: \"\",\r\n        read: false,\r\n        write: false,\r\n        append: false,\r\n        control: false,\r\n        group: false,\r\n        aclList: [] as AclItem[]\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl && this.state.aclList.length == 0) {\r\n\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            this.props.blobUrl && fetch(this.props.blobUrl).then(r => {\r\n                return r.text();\r\n            }).then(async t => {\r\n                let destFile = this.props.initialHost + '/' + this.props.initialPath.join('/') + '/' + this.props.selectedItems[0].name;\r\n                let aclFile = destFile + '.acl';\r\n\r\n                let aclList = parseACl(t, aclFile)\r\n                this.setState({\r\n                    accessTo: destFile,\r\n                    content: t,\r\n                    aclList: aclList\r\n                });\r\n\r\n                // console.log(this.state.aclList)\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSave(event: DialogButtonClickEvent) {\r\n        event.preventDefault();\r\n        const item = this.props.item;\r\n        this.props.handleSubmit(event, {\r\n            itemName: item.name,\r\n            aclList: this.state.aclList\r\n        });\r\n\r\n    }\r\n\r\n    handleChange = (key: number, mode: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (mode == 'group')\r\n            this.state.aclList[key]._isGroup = event.target.checked;\r\n        if (mode == 'read')\r\n            this.state.aclList[key]._read = event.target.checked;\r\n        if (mode == 'write')\r\n            this.state.aclList[key]._write = event.target.checked;\r\n        if (mode == 'append')\r\n            this.state.aclList[key]._append = event.target.checked;\r\n        if (mode == 'control')\r\n            this.state.aclList[key]._control = event.target.checked;\r\n        this.setState({ ...this.state, [name]: event.target.checked });\r\n    };\r\n\r\n    handleTextChange = (key: number) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.state.aclList[key]._agent = event.target.value;\r\n        this.setState({ ...this.state, [name]: event.target.value });\r\n    };\r\n    handleNewTextChange = () => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.state.agent = event.target.value;\r\n        this.setState({ ...this.state, [name]: event.target.value });\r\n    };\r\n\r\n    handleDelete = (key: number) => (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        this.state.aclList.splice(key, 1);\r\n        this.setState({ ...this.state, [name]: event.button.toString });\r\n    };\r\n\r\n    handleNewChange = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ ...this.state, [name]: event.target.checked });\r\n    };\r\n\r\n    handleAdd = () => (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => {\r\n        if (!this.validURL(this.state.agent)) {\r\n            alert(\"Wrong url format!!!!\");\r\n            this.resetState();\r\n            return;\r\n        }\r\n        this.state.aclList.push(new AclItem(this.state.aclList.length,\r\n            this.state.agent,\r\n            this.state.accessTo,\r\n            this.state.read,\r\n            this.state.write,\r\n            this.state.append,\r\n            this.state.control,\r\n            this.state.group));\r\n        this.resetState()\r\n        // this.setState({ ...this.state, [name]: \"btn add click\" });\r\n    };\r\n\r\n    validURL(str: string) {\r\n        var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\r\n            '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\r\n            '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\r\n            '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\r\n            '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\r\n            '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\r\n        return !!pattern.test(str);\r\n    }\r\n\r\n    resetState = () => {\r\n        this.setState({\r\n            agent: \"\",\r\n            read: false,\r\n            write: false,\r\n            append: false,\r\n            control: false,\r\n            group: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open } = this.props;\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-upload\" fullWidth={true} maxWidth={'lg'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-upload\">\r\n                        Access Control to {this.state.accessTo}\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <Table>\r\n                            <colgroup>\r\n                                <col />\r\n                                <col style={{ width: '50%', padding: '4px 10px' }} />\r\n                                <col style={{ width: '40%' }} />\r\n                                <col />\r\n                            </colgroup>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell padding=\"checkbox\">Group</TableCell>\r\n                                    <TableCell padding=\"none\">Agent</TableCell>\r\n                                    <TableCell padding=\"none\">Mode</TableCell>\r\n                                    <TableCell padding=\"checkbox\">Action</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {this.state.aclList.map(item => <TableRow key={item._key}>\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <FormControlLabel label=\"\" control={\r\n                                            <Checkbox checked={item.isGroup}\r\n                                                onChange={this.handleChange(item._key, \"group\")}\r\n                                                value=\"group\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"none\">\r\n                                        <Input fullWidth={true} value={item.agent} onChange={this.handleTextChange(item._key)} placeholder=\"Input agent webID\" />\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"none\">\r\n                                        <FormControlLabel label=\"Read\" control={\r\n                                            <Checkbox checked={item.read}\r\n                                                onChange={this.handleChange(item._key, \"read\")}\r\n                                                value=\"read\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                        <FormControlLabel label=\"Write\" control={\r\n                                            <Checkbox checked={item.write}\r\n                                                onChange={this.handleChange(item._key, 'write')}\r\n                                                value=\"write\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                        <FormControlLabel label=\"Append\" control={\r\n                                            <Checkbox checked={item.append}\r\n                                                onChange={this.handleChange(item._key, 'append')}\r\n                                                value=\"append\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                        <FormControlLabel label=\"Control\" control={\r\n                                            <Checkbox checked={item.control}\r\n                                                onChange={this.handleChange(item._key, 'control')}\r\n                                                value=\"control\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <MenuItem onClick={this.handleDelete(item._key)}>\r\n                                            <ListItemIcon>\r\n                                                <DeleteIcon />\r\n                                            </ListItemIcon>\r\n                                        </MenuItem>\r\n                                    </TableCell>\r\n                                </TableRow>)}\r\n                                <TableRow key={this.state.aclList.length}>\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <FormControlLabel label=\"\" control={\r\n                                            <Checkbox checked={this.state.group}\r\n                                                onChange={this.handleNewChange(\"group\")}\r\n                                                value=\"group\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"none\">\r\n                                        <Input fullWidth={true} value={this.state.agent} onChange={this.handleNewTextChange()} id=\"newagent\" placeholder=\"Input agent webID\" />\r\n                                    </TableCell>\r\n                                    <TableCell padding='none'>\r\n                                        <FormControlLabel label=\"Read\" control={\r\n                                            <Checkbox checked={this.state.read}\r\n                                                onChange={this.handleNewChange(\"read\")}\r\n                                                value=\"read\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                        <FormControlLabel label=\"Write\" control={\r\n                                            <Checkbox checked={this.state.write}\r\n                                                onChange={this.handleNewChange(\"write\")}\r\n                                                value=\"write\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                        <FormControlLabel label=\"Append\" control={\r\n                                            <Checkbox checked={this.state.append}\r\n                                                onChange={this.handleNewChange(\"append\")}\r\n                                                value=\"append\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                        <FormControlLabel label=\"Control\" control={\r\n                                            <Checkbox checked={this.state.control}\r\n                                                onChange={this.handleNewChange(\"control\")}\r\n                                                value=\"control\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <MenuItem onClick={this.handleAdd()}>\r\n                                            <ListItemIcon>\r\n                                                <AddIcon />\r\n                                            </ListItemIcon>\r\n                                        </MenuItem>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={this.handleSave.bind(this)} type=\"submit\">\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    item: Item;\r\n    blobUrl: string;\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { itemName, aclList }:\r\n        { itemName: string, aclList: AclItem[] }): void;\r\n}\r\ninterface AccessControlProps extends StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.ACCESS_CONTROL, // TODO: rename visibleDialogs (e.g. to dialogIsOpen)\r\n        item: state.items.selected[0],\r\n        blobUrl: state.blob || '',\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: (event) => {\r\n            dispatch(resetAccessControl());\r\n        },\r\n        handleSubmit: (event, { itemName, aclList }) => {\r\n            event.preventDefault();\r\n            dispatch(updateAccessControl(itemName, aclList));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { connect } from 'react-redux';\r\nimport { resetFileUploader, uploadFiles, setFileUploadList, MyDispatch, resetFileUploadList, setErrorMessage, uploadReseachData, resetNewVersionUploader, handleAddNewVersion } from '../../../Actions/Actions';\r\nimport FileUploader from '../../FileUploader/FileUploader';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { withStyles, Tabs, Tab, Typography, FormControl, InputLabel, Input, FormHelperText } from '@material-ui/core';\r\nimport { Item } from '../../../Api/Item';\r\nimport { getVersion } from '../../../Api/aclUtils';\r\nimport { version } from 'punycode';\r\n\r\nclass FormDialog extends Component<AddNewVersionProp> {\r\n    state = {\r\n        lastBlobUrl: null as string | null,\r\n        currentVersion: \"1.0\",\r\n        nextVersion: \"\"\r\n    }\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const item = this.props.item;\r\n        const currentVersion = this.state.currentVersion;\r\n        const nextVersion = this.state.nextVersion;\r\n        if (item) {\r\n            this.props.handleSubmit(event, { item, currentVersion, nextVersion });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            this.props.blobUrl && fetch(this.props.blobUrl).then(r => {\r\n                return r.text();\r\n            }).then(async t => {\r\n                let subj = this.props.initialHost + '/' + this.props.initialPath.join('/') + '/' + this.props.selectedItems[0].name + '.ttl';\r\n                let version = getVersion(t, subj)\r\n                this.setState({\r\n                    currentVersion: version,\r\n                    content: t\r\n                });\r\n\r\n                // console.log(this.state.aclList)\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleTextChange = () => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.state.nextVersion = event.target.value;\r\n        this.setState({ ...this.state, [name]: event.target.value });\r\n    };\r\n\r\n    render() {\r\n        const { handleClose, handleReset, open, canUpload, progress, fileList, handleSelectedFiles } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-upload\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-upload\">\r\n                        Add New Version\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <FormControl fullWidth={true}>\r\n                            <InputLabel htmlFor=\"oldversion\">Current Version</InputLabel>\r\n                            <Input id=\"oldversion\" aria-describedby=\"my-helper-text\" value={this.state.currentVersion} disabled />\r\n                        </FormControl>\r\n                        <FormControl fullWidth={true}>\r\n                            <InputLabel htmlFor=\"newversion\">New version</InputLabel>\r\n                            <Input fullWidth={true} onChange={this.handleTextChange()} id=\"newversion\" placeholder=\"Enter new version\" />\r\n                        </FormControl>\r\n                        <FormControl fullWidth={true}>\r\n                            <FileUploader fileList={fileList} handleSelectedFiles={handleSelectedFiles} handleReset={handleReset} />\r\n                            {canUpload ? <LinearProgress variant=\"determinate\" value={progress} /> : null}\r\n                        </FormControl>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={this.handleSubmit.bind(this)} disabled={!canUpload} type=\"submit\">\r\n                            Upload\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    canUpload: boolean;\r\n    fileList: FileList | null;\r\n    progress: number;\r\n    item?: Item;\r\n    blobUrl: string;\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { item }: { item: Item, currentVersion: string, nextVersion: string }): void;\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n    handleReset(): void;\r\n}\r\ninterface AddNewVersionProp extends StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.ADD_NEW_VERSION,\r\n        item: state.items.selected[0],\r\n        canUpload: state.upload.fileList ? state.upload.fileList.length > 0 : false,\r\n        fileList: state.upload.fileList,\r\n        progress: state.upload.progress,\r\n        blobUrl: state.blob || '',\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n\r\n        handleClose: (event) => {\r\n            dispatch(resetNewVersionUploader());\r\n        },\r\n        handleSubmit: (event, { item, currentVersion, nextVersion }) => {\r\n            event.preventDefault();\r\n            dispatch(handleAddNewVersion(item, currentVersion, nextVersion));\r\n        },\r\n        handleSelectedFiles: (event) => {\r\n            const files = event.target.files;\r\n            dispatch(setFileUploadList(files));\r\n        },\r\n        handleReset: () => {\r\n            // dispatch(resetFileUploadList());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { DialogStateProps, DialogButtonClickEvent, DialogDispatchProps } from '../dialogTypes';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Button, Input, FormControl, InputLabel } from '@material-ui/core';\r\nimport { MyDispatch, closeDialog, handleExposeData } from '../../../Actions/Actions';\r\nimport { getContent } from '../../../Api/aclUtils';\r\n\r\nclass ExposeMetadata extends Component<ExposeMetadataProps> {\r\n    state = {\r\n        lastBlobUrl: null as string | null,\r\n        currentVersion: \"1.0\",\r\n        metadatainfo: { keyword:\"\", discipline: \"\" },\r\n        name: this.props.selectedItems[0] ? this.props.selectedItems[0].name : ''\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            this.props.blobUrl && fetch(this.props.blobUrl).then(r => {\r\n                return r.text();\r\n            }).then(async t => {\r\n                let subj = this.props.initialHost + '/' + this.props.initialPath.join('/') + '/' + this.props.selectedItems[0].name;\r\n                let content = getContent(t, subj)\r\n                this.setState({\r\n                    name :subj,\r\n                    metadatainfo: content,\r\n                    content: t\r\n                });\r\n\r\n                // console.log(this.state.aclList)\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleTextChange = (key: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (key == \"keyword\")\r\n            this.state.metadatainfo.keyword = event.target.value;\r\n        if (key == \"discipline\")\r\n            this.state.metadatainfo.discipline = event.target.value;\r\n        this.setState({ ...this.state, [name]: event.target.value });\r\n    };\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const item = this.props.item;\r\n        const metadatainfo = this.state.metadatainfo;\r\n        if (item) {\r\n            this.props.handleSubmit(event, { item, metadatainfo });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open, initialHost, initialPath } = this.props;\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-upload\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-upload\">\r\n                        Expose Metadata\r\n                </DialogTitle>\r\n                    <DialogContent>\r\n                        {this.state.name}\r\n                        <FormControl fullWidth={true} >\r\n                            <InputLabel htmlFor=\"my-input\">Keyword</InputLabel>\r\n                            <Input value={this.state.metadatainfo.keyword} onChange={this.handleTextChange(\"keyword\")} id=\"keyword\" aria-describedby=\"my-helper-text\" />\r\n                        </FormControl>\r\n                        <FormControl fullWidth={true} >\r\n                            <InputLabel htmlFor=\"my-input\">Discipline</InputLabel>\r\n                            <Input value={this.state.metadatainfo.discipline} disabled onChange={this.handleTextChange(\"discipline\")} id=\"discipline\" aria-describedby=\"my-helper-text\" />\r\n                        </FormControl>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Close\r\n                    </Button>\r\n                        <Button color=\"primary\" onClick={this.handleSubmit.bind(this)} type=\"submit\">\r\n                            Expose\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        )\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    blobUrl: string;\r\n    item?: Item;\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { item }:\r\n        { item: Item, metadatainfo: {keyword:string, discipline:string} }): void;\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n    handleReset(): void;\r\n}\r\ninterface ExposeMetadataProps extends StateProps, DispatchProps { }\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.EXPOSE_METADATA,\r\n        blobUrl: state.blob || '',\r\n        item: state.items.selected[0],\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n\r\n    return {\r\n\r\n        handleClose: (event) => {\r\n            dispatch(closeDialog(DIALOGS.EXPOSE_METADATA));\r\n        },\r\n        handleSubmit: (event, { item, metadatainfo }) => {\r\n            event.preventDefault();\r\n            dispatch(handleExposeData(item, metadatainfo));\r\n        },\r\n        handleSelectedFiles: (event) => {\r\n            const files = event.target.files;\r\n            // dispatch(setFileUploadList(files));\r\n        },\r\n        handleReset: () => {\r\n            // dispatch(resetFileUploadList());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExposeMetadata);","import React from 'react';\r\nimport DialogMenu from './Menu/Menu';\r\nimport DialogContent from './Content/Content';\r\nimport DialogMedia from './Media/Media';\r\nimport DialogEdit from './Edit/Edit';\r\nimport DialogCreateFolder from './CreateFolder/CreateFolder';\r\nimport DialogCreateFile from './CreateFile/CreateFile';\r\nimport DialogRename from './Rename/Rename';\r\nimport DialogMove from './Move/Move';\r\nimport DialogCopy from './Copy/Copy';\r\nimport DialogUploadFile from './UploadFile/UploadFile';\r\nimport DialogUploadMetadata from './UploadMetadata/UploadMetadata';\r\nimport DialogAccessControl from './AccessControl/AccessControl';\r\nimport DialogAddNewVersion from './AddNewVersion/AddNewVersion';\r\nimport DialogExposeMetadata from './ExposeMetadata/ExposeMetadata'\r\n\r\n// TODO: Consider moving the visibility logic here\r\nfunction Dialogs() {\r\n    return (\r\n        <div className=\"Dialogs\">\r\n            <DialogMenu />\r\n            <DialogContent />\r\n            <DialogMedia />\r\n            <DialogEdit />\r\n            <DialogCreateFolder />\r\n            <DialogCreateFile />\r\n            <DialogMove />\r\n            <DialogCopy />\r\n            <DialogRename />\r\n            <DialogUploadFile />\r\n            <DialogUploadMetadata />\r\n            <DialogAddNewVersion />\r\n            <DialogExposeMetadata />\r\n            <DialogAccessControl />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Theme, createStyles, WithStyles } from '@material-ui/core/styles';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { connect, MapDispatchToPropsFactory } from 'react-redux';\r\nimport { MyDispatch, resetErrorMessage } from '../../Actions/Actions';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  close: {\r\n    padding: theme.spacing.unit / 2,\r\n  },\r\n});\r\n\r\nclass DynamicSnackbar extends React.Component<DynamicSnackbarProps> {\r\n  render() {\r\n    const { classes, errorMsg, handleClose, open, notificationDuration } = this.props;\r\n    return (\r\n      <div>\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left',\r\n          }}\r\n          open={open}\r\n          autoHideDuration={notificationDuration}\r\n          onClose={handleClose}\r\n          ContentProps={{\r\n            'aria-describedby': 'message-id',\r\n          }}\r\n          message={<span id=\"message-id\">{errorMsg}</span>}\r\n          action={[\r\n            <IconButton key=\"close\" aria-label=\"Close\" color=\"inherit\" className={classes.close} onClick={handleClose} >\r\n              <CloseIcon />\r\n            </IconButton>,\r\n          ]}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface StateProps {\r\n  open: boolean;\r\n  errorMsg: string;\r\n  notificationDuration: number;\r\n}\r\ninterface DispatchProps {\r\n  handleClose(): void;\r\n}\r\ninterface DynamicSnackbarProps extends StateProps, DispatchProps, WithStyles<typeof styles> {}\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: !!state.errorMessage,\r\n        errorMsg: state.errorMessage,\r\n        notificationDuration: 60000\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n          dispatch(resetErrorMessage());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(DynamicSnackbar));\r\n\r\n","import React, { Component } from 'react';\r\nimport FileList from './Components/FileList/FileList';\r\nimport Navbar from './Components/Navbar/Navbar';\r\nimport ContextMenu from './Components/ContextMenu/ContextMenu';\r\nimport Dialogs from './Components/Dialogs/Dialogs';\r\n\r\nimport { MuiThemeProvider as MaterialUI, createMuiTheme, WithStyles } from '@material-ui/core/styles';\r\nimport green from '@material-ui/core/colors/green';\r\nimport { connect } from 'react-redux';\r\nimport { initApp, MyDispatch, closeContextMenu } from './Actions/Actions';\r\nimport DynamicSnackbar from './Components/Notification/DynamicSnackbar';\r\nimport HistoryHandler from './Components/HistoryHandler/HistoryHandler';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: green,\r\n    },\r\n    typography: {\r\n        useNextVariants: true,\r\n    }\r\n});\r\n\r\nclass App extends Component<AppProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.init();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <MaterialUI theme={theme}>\r\n                    <div onClick={this.props.handleHideContextMenu} onContextMenu={this.props.handleHideContextMenu}>\r\n                        <Navbar />\r\n                        <FileList />\r\n                        <ContextMenu />\r\n                        <DynamicSnackbar />\r\n                        <Dialogs />\r\n                    </div>\r\n                </MaterialUI>\r\n                <HistoryHandler />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface DispatchProps {\r\n    init(): void;\r\n    handleHideContextMenu(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n}\r\n\r\ninterface AppProps extends DispatchProps {}\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        init: () => {\r\n            dispatch(initApp());\r\n        },\r\n\r\n        handleHideContextMenu: (event) => {\r\n            const element = event.target as HTMLElement;\r\n            if (!(element.tagName === 'INPUT' || /label/i.test(element.className))) {\r\n                event.preventDefault();\r\n            }\r\n            dispatch(closeContextMenu());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunk from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport reducer from './Reducers/reducer'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport './index.css';\r\nimport 'typeface-roboto';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider >\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register({\r\n    onUpdate: (config) => {\r\n        console.group('serviceWorker.onUpdate');\r\n        console.log(config);\r\n        console.groupEnd();\r\n    },\r\n    onSuccess: (config) => {\r\n        console.group('serviceWorker.onSuccess');\r\n        console.log(config);\r\n        console.groupEnd();\r\n    }\r\n});"],"sourceRoot":""}