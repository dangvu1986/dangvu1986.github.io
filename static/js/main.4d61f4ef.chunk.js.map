{"version":3,"sources":["../node_modules/n3/lib sync /^/N3.*$","../node_modules/@trust/webcrypto/src/algorithms sync","Actions/actionTypes.ts","config.ts","Reducers/accountReducer.ts","Reducers/dialogsReducer.ts","Reducers/itemsReducer.ts","Reducers/pathReducer.ts","Reducers/uploadReducer.ts","Reducers/reducer.ts","Reducers/currentBlobReducer.ts","Reducers/errorReducer.ts","Reducers/loadingReducer.ts","serviceWorker.ts","Api/Item.ts","Api/folderUtils.ts","Api/AclItem.ts","Api/aclUtils.ts","Api/Api.ts","Api/ApiHandler.ts","Api/ApiCache.ts","Actions/Actions.ts","Components/File/File.tsx","Components/FileList/FileListEmptyMessage.tsx","Components/Loader/Loader.tsx","Components/FileList/FileList.tsx","Components/ContextMenu/ContextMenuActions/CreateFolderAction.tsx","Components/ContextMenu/ContextMenuActions/CreateFileAction.tsx","Components/ContextMenu/ContextMenuActions/UploadFileAction.tsx","Components/Navbar/ThreeDotsMenu.tsx","Components/Breadcrumb/BreadcrumbText.tsx","Components/Navbar/Navbar.tsx","Components/ContextMenu/ContextMenuActions/OpenAction.tsx","Components/ContextMenu/ContextMenuActions/RemoveAction.tsx","Components/ContextMenu/ContextMenuActions/MoveAction.tsx","Components/ContextMenu/ContextMenuActions/CopyAction.tsx","Components/ContextMenu/ContextMenuActions/EditAction.tsx","Components/ContextMenu/ContextMenuActions/RenameAction.tsx","Components/ContextMenu/ContextMenuActions/ZipAction.tsx","Components/ContextMenu/ContextMenuActions/ExtractAction.tsx","Components/ContextMenu/ContextMenuActions/DownloadAction.tsx","Components/ContextMenu/ContextMenuActions/OpenInNewTabAction.tsx","Components/ContextMenu/ContextMenuActions/UploadMetadataAction.tsx","Components/ContextMenu/ContextMenuActions/AccessControlAction.tsx","Components/ContextMenu/ContextMenuActions/AddNewVersionActions.tsx","Components/ContextMenu/ContextMenuActions/ExposeMetadataAction.tsx","Components/ContextMenu/ContextMenuActions/RevertVersionAction.tsx","Components/ContextMenu/ContextMenu.tsx","Components/HistoryHandler/HistoryHandler.tsx","Components/Dialogs/Menu/Menu.tsx","Components/Dialogs/Content/Content.tsx","Components/Dialogs/Media/Media.tsx","Components/Dialogs/Edit/Edit.tsx","Components/Dialogs/CreateFolder/CreateFolder.tsx","Components/Dialogs/CreateFile/CreateFile.tsx","Components/Dialogs/Rename/Rename.tsx","Components/File/FileSublist/FileSublist.tsx","Components/FileList/FileListSublist/FileListSublist.tsx","Components/Dialogs/ChooseLocation/ChooseLocation.tsx","Components/Dialogs/Move/Move.tsx","Components/Dialogs/Copy/Copy.tsx","Components/FileUploader/UploadFileList.tsx","Components/FileUploader/FileUploader.tsx","Components/Dialogs/UploadFile/UploadFile.tsx","Components/Dialogs/UploadMetadata/Discipline.tsx","Components/Dialogs/UploadMetadata/UploadMetadata.tsx","Components/Dialogs/AccessControl/AccessControl.tsx","Components/Dialogs/AddNewVersion/AddNewVersion.tsx","Components/Dialogs/ExposeMetadata/ExposeMetadata.tsx","Components/Dialogs/Dialogs.tsx","Components/Notification/DynamicSnackbar.tsx","App.tsx","index.tsx"],"names":["map","./N3Lexer","./N3Lexer.js","./N3Parser","./N3Parser.js","./N3Store","./N3Store.js","./N3StreamParser","./N3StreamParser.js","./N3StreamWriter","./N3StreamWriter.js","./N3Util","./N3Util.js","./N3Writer","./N3Writer.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","DIALOGS","host","config","getHost","setHost","newHost","endsWith","slice","initialState","loggedIn","webId","initialVisibleDialogs","values","name","defineProperty","reduce","prev","cur","objectSpread","initialContextMenuState","open","x","y","initialItemsState","inCurFolder","filter","selected","removeItem","items","item","selectedItem","equals","addItem","concat","toConsumableArray","initialPath","initialUploadState","fileList","progress","rootReducer","combineReducers","account","state","arguments","length","undefined","action","type","value","blob","URL","createObjectURL","revokeObjectURL","contextMenu","visibleDialogs","errorMessage","includes","loading","path","upload","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","Item","url","size","classCallCheck","this","_name","_path","_url","_size","getPathFromUrl","pop","createClass","key","every","val","index","decodeURI","getHumanFileSize","get","FileItem","_Item","possibleConstructorReturn","getPrototypeOf","apply","inherits","patterns","image","test","media","editable","extractable","metadata","notUpdatable","version","video","FolderItem","_Item2","byteString","bytes","parseInt","Math","pow","toFixed","urlString","pathname","split","getFolderItems","graph","subj","files","folders","each","rdflib","forEach","subjectName","subjectNode","nsSize","any","getSizeByGraph","baseUrl","folderNode","isAnInstanceOfClass","types","some","_ref","isFolder","push","text2graph","_x","_x2","_text2graph","_callee","text","contentType","_args","regenerator_default","a","wrap","_context","next","guessFileType","abrupt","Promise","reject","stop","ext","replace","AclItem","agent","accessTo","read","write","append","control","isGroup","_key","_agent","_accessTo","_read","_write","_append","_control","_isGroup","aclNamespace","pavOntology","dublinCoreOntology","schemaOntology","parseACl","acls","i","subject","checkIsGroup","getAgentName","getAccessToByGraph","getMode","integrateInfo","content","dataURL","ttlURL","updater","newStatement","wholeTtlNode","metadataNode","update","uri","ok","message","saveNewVersion","fileName","folderPath","newVersion","oldVersion","oldStatement","oldFileUrl","newNodePrevVer","exposeMetadata","remoteRegistryUrl","newContent","updatedSubj","remotedGraph","keyword","discipline","getVersion","versionNum","getContent","root","buildACLContent","aclList","arrAuth","arrMode","join","agentType","modeName","mode","agentClass","fileClient","require","createACL","_x3","_createACL","filePath","createFile","fileCreated","err","fetchFile","_x4","_x5","_fetchFile","_callee2","_context2","buildFileUrl","solidAuth","assertSuccessfulResponse","fetchRemoteFile","_x6","_fetchRemoteFile","_callee3","_context3","fetchFolder","_x7","_x8","_fetchFolder","_callee4","folderName","_context4","buildFolderUrl","headers","Accept","readFolder","_x9","_x10","_readFolder","_callee5","response","folderRDF","folderItems","_context5","sent","folderUtils","_callee7","_context7","aclUtils","_callee8","metadataFileName","_context8","_callee9","remoteRegistryURL","registryRDF","_context9","_callee10","destination","itemNames","_context10","copyItems","removeItems","_callee11","oldName","newName","_context11","copyFile","_callee12","oldFolderName","newFolderName","_context12","copyFolder","removeFolderRecursively","_x32","_x33","_x34","_copyItems","_callee13","promises","_context13","_ref2","_ref3","_ref4","_ref5","all","Response","_x35","_x36","_x37","_x38","_copyFile","_callee14","originPath","originName","destinationPath","destinationName","fileResponse","_context14","_x39","_x40","_x41","_x42","_copyFolder","_callee15","_ref6","_context15","createFolder","_ref7","_ref8","_callee16","_context16","Array","from","file","updateFile","_x45","_x46","_createFolder","_callee17","_context17","folderExists","createItem","Blob","_x47","_x48","_x49","_updateFile","_callee18","_context18","_callee19","aclItem","_context19","_x53","_x54","_x55","_createFile","_callee20","_context20","_callee21","itemName","link","request","_context21","method","slug","Content-Type","body","_x60","_x61","_removeItems","_callee22","_context22","_x62","_x63","_removeItem","_callee23","_context23","status","_x64","_x65","_removeFolderRecursively","_callee24","_context24","removeFolderContents","_x66","_x67","_removeFolderContents","_callee25","_ref9","_context25","_ref10","_ref11","_x68","_x69","_folderExists","_callee26","_context26","t0","cache","_data","itemList","hasOwnProperty","_this","_len","paths","contains","handleFetchError","asyncToGenerator","mark","detailedErrorMessage","displayErrorMessage","displayMessages","group","401","403","404","500","stack","JSON","stringify","groupEnd","fixPath","getItemList","API","add","getBasedURL","p","getFileBlob","filename","renameFile","newFileName","remove","_x26","_x27","_x28","_renameFile","renameFolder","_x29","_x30","_x31","_renameFolder","trim","moveItems","filenames","_x23","_x24","_x25","_moveItems","uploadFiles","_x43","_x44","_upload","dataFileName","_x17","_x18","_x19","_integrateInfo","updateACL","_x50","_x51","_x52","_updateACLFile","getAsZip","zip","JSZip","addItemsToZip","zipFolder","folder","binary","extractZipArchive","_args3","loadAsync","uploadExtractedZipArchive","curFolder","_args5","getItemsInZipFolder","relativePath","getItemNameFromPath","getParentPathFromPath","dir","async","substr","lastIndexOf","solidLogin","dispatch","getState","displayLoading","solidPopupLogin","session","updateLoginStatus","r","setErrorMessage","String","finally","stopLoading","setWebId","setLoggedIn","setLoggedOut","resetWebId","popupUri","clearCache","clear","handleExposeData","_getState2","resetSelectedItems","_x20","_x21","_x22","_exposeMetadata","closeDialog","EXPOSE_METADATA","displayCurrentItemList","handleAddNewVersion","preVersion","currentVersion","_getState3","setFileUploadProgress","resetNewVersionUploader","_x13","_x14","_x15","_x16","_updateVersion","updateVersion","APIHandler","setTimeout","f","getFilePathUrl","getProfileUrl","createResearchDataACL","filepath","profilePath","find","getDisplayName","createMetadataACL","setItems","refreshItemList","promptDownload","msSaveOrOpenBlob","document","createElement","href","download","appendChild","click","removeChild","getFileContent","resetFileContent","setFileContent","loadAndEditFile","openDialog","EDIT","loadAndDisplayFile","CONTENT","displaySelectedMediaFile","MEDIA","targetPath","COPY","setSelectedItemsFromLastTo","lastFile","_getState25$items","selectedItems","lastPreviouslySelected","lastPreviouslySelectedIndex","indexOf","lastSelectedIndex","isInRange","num","start","end","toAdd","selectItems","resetFileUploader","UPLOAD_FILE","resetFileUploadList","ADD_NEW_VERSION","resetMetadataUploader","UPLOAD_METADATA","enterFolder","setPath","resetFilter","enterFolderByItem","makeActionCreator","moveFolderUpwards","resetPath","resetItems","selectItem","toggleSelectedItem","filterItems","setFileUploadList","openContextMenu","closeContextMenu","File","_this$props","props","isSelected","handleClick","handleDoubleClick","handleContextMenu","avatarStyle","backgroundColor","blue","realSize","getDisplaySize","react_default","className","onClick","onDoubleClick","onContextMenu","data-selected","ListItem_default","ListItemAvatar_default","Avatar_default","style","InsertDriveFile_default","Folder_default","ListItemText_default","primary","secondary","Component","connect","ownProps","isEditable","isImage","isMedia","event","preventDefault","stopPropagation","nativeEvent","MouseEvent","clientX","clientY","TouchEvent","touches","pageX","pageY","warn","shiftKey","ctrlKey","FileListEmptyMessage","withStyles","theme","createStyles","margin","spacing","unit","Grid_default","container","justify","CircularProgress_default","classes","color","FileList","isLoading","itemComponents","Components_File_File","Loader_Loader","FileListEmptyMessage_FileListEmptyMessage","filterMatch","first","second","toLocaleLowerCase","CREATE_FOLDER","callback","handleClose","MenuItem_default","ListItemIcon_default","CreateNewFolder_default","Typography_default","variant","CREATE_FILE","CloudUpload_default","ThreeDotsMenu","anchorEl","setState","currentTarget","marginLeft","IconButton_default","aria-label","aria-owns","aria-haspopup","MoreVert_default","Menu_default","onClose","ContextMenuActions_CreateFolderAction","ContextMenuActions_CreateFileAction","ContextMenuActions_UploadFileAction","React","BreadcrumbText","handleClickPath","rootTitle","handleGoBack","canGoBack","separator","rootPath","data-index","lastPath","directories","Button_default","display","KeyboardArrowLeft_default","breakpoints","up","width","marginBottom","grow","flexGrow","menuButton","marginRight","title","search","position","borderRadius","shape","fade","palette","common","white","&:hover","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","refreshIcon","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","handleChange","moveUpwards","n","moveFolderUpwardsAndRefresh","handleRefresh","AppBar_default","Toolbar_default","noWrap","Components_Breadcrumb_BreadcrumbText","Search_default","InputBase_default","placeholder","onChange","input","Refresh_default","Navbar_ThreeDotsMenu","OpenInBrowser_default","Delete_default","MOVE","HowToVote_default","FileCopy_default","RENAME","WrapText_default","archiveName","generateAsync","Archive_default","Unarchive_default","_getState16","downloadName","CloudDownload_default","Link_default","ACCESS_CONTROL","Settings_default","alert","SettingsBackupRestore_default","ContextMenu","acts","anchorReference","anchorPosition","top","left","transformOrigin","vertical","horizontal","PaperProps","ContextMenuActions_OpenAction","ContextMenuActions_OpenInNewTabAction","ContextMenuActions_UploadMetadataAction","ContextMenuActions_AccessControlAction","AddNewVersionActions","ContextMenuActions_ExposeMetadataAction","ContextMenuActions_RevertVersionAction","ContextMenuActions_DownloadAction","ContextMenuActions_ZipAction","ContextMenuActions_ExtractAction","EditAction","ContextMenuActions_CopyAction","ContextMenuActions_MoveAction","RenameAction","ContextMenuActions_RemoveAction","getActionsForMultipleItems","getActionsForItem","getActionsForFile","getActionsForFolder","actions","isNotUpdateable","isExtractable","isMetadata","isVersionFile","HistoryHandler","call","history","states","stateIndex","createBrowserHistory","listen","handlePop","handleReplace","handlePush","updateBrowserHistory","prevState","locationsEqual","_this$props2","encodeURI","newState","Fragment","getLocationObjectFromUrl","origin","_location$state","URLSearchParams","_getLocationObjectFro","FormDialog","isLoggedIn","encodedUrl","targetForm","form","querySelector","handleSubmit","handleLogin","handleLogout","Dialog_default","aria-labelledby","fullWidth","maxWidth","DialogTitle_default","DialogContent_default","gutterBottom","TextField_default","autoFocus","label","bind","DialogActions_default","CHOOSE_LOCATION","lastBlobUrl","blobUrl","src","alt","isVideo","react_plyr_lib_default","iconUrl","textField","createRef","_this2","fetch","t","current","textArea","minHeight","defaultValue","ref","DialogContentText_default","handleSave","updateTextFile","inputRef","createNewFolder","previousName","FileSublist","FileListSublist","handleOpenFolder","FileSublist_FileSublist","initialHost","prevProps","updateItems","ApiHandler","actionName","_this$state","FileList_FileListSublist_FileListSublist","disabled","move","targetLocation","ChooseLocation","copy","UploadFileList","list","dense","List_default","component","FileUploader","inputElement","handleReset","handleSelectedFiles","styles","inputfile","inputreset","htmlFor","multiple","FileUploader_UploadFileList","canUpload","Components_FileUploader_FileUploader","LinearProgress_default","_getState4","target","green","&$checked","checked","Checkbox_default","assign","CheckboxLabels","_React$useState","useState","checkedA","checkedB","checkedC","checkedD","checkedE","checkedF","checkedG","_React$useState2","slicedToArray","FormGroup_default","row","FormControlLabel_default","activeIndex","updateInput","inputVal","_","VerticalTabs","MyTab","index_es","aria-describedby","flexContainer","flexDirection","indicator","Tabs","borderBottom","Tab","_getState6","uploadMetadata","handleTextChange","handleNewTextChange","handleDelete","splice","button","toString","handleNewChange","handleAdd","validURL","resetState","destFile","str","RegExp","_this3","Table_default","padding","TableHead_default","TableRow_default","TableCell_default","TableBody_default","AddBox_default","nextVersion","ExposeMetadata","metadatainfo","Dialogs","Menu_Menu","Content","Media","Edit","CreateFolder","CreateFile","Move","Copy","Rename","UploadFile","UploadMetadata","AddNewVersion","Dialogs_ExposeMetadata_ExposeMetadata","AccessControl","DynamicSnackbar","errorMsg","notificationDuration","Snackbar_default","anchorOrigin","autoHideDuration","ContentProps","close","Close_default","createMuiTheme","typography","useNextVariants","App","init","core_styles","handleHideContextMenu","Navbar","Components_FileList_FileList","Components_ContextMenu_ContextMenu","Notification_DynamicSnackbar","Dialogs_Dialogs","Components_HistoryHandler_HistoryHandler","element","tagName","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","react_redux_es","src_App","getElementById","process","addEventListener","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6JAAA,IAAAA,EAAA,CACAC,YAAA,IACAC,eAAA,IACAC,aAAA,IACAC,gBAAA,IACAC,YAAA,IACAC,eAAA,IACAC,mBAAA,IACAC,sBAAA,IACAC,mBAAA,IACAC,sBAAA,IACAC,WAAA,IACAC,cAAA,IACAC,aAAA,IACAC,gBAAA,KAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAC,EAAAjB,EAAAgB,GACA,KAAAC,EAAA,IACA,IAAAG,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAEA,MADAI,EAAAE,KAAA,mBACAF,EAEA,OAAAH,EAEAF,EAAAQ,KAAA,WACA,OAAAC,OAAAD,KAAAvB,IAEAe,EAAAU,QAAAP,EACAQ,EAAAC,QAAAZ,EACAA,EAAAE,GAAA,uGCpCA,SAAAW,EAAAZ,GACA,IAAAI,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAEA,MADAI,EAAAE,KAAA,mBACAF,EAEAQ,EAAAL,KAAA,WAAuC,UACvCK,EAAAH,QAAAG,EACAF,EAAAC,QAAAC,EACAA,EAAAX,GAAA,qLCoCYY,oeC5CZ,IAAIC,EAAsB,KAEXC,EAAA,CACXC,QADW,WAEP,OAAOF,GAEXG,QAJW,SAIHC,GAEJ,IADAJ,EAAOI,EACAJ,EAAKK,SAAS,MACjBL,EAAOA,EAAKM,MAAM,GAAI,KCA5BC,EAA6B,CAC/BC,UAAU,EACVR,KAAM,KACNS,MAAO,cCTLC,EAAkDhB,OAAOiB,OAAOZ,GACjE7B,IAAI,SAAC0C,GAAD,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAA,GAAuBkB,GAAO,KAClCE,OAAO,SAACC,EAAMC,GAAP,OAAAtB,OAAAuB,EAAA,EAAAvB,CAAA,GAAqBqB,EAASC,KAapCE,EAA0B,CAC5BC,MAAM,EACNC,EAAG,EACHC,EAAG,WCZDC,EAAgC,CAClCC,YAAa,GACbC,OAAQ,GACRC,SAAU,IA2BRC,EAAa,SAACC,EAAeC,GAC/B,OAAOD,EAAMH,OAAO,SAAAK,GAAY,OAAKA,EAAaC,OAAOF,MAGvDG,EAAU,SAACJ,EAAeC,GAC5B,SAAAI,OAAAtC,OAAAuC,EAAA,EAAAvC,CAAWiC,GAAX,CAAkBC,KCzChBM,EAAwB,GCDxBC,EAAqB,CACvBC,SAAU,KACVC,SAAU,GCkBCC,EAZKC,YAAgB,CAChCC,QLImB,WAA0E,IAAzEC,EAAyEC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjEnC,EAAcsC,EAAmDH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7F,OAAOC,EAAOC,MACV,IFLqB,gBEMjB,OAAOpD,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBjC,UAAU,IACjC,IFNsB,iBEOlB,OAAOd,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBjC,UAAU,IACjC,IFNgB,WEQZ,OADAP,EAAOE,QAAQ0C,EAAOE,OACfrD,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBzC,KAAM6C,EAAOE,QACpC,IFVkB,aEWd,OAAOrD,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBzC,KAAM,OAC7B,IFTkB,aEUd,OAAON,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBhC,MAAOoC,EAAOE,QACrC,IFZoB,eEahB,OAAOrD,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBhC,MAAO,OAC9B,QACI,OAAOgC,IKnBfO,KCVgB,WAAmE,IAAlEP,EAAkEC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA7C,KAAMG,EAAuCH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnF,OAAOC,EAAOC,MACV,IR6BuB,kBQ5BnB,OAAOG,IAAIC,gBAAgBL,EAAOE,OACtC,IR0ByB,oBQvBrB,OAFc,OAAVN,GACAQ,IAAIE,gBAAgBV,GACjB,KACX,QACI,OAAOA,IDEfW,YJWuB,WAA0F,IAAzFX,EAAyFC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjFxB,EAAyB2B,EAAwDH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjH,OAAQC,EAAOC,MACX,IHYyB,oBGXrB,OAAOpD,OAAAuB,EAAA,EAAAvB,CAAA,GACA+C,EADP,CAEItB,MAAM,EACNC,EAAGyB,EAAOE,MAAM3B,EAChBC,EAAGwB,EAAOE,MAAM1B,IAExB,IHM0B,qBGLtB,OAAO3B,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBtB,MAAM,IAC7B,QACI,OAAOsB,IItBfY,eJP0B,WAA0F,IAAzFZ,EAAyFC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjFhC,EAAuBmC,EAA0DH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpH,OAAQC,EAAOC,MACX,IHgCmB,cG/Bf,OAAOpD,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ/C,OAAAmB,EAAA,EAAAnB,CAAA,GAAoBmD,EAAOE,OAAQ,IACvC,IH+BoB,eG9BhB,OAAOrD,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ/C,OAAAmB,EAAA,EAAAnB,CAAA,GAAoBmD,EAAOE,OAAQ,IACvC,QACI,OAAON,IICfa,aEbwB,WAAsD,IAArDb,EAAqDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA7C,GAAIG,EAAyCH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9E,OAAOC,EAAOC,MACV,ITGyB,oBSFrB,OAAOD,EAAOE,MAClB,QACI,OAAON,IFSfd,MHDiB,WAAgE,IAA/Dc,EAA+DC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvDpB,EAAmBuB,EAAoCH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjF,OAAOC,EAAOC,MACV,IJEiB,YIDb,OAAOpD,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBlB,YAAasB,EAAOE,QAC3C,IJGoB,eIFhB,OAAOrD,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBhB,SAAUoB,EAAOE,QACxC,IJGqB,gBIFjB,OAAOrD,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBhB,SAAUC,EAAWe,EAAMhB,SAAUoB,EAAOE,SACnE,IJA4B,uBICxB,OAAOrD,OAAAuB,EAAA,EAAAvB,CAAA,GACA+C,EADP,CAEIhB,SAAUgB,EAAMhB,SAAS8B,SAASV,EAAOE,OACrCrB,EAAWe,EAAMhB,SAAUoB,EAAOE,OAChChB,EAAQU,EAAMhB,SAAUoB,EAAOE,SAE7C,IJJoB,eIKhB,OAAOrD,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBjB,OAAQqB,EAAOE,QACtC,IJLoB,gBIMhB,OAAOrD,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBjB,OAAQ,KAC/B,QACI,OAAOiB,IGlBfe,QGbmB,WAAgE,IAA/Df,EAA+DC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACnF,QADmFA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GACrEE,MACV,IVuBuB,kBUtBnB,OAAO,EACX,IVsBoB,eUrBhB,OAAO,EACX,QACI,OAAOL,IHOfgB,KFbgB,WAAkE,IAAjEhB,EAAiEC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzDR,EAAaW,EAA4CH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClF,OAAOC,EAAOC,MACV,ILCoB,eKAhB,SAAAd,OAAAtC,OAAAuC,EAAA,EAAAvC,CAAW+C,GAAX,CAAkBI,EAAOE,QAC7B,ILA2B,sBKCvB,OAAOF,EAAOE,MAAQ,EAClBN,EAAMnC,MAAM,GAAIuC,EAAOE,OACrBN,EACV,ILHgB,WKIZ,OAAO/C,OAAAuC,EAAA,EAAAvC,CAAImD,EAAOE,OACtB,QACI,OAAON,IEGfiB,ODZkB,WAA4F,IAA3FjB,EAA2FC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAnFP,EAAoBU,EAA+DH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9G,OAAOC,EAAOC,MACV,IN2B4B,uBM1BxB,OAAOpD,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBL,SAAUS,EAAOE,QACxC,INwBgC,2BMvB5B,OAAOrD,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAZ,CAAmBJ,SAAUQ,EAAOE,QACxC,QACI,OAAON,MKFbkB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAejE,GACtCkE,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhC,QACf0B,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKE7E,GAAUA,EAAO8E,UACnB9E,EAAO8E,SAASR,KAMlBM,QAAQC,IAAI,sCAGR7E,GAAUA,EAAO+E,WACnB/E,EAAO+E,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,gFC7FpDC,EAAb,WAMI,SAAAA,EAAYC,EAAaC,GAAgB3F,OAAA4F,EAAA,EAAA5F,CAAA6F,KAAAJ,GAAAI,KALzCC,WAKwC,EAAAD,KAJxCE,WAIwC,EAAAF,KAHxCG,UAGwC,EAAAH,KAFxCI,WAEwC,EACpC,IAAMlC,EAAOmC,EAAeR,GAE5BG,KAAKC,MAAQ/B,EAAKoC,OAAS,GAC3BN,KAAKE,MAAQhC,EACb8B,KAAKG,KAAON,EACZG,KAAKI,MAAQN,EAZrB,OAAA3F,OAAAoG,EAAA,EAAApG,CAAAyF,EAAA,EAAAY,IAAA,SAAAhD,MAAA,SAqBWnB,GACH,OAAO2D,KAAK3E,OAASgB,EAAKhB,MACnB2E,KAAK9B,KAAKd,SAAWf,EAAK6B,KAAKd,QAC/B4C,KAAK9B,KAAKuC,MAAM,SAACC,EAAKC,GAAN,OAAgBD,IAAQrE,EAAK6B,KAAKyC,OAxBjE,CAAAH,IAAA,iBAAAhD,MAAA,WA4BQ,OAAOoD,UAAUZ,KAAK3E,QA5B9B,CAAAmF,IAAA,iBAAAhD,MAAA,WAgCQ,OAAOwC,KAAKI,MAAQS,EAAiBb,KAAKI,OAAS,iBAhC3D,CAAAI,IAAA,OAAAM,IAAA,WAgBiB,OAAOd,KAAKC,QAhB7B,CAAAO,IAAA,OAAAM,IAAA,WAiBiB,OAAOd,KAAKE,QAjB7B,CAAAM,IAAA,MAAAM,IAAA,WAkBgB,OAAOd,KAAKG,OAlB5B,CAAAK,IAAA,OAAAM,IAAA,WAmBiB,OAAOd,KAAKI,UAnB7BR,EAAA,GAoCamB,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA5G,OAAA4F,EAAA,EAAA5F,CAAA6F,KAAAe,GAAA5G,OAAA8G,EAAA,EAAA9G,CAAA6F,KAAA7F,OAAA+G,EAAA,EAAA/G,CAAA4G,GAAAI,MAAAnB,KAAA7C,YAAA,OAAAhD,OAAAiH,EAAA,EAAAjH,CAAA4G,EAAAC,GAAA7G,OAAAoG,EAAA,EAAApG,CAAA4G,EAAA,EAAAP,IAAA,UAAAhD,MAAA,WAEQ,OAAO6D,EAASC,MAAMC,KAAKvB,KAAK3E,QAFxC,CAAAmF,IAAA,UAAAhD,MAAA,WAMQ,OAAO6D,EAASG,MAAMD,KAAKvB,KAAK3E,QANxC,CAAAmF,IAAA,aAAAhD,MAAA,WAUQ,OAAO6D,EAASI,SAASF,KAAKvB,KAAK3E,QAV3C,CAAAmF,IAAA,gBAAAhD,MAAA,WAcQ,OAAO6D,EAASK,YAAYH,KAAKvB,KAAK3E,QAd9C,CAAAmF,IAAA,aAAAhD,MAAA,WAkBQ,OAAO6D,EAASM,SAASJ,KAAKvB,KAAK3E,QAlB3C,CAAAmF,IAAA,kBAAAhD,MAAA,WAsBQ,OAAQ6D,EAASO,aAAaL,KAAKvB,KAAK3E,QAtBhD,CAAAmF,IAAA,gBAAAhD,MAAA,WA0BQ,OAAO6D,EAASQ,QAAQN,KAAKvB,KAAK3E,QA1B1C,CAAAmF,IAAA,UAAAhD,MAAA,WA8BQ,OAAO6D,EAASS,MAAMP,KAAKvB,KAAK3E,UA9BxC0F,EAAA,CAA8BnB,GAkCjBmC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA5H,OAAA4F,EAAA,EAAA5F,CAAA6F,KAAA+B,GAAA5H,OAAA8G,EAAA,EAAA9G,CAAA6F,KAAA7F,OAAA+G,EAAA,EAAA/G,CAAA4H,GAAAZ,MAAAnB,KAAA7C,YAAA,OAAAhD,OAAAiH,EAAA,EAAAjH,CAAA4H,EAAAC,GAAAD,EAAA,CAAgCnC,GAI1ByB,EAAW,CACbI,SAAU,uTACVH,MAAO,oCACPE,MAAO,6BACPM,MAAO,qBACPJ,YAAa,YACbC,SAAU,eACVE,QAAS,YACTD,aAAc,oBAMLf,EAAmB,SAACoB,GAC7B,IAAMC,EAA8B,kBAAfD,EACjBE,SAASF,GACPA,EACAlI,EAAKqI,KAAK7C,IAAI2C,GAASE,KAAK7C,IAAI,KAAQ,EAC9C,QAAS2C,EAAQE,KAAKC,IAAI,IAAKtI,IAAIuI,QAAQ,GAAK,KAAO,WAAWvI,EAAI,IAAM,IAAM,KAOhFsG,EAAiB,SAACkC,GAEpB,OADY,IAAI7E,IAAI6E,GACTC,SAASC,MAAM,KAAKxG,OAAO,SAAAyE,GAAG,MAAY,KAARA,KC/E1C,SAASgC,EAAeC,EAA8BC,GACzD,IAAMC,EAAoB,GACpBC,EAAwB,GAkB9B,OAhBAH,EAAMI,KACFC,MAAWJ,GACXI,MAAW,0CACX3F,OACAA,GACF4F,QAAQ,SAAA5G,GAEN,IAAMwD,EAAMxD,EAAKmB,MACXsC,EAjCP,SAAwB6C,EAA8BO,GACzD,IAAMC,EAAcH,MAAWE,GACzBE,EAASJ,MAAW,wCACpBlD,EAAO6C,EAAMU,IAAIF,EAAaC,OAAQ/F,OAAWA,GAEvD,OAAQyC,GAAQ,UAAWA,EAAQA,EAAKtC,WAAQH,EA4B/BiG,CAAeX,EAAO9C,IApBpC,SAAkB8C,EAA8BY,GACnD,IAAMC,EAAaR,MAAWO,GACxBE,EAAsBT,MAAW,mDACjCU,EAAQf,EAAMI,KAAKS,EAAYC,OAAqBpG,OAAWA,GACrE,OAAOlD,OAAOiB,OAAOsI,GAChBC,KAAK,SAAAC,GAAA,OAAqD,OAArDA,EAAGpG,MAAkBiB,MAAM,wBAiB7BoF,CAASlB,EAAO9C,GAGhBgD,EAAMiB,KAAK,IAAI/C,EAASlB,EAAKC,IAF7BgD,EAAQgB,KAAK,IAAI/B,EAAWlC,EAAKC,MAKlC,CAAE+C,QAAOC,WASb,SAAeiB,EAAtBC,EAAAC,GAAA,OAAAC,EAAA/C,MAAAnB,KAAA7C,sDAAO,SAAAgH,EAA0BC,EAAcb,GAAxC,IAAAc,EAAA1B,EAAA2B,EAAAnH,UAAA,OAAAoH,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAAC,MAAA,cACHN,GAD4DA,EAAzDC,EAAAlH,OAAA,QAAAC,IAAAiH,EAAA,GAAAA,EAAA,GAA+E,KACrDM,EAAcrB,GACrCZ,EAAQK,UAFX0B,EAAAG,OAAA,SAII,IAAIC,QAAQ,SAAC1K,EAAS2K,GACzB/B,QAAaoB,EAAMzB,EAAOY,EAASc,EAAa,cAChDjK,EAAQuI,MANT,wBAAA+B,EAAAM,SAAAb,6BAUP,SAASS,EAAc/E,GACnB,IAAMoF,EAAMpF,EAAIqF,QAAQ,OAAQ,IAChC,OAAID,EAAIxG,MAAM,OAAe,MACzBwG,EAAIxG,MAAM,iBAAyB,gBACnCwG,EAAIxG,MAAM,QAAgB,YAC1BwG,EAAIxG,MAAM,OAAe,WACzBwG,EAAIxG,MAAM,OAAe,cACzBwG,EAAIxG,MAAM,MAAc,UACxBwG,EAAIxG,MAAM,MAAc,qBACxBwG,EAAIxG,MAAM,OAAe,WACzBwG,EAAIxG,MAAM,OAAe,aACzBwG,EAAIxG,MAAM,QAAgB,mBAC1BwG,EAAIxG,MAAM,MAAc,yBACxBwG,EAAIxG,MAAM,sBAA8B,QACxCwG,EAAIxG,MAAM,iBAAyB,QACnCwG,EAAIxG,MAAM,kBAA0B,QACnB,cC9ElB,IAAM0G,EAAb,WAUI,SAAAA,EAAY3E,EAAa4E,EAAeC,EAAkBC,EAAeC,EAAgBC,EAAiBC,EAAkBC,GAAmBvL,OAAA4F,EAAA,EAAA5F,CAAA6F,KAAAmF,GAAAnF,KAT/I2F,UAS8I,EAAA3F,KAR9I4F,YAQ8I,EAAA5F,KAP9I6F,eAO8I,EAAA7F,KAN9I8F,WAM8I,EAAA9F,KAL9I+F,YAK8I,EAAA/F,KAJ9IgG,aAI8I,EAAAhG,KAH9IiG,cAG8I,EAAAjG,KAF9IkG,cAE8I,EAC1IlG,KAAK2F,KAAOnF,EACZR,KAAK4F,OAASR,EACdpF,KAAK6F,UAAYR,EACjBrF,KAAK8F,MAAQR,EACbtF,KAAK+F,OAASR,EACdvF,KAAKgG,QAAUR,EACfxF,KAAKiG,SAAWR,EAChBzF,KAAKkG,SAAWR,EAlBxB,OAAAvL,OAAAoG,EAAA,EAAApG,CAAAgL,EAAA,EAAA3E,IAAA,QAAAM,IAAA,WAsBkB,OAAOd,KAAK4F,SAtB9B,CAAApF,IAAA,WAAAM,IAAA,WAuBqB,OAAOd,KAAK6F,YAvBjC,CAAArF,IAAA,UAAAM,IAAA,WAwBoB,OAAOd,KAAKkG,WAxBhC,CAAA1F,IAAA,OAAAM,IAAA,WAyBiB,OAAOd,KAAK8F,QAzB7B,CAAAtF,IAAA,QAAAM,IAAA,WA0BkB,OAAOd,KAAK+F,SA1B9B,CAAAvF,IAAA,SAAAM,IAAA,WA2BmB,OAAOd,KAAKgG,UA3B/B,CAAAxF,IAAA,UAAAM,IAAA,WA4BoB,OAAOd,KAAKiG,aA5BhCd,EAAA,GCCMgB,EAAe,iCACfC,EAAc,uBACdC,EAAqB,4BACrBC,EAAiB,qBAEhB,SAASC,EAASnC,EAAcxB,GACnC,IAAMD,EAAQK,UACRwD,EAAkB,GAoBxB,OAlBAxD,QAAaoB,EAAMzB,EAAOC,EAAM,cAAe,WAC3C,IAAI6D,EAAI,EACR9D,EAAMI,UACF1F,OAAWA,EAAW2F,MAAWmD,EAAe,iBAAkBnD,MAAWJ,IAC/EK,QAAQ,SAAA5G,GAEN,IAAMqK,EAAUrK,EAAKmB,MACfkI,EAAUiB,GAAahE,EAAO+D,GAE9BtB,EAAQwB,GAAajE,EAAO+D,EADhBhB,EAAU,aAAe,SAErCL,EAAWwB,GAAmBlE,EAAO+D,GACrCpB,EAAOwB,GAAQnE,EAAO+D,EAAS,QAC/BnB,EAAQuB,GAAQnE,EAAO+D,EAAS,SAChClB,EAASsB,GAAQnE,EAAO+D,EAAS,UACjCjB,EAAUqB,GAAQnE,EAAO+D,EAAS,WACxCF,EAAK1C,KAAK,IAAIqB,EAAQsB,IAAKrB,EAAOC,EAAUC,EAAMC,EAAOC,EAAQC,EAASC,QAG3Ec,EAGJ,SAASO,EAAcC,EAAgBC,EAAiBC,GAC3D,IAAMvE,EAAQK,UACRmE,EAAU,IAAInE,gBAAqBL,GAMzCK,QAAagE,EAASrE,EAAOuE,EAAQ,cAAe,WAChD,IAAIvF,EAAWgB,EAAMU,SAAIhG,EAAW2F,MAAWqD,EAN/B,gBAMkEhJ,EAAW2F,MAAWkE,IAEpGE,EAAe,GACbC,EAAerE,MAAWkE,GAC1BI,EAAetE,MAAWrB,EAASnE,OACzC4J,EAAatD,KAAKd,KAAUsE,EAActE,MAAWsD,EATlC,OASoEY,EAAQG,IAC/FD,EAAatD,KAAKd,KAAUsE,EAActE,MAAWsD,EAXtC,cAWoEW,EAASI,IAE5FF,EAAQI,OAAO,GAAIH,EAAc,SAACI,EAAKC,EAAIC,GAClCD,GACDnI,QAAQC,IAAI,OAASmI,OAK9B,SAASC,EAAeX,EAAiBY,EAAkBC,EAAoBC,EAAoBC,GACtG,IAAMpF,EAAQK,UACRmE,EAAU,IAAInE,gBAAqBL,GAMnC9C,EAAMgI,EAAa,IAAMD,EAAW,OAE1C5E,QAAagE,EAASrE,EAAO9C,EAAK,cAAe,WAC7C,IAAI8B,EAAWgB,EAAMU,SAAIhG,EAAW2F,MAAWqD,EAP/B,gBAOkEhJ,EAAW2F,MAAWnD,IAEpGmI,EAAerF,EAAMlE,MAAMuE,MAAWrB,EAASnE,OAAQwF,MAAWoD,EAVtD,gBAUkF/I,OAAWA,GAEzG+J,EAAe,GACbC,EAAerE,MAAWnD,GAC1ByH,EAAetE,MAAWrB,EAASnE,OACnCyK,EAAaJ,EAAa,YAAwBE,EAAa,IAAMH,EAAW,OAChFM,EAAiBlF,MAAWiF,GAElCb,EAAatD,KAAKd,KAAUsE,EAActE,MAAWoD,EAlBrC,WAkBiE0B,EAAYT,IAE7FD,EAAatD,KAAKd,KAAUsE,EAActE,MAAWoD,EAlB3B,qBAkBiE8B,EAAgBb,IAE3GD,EAAatD,KAAKd,KAAUkF,EAAgBlF,MAAWoD,EAnBpC,cAmBmE2B,EAAYV,IAClGD,EAAatD,KAAKd,KAAUkF,EAAgBlF,MAAWsD,EAnBpC,OAmBsE2B,EAAYZ,IAGrGF,EAAQI,OAAOS,EAAcZ,EAAc,SAACI,EAAKC,EAAIC,GAC5CD,GACDnI,QAAQC,IAAI,OAASmI,OAK9B,SAASS,GAAeC,EAA2BpB,EAAiBE,EAAgBmB,GACvF,IAAM1F,EAAQK,UACRmE,EAAU,IAAInE,gBAAqBL,GAEnC2F,EAActF,MAAWkE,GACzBqB,EAAevF,MAAWoF,GAMhCpF,QAAagE,EAASrE,EAAOyF,EAAmB,cAAe,WAE3D,IAAIJ,EACJA,EAAcrF,EAAMlE,MAAM6J,EAAatF,MAAWsD,EARlC,gBAQiEjJ,EAAYkL,GAE7F,IAAInB,EAAe,GACnBA,EAAatD,KAAKd,KAAUsF,EAAatF,MAAWqD,EAVvC,QAUuE,WAAYkC,IAChGnB,EAAatD,KAAKd,KAAUsF,EAAatF,MAAWsD,EAZpC,WAYmE+B,EAAWG,QAASD,IACvGnB,EAAatD,KAAKd,KAAUsF,EAAatF,MAAWqD,EAXpC,WAWuEgC,EAAWI,WAAYF,IAC9GnB,EAAatD,KAAKd,KAAUsF,EAAatF,MAAWsD,EAXjC,OAWmEgC,EAAaC,IAEnGpB,EAAQI,OAAOS,EAAcZ,EAAc,SAACI,EAAKC,EAAIC,GAC5CD,GACDnI,QAAQC,IAAI,OAASmI,OAK9B,SAASgB,GAAWtE,EAAcxB,GACrC,IAAMD,EAAQK,UACV2F,EAAa,GAQjB,OAPA3F,QAAaoB,EAAMzB,EAAOC,EAAM,cAAe,WAC3C,IAAIf,EAAUc,EAAMlE,WAChBpB,EAAW2F,MAAWoD,EAAc,gBAAY/I,EAAW2F,MAAWJ,IAEtEf,EAAQzE,SACRuL,EAAa9G,EAAQ,GAAR,gBAEd8G,EAGJ,SAASC,GAAWxE,EAAcxB,GACrC,IAAMD,EAAQK,UACVgE,EAAU,CAAEwB,QAAS,GAAIC,WAAY,IAgBzC,OAfAzF,QAAaoB,EAAMzB,EAAOC,EAAM,cAAe,WAC3C,IAAIiG,EAAOlG,EAAMU,SACbhG,EAAW2F,MAAWsD,EAAiB,gBAAYjJ,EAAW2F,MAAWJ,IAE7E,GAAIiG,GAAQA,EAAKrL,MAAO,CACpB,IAAIgL,EAAU7F,EAAMU,IAChBL,MAAW6F,EAAKrL,OAAQwF,MAAWsD,EAAiB,gBAAYjJ,OAAWA,GAE3EmL,IAASxB,EAAQwB,QAAUA,EAAQhL,OACvC,IAAIiL,EAAa9F,EAAMU,IACnBL,MAAW6F,EAAKrL,OAAQwF,MAAWqD,EAAqB,gBAAYhJ,OAAWA,GAE/EoL,IAAYzB,EAAQyB,WAAaA,EAAWjL,UAGjDwJ,EAoBJ,SAAS8B,GAAgBC,GAC5B,IAAIC,EAAoB,GAsBxB,OArBAD,EAAQ9F,QAAQ,SAAA5G,GACZ,GAAKA,EAAKuJ,SAELvJ,EAAKyJ,OAAUzJ,EAAK0J,QAAW1J,EAAK4J,UAAa5J,EAAK2J,SAA3D,CAEAgD,EAAQlF,KAAR,IACAkF,EAAQlF,KAAR,kBAAArH,OAA+BJ,EAAKsJ,KAApC,4BACAqD,EAAQlF,KAAR,OAAArH,OAAoBJ,EAAK6J,SAAW,aAAe,QAAnD,MAAAzJ,OAA+DJ,EAAKuJ,OAApE,OACAoD,EAAQlF,KAAR,2BACAkF,EAAQlF,KAAR,iBAAArH,OAA8BJ,EAAKwJ,UAAnC,OACA,IAAIoD,EAAU,GACV5M,EAAKyJ,OACLmD,EAAQnF,KAAK,YACbzH,EAAK0J,QACLkD,EAAQnF,KAAK,aACbzH,EAAK2J,SACLiD,EAAQnF,KAAK,cACbzH,EAAK4J,UACLgD,EAAQnF,KAAK,eACjBkF,EAAQlF,KAAR,aAAArH,OAA0BwM,EAAQC,KAAK,MAAvC,SAEG,uDAAyDF,EAAQE,KAAK,MAwB1E,SAASrC,GAAmBlE,EAA8BO,GAC7D,IAAMC,EAAcH,MAAWE,GACzBmC,EAAW1C,EAAMU,IAAIF,EAAaH,MAAWmD,EAAe,iBAAa9I,OAAWA,GAC1F,OAAQgI,GAAY,UAAWA,EAAYA,EAAS7H,MAAQ,GAGzD,SAASoJ,GAAajE,EAA8BO,EAAqBiG,GAC5E,IAAMhG,EAAcH,MAAWE,GACzBkC,EAAQzC,EAAMU,IAAIF,EAAaH,MAAWmD,EAAegD,QAAY9L,OAAWA,GACtF,OAAQ+H,GAAS,UAAWA,EAASA,EAAM5H,MAAQ,GAGhD,SAASsJ,GAAQnE,EAA8BO,EAAqBkG,GACvE,IAAMjG,EAAcH,MAAWE,GACzBmG,EAAO1G,EAAMlE,MAAM0E,EAAaH,MAAWmD,EAAe,QAASnD,MAAWmD,EAAeiD,QAAW/L,GAC9G,SAAQgM,GAAuB,GAAfA,EAAKjM,QAGlB,SAASuJ,GAAahE,EAA8BO,GACvD,IAAMC,EAAcH,MAAWE,GACzBoG,EAAa3G,EAAMlE,MAAM0E,EAAaH,MAAWmD,EAAe,mBAAe9I,OAAWA,GAChG,SAAQiM,GAAmC,GAArBA,EAAWlM,qBC3O/BmM,GAAaC,EAAQ,KAEpB,SAAeC,GAAtBzF,EAAAC,EAAAyF,GAAA,OAAAC,GAAAxI,MAAAnB,KAAA7C,wDAAO,SAAAgH,EAAyBjG,EAAc0J,EAAkBZ,GAAzD,IAAAzD,EAAAqG,EAAA,OAAArF,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAAC,MAAA,cACGpB,EADH,GAAA9G,OACgB/B,EAAOC,WADvB8B,OACmCyB,GAChC0L,EAAWrG,EAAU,IAAMqE,EAF9BlD,EAAAG,OAAA,SAGI0E,GAAWM,WAAWD,EAAU5C,GAASjI,KAAK,SAAC+K,GAElD,OADAxK,QAAQC,IAAR,oBAAA9C,OAAgCqN,EAAhC,OACO,GACR,SAACC,GAEA,OADAzK,QAAQC,IAAIwK,IACL,KARR,wBAAArF,EAAAM,SAAAb,6BAcA,SAAe6F,GAAtBC,EAAAC,GAAA,OAAAC,GAAAhJ,MAAAnB,KAAA7C,wDAAO,SAAAiN,EAAyBlM,EAAc0J,GAAvC,IAAA/H,EAAA,OAAA0E,EAAAC,EAAAC,KAAA,SAAA4F,GAAA,cAAAA,EAAA7O,KAAA6O,EAAA1F,MAAA,cACG9E,EAAMyK,GAAapM,EAAM0J,GAD5ByC,EAAAxF,OAAA,SAGI0F,SAAgB1K,GAClBd,KAAKyL,KAJP,wBAAAH,EAAArF,SAAAoF,6BAUA,SAAeK,GAAtBC,GAAA,OAAAC,GAAAxJ,MAAAnB,KAAA7C,wDAAO,SAAAyN,EAA+B/K,GAA/B,OAAA0E,EAAAC,EAAAC,KAAA,SAAAoG,GAAA,cAAAA,EAAArP,KAAAqP,EAAAlG,MAAA,cAAAkG,EAAAhG,OAAA,SACI0F,SAAgB1K,GAClBd,KAAKyL,KAFP,wBAAAK,EAAA7F,SAAA4F,6BASA,SAAeE,GAAtBC,EAAAC,GAAA,OAAAC,GAAA9J,MAAAnB,KAAA7C,wDAAO,SAAA+N,EAA2BhN,EAAciN,GAAzC,IAAAtL,EAAA,OAAA0E,EAAAC,EAAAC,KAAA,SAAA2G,GAAA,cAAAA,EAAA5P,KAAA4P,EAAAzG,MAAA,cACG9E,EAAMwL,GAAenN,EAAMiN,GAD9BC,EAAAvG,OAAA,SAEI0F,SAAgB1K,EAAK,CAAEyL,QAAS,CAAEC,OAAU,iBAC9CxM,KAAKyL,KAHP,wBAAAY,EAAApG,SAAAkG,6BAUA,SAAeM,GAAtBC,EAAAC,GAAA,OAAAC,GAAAxK,MAAAnB,KAAA7C,wDAAO,SAAAyO,EAA0B1N,EAAciN,GAAxC,IAAAtL,EAAAgM,EAAAC,EAAAnJ,EAAAoJ,EAAA,OAAAxH,EAAAC,EAAAC,KAAA,SAAAuH,GAAA,cAAAA,EAAAxQ,KAAAwQ,EAAArH,MAAA,cACG9E,EAAMwL,GAAenN,EAAMiN,GAD9Ba,EAAArH,KAAA,EAGoBmG,GAAY5M,EAAMiN,GAHtC,cAGGU,EAHHG,EAAAC,KAAAD,EAAArH,KAAA,EAIqBkH,EAASzH,OAJ9B,cAIG0H,EAJHE,EAAAC,KAAAD,EAAArH,KAAA,EAKiBuH,EAAuBJ,EAAWjM,EAAK,eALxD,cAKG8C,EALHqJ,EAAAC,KAMGF,EAAcG,EAA2BvJ,EAAO9C,GANnDmM,EAAAnH,OAAA,SAQIkH,GARJ,yBAAAC,EAAAhH,SAAA4G,0EAyBA,SAAAO,EAA6BjO,EAAc0J,EAAkBE,EAAoBC,GAAjF,IAAAF,EAAAgE,EAAA,OAAAtH,EAAAC,EAAAC,KAAA,SAAA2H,GAAA,cAAAA,EAAA5Q,KAAA4Q,EAAAzH,MAAA,cACGkD,EAAayC,GAAapM,EAAM,IADnCkO,EAAAzH,KAAA,EAEoBqF,GAAU9L,EAAM0J,EAAW,QAF/C,cAEGiE,EAFHO,EAAAH,KAAAG,EAAAzH,KAAA,EAGuBkH,EAASzH,OAHhC,OAIHiI,EAJGD,EAAAH,KAIkCrE,EAAUC,EAAYC,EAAYC,GAJpE,wBAAAqE,EAAApH,SAAAmH,0EAOA,SAAAG,EAA6BpO,EAAc0J,EAAkB2E,GAA7D,IAAAtF,EAAAC,EAAA2E,EAAA,OAAAtH,EAAAC,EAAAC,KAAA,SAAA+H,GAAA,cAAAA,EAAAhR,KAAAgR,EAAA7H,MAAA,cACGsC,EAAUqD,GAAapM,EAAM0J,GAC7BV,EAASoD,GAAapM,EAAMqO,GAF/BC,EAAA7H,KAAA,EAGoBqF,GAAU9L,EAAMqO,GAHpC,cAGGV,EAHHW,EAAAP,KAAAO,EAAA7H,KAAA,EAIuBkH,EAASzH,OAJhC,OAKHiI,EALGG,EAAAP,KAKiChF,EAASC,GAL1C,wBAAAsF,EAAAxH,SAAAsH,0EAQA,SAAAG,EAA8BvO,EAAc0J,EAAkBS,GAA9D,IAAAnB,EAAAwF,EAAAb,EAAAc,EAAA,OAAApI,EAAAC,EAAAC,KAAA,SAAAmI,GAAA,cAAAA,EAAApR,KAAAoR,EAAAjI,MAAA,cACGuC,EAASoD,GAAa,IAAMpM,EAAM0J,GAClC8E,EAAoB,yDAFvBE,EAAAjI,KAAA,EAGoB8F,GAAgBiC,GAHpC,cAGGb,EAHHe,EAAAX,KAAAW,EAAAjI,KAAA,EAIuBkH,EAASzH,OAJhC,OAIGuI,EAJHC,EAAAX,KAKHI,GAAwBK,EAAoBC,EAAazF,EAAQmB,GAL9D,wBAAAuE,EAAA5H,SAAAyH,0EAaA,SAAAI,EAAyB3O,EAAc4O,EAAqBC,GAA5D,OAAAxI,EAAAC,EAAAC,KAAA,SAAAuI,GAAA,cAAAA,EAAAxR,KAAAwR,EAAArI,MAAA,cAAAqI,EAAArI,KAAA,EACGsI,GAAU/O,EAAM4O,EAAaC,GADhC,cAAAC,EAAAnI,OAAA,SAEIqI,GAAYhP,EAAM6O,IAFtB,wBAAAC,EAAAhI,SAAA6H,0EASA,SAAAM,EAA0BjP,EAAckP,EAAiBC,GAAzD,OAAA9I,EAAAC,EAAAC,KAAA,SAAA6I,GAAA,cAAAA,EAAA9R,KAAA8R,EAAA3I,MAAA,cAAA2I,EAAA3I,KAAA,EACG4I,GAASrP,EAAMkP,EAASlP,EAAMmP,GADjC,cAAAC,EAAAzI,OAAA,SAEI1I,GAAW+B,EAAMkP,IAFrB,wBAAAE,EAAAtI,SAAAmI,0EASA,SAAAK,EAA4BtP,EAAcuP,EAAuBC,GAAjE,OAAAnJ,EAAAC,EAAAC,KAAA,SAAAkJ,GAAA,cAAAA,EAAAnS,KAAAmS,EAAAhJ,MAAA,cAAAgJ,EAAAhJ,KAAA,EACGiJ,GAAW1P,EAAMuP,EAAevP,EAAMwP,GADzC,cAAAC,EAAA9I,OAAA,SAEIgJ,GAAwB3P,EAAMuP,IAFlC,wBAAAE,EAAA3I,SAAAwI,6BASA,SAAeP,GAAtBa,EAAAC,EAAAC,GAAA,OAAAC,GAAA9M,MAAAnB,KAAA7C,wDAAO,SAAA+Q,EAAyBhQ,EAAc4O,EAAqBC,GAA5D,IAAAnJ,EAAAf,EAAAC,EAAAqL,EAAA,OAAA5J,EAAAC,EAAAC,KAAA,SAAA2J,GAAA,cAAAA,EAAA5S,KAAA4S,EAAAzJ,MAAA,cAAAyJ,EAAAzJ,KAAA,EAC4B6G,GAAWtN,GADvC,cAAA0F,EAAAwK,EAAAnC,KACGpJ,EADHe,EACGf,MAAOC,EADVc,EACUd,QAEbD,EAAQA,EAAM5G,OAAO,SAAAoS,GAAA,IAAGhT,EAAHgT,EAAGhT,KAAH,OAAc0R,EAAU/O,SAAS3C,KACtDyH,EAAUA,EAAQ7G,OAAO,SAAAqS,GAAA,IAAGjT,EAAHiT,EAAGjT,KAAH,OAAc0R,EAAU/O,SAAS3C,KAEpD8S,EANH,GAAA1R,OAAAtC,OAAAuC,EAAA,EAAAvC,CAOI0I,EAAMlK,IAAI,SAAA4V,GAAA,IAAGlT,EAAHkT,EAAGlT,KAAH,OAAckS,GAASrP,EAAM7C,EAAMyR,EAAazR,MAP9DlB,OAAAuC,EAAA,EAAAvC,CAQI2I,EAAQnK,IAAI,SAAA6V,GAAA,IAAGnT,EAAHmT,EAAGnT,KAAH,OAAcuS,GAAW1P,EAAM7C,EAAMyR,EAAazR,OARlE+S,EAAAzJ,KAAA,GAWGG,QAAQ2J,IAAIN,GAXf,eAAAC,EAAAvJ,OAAA,SAYI,IAAI6J,UAZR,yBAAAN,EAAApJ,SAAAkJ,6BAmBA,SAAeX,GAAtBoB,EAAAC,EAAAC,EAAAC,GAAA,OAAAC,GAAA5N,MAAAnB,KAAA7C,wDAAO,SAAA6R,EAAwBC,EAAoBC,EAAoBC,EAAyBC,GAAzF,IAAAC,EAAArI,EAAA,OAAAzC,EAAAC,EAAAC,KAAA,SAAA6K,GAAA,cAAAA,EAAA9T,KAAA8T,EAAA3K,MAAA,cAAA2K,EAAA3K,KAAA,EACwBqF,GAAUiF,EAAYC,GAD9C,cACGG,EADHC,EAAArD,KAAAqD,EAAA3K,KAAA,EAEmB0K,EAAa5R,OAFhC,cAEGuJ,EAFHsI,EAAArD,KAAAqD,EAAAzK,OAAA,SAIIgF,GAAWsF,EAAiBC,EAAiBpI,IAJjD,wBAAAsI,EAAAtK,SAAAgK,6BAWA,SAAepB,GAAtB2B,EAAAC,EAAAC,EAAAC,GAAA,OAAAC,GAAAxO,MAAAnB,KAAA7C,wDAAO,SAAAyS,EAA0BX,EAAoBC,EAAoBC,EAAyBC,GAA3F,IAAAS,EAAAhN,EAAAC,EAAAqL,EAAA,OAAA5J,EAAAC,EAAAC,KAAA,SAAAqL,GAAA,cAAAA,EAAAtU,KAAAsU,EAAAnL,MAAA,cAAAmL,EAAAnL,KAAA,EAEGoL,GAAaZ,EAAiBC,GAFjC,cAAAU,EAAAnL,KAAA,EAG8B6G,GAAWyD,EAAYC,GAHrD,cAAAW,EAAAC,EAAA7D,KAGKpJ,EAHLgN,EAGKhN,MAAOC,EAHZ+M,EAGY/M,QAETqL,EALH,GAAA1R,OAAAtC,OAAAuC,EAAA,EAAAvC,CAMI0I,EAAMlK,IAAI,SAAAqX,GAAA,IAAG3U,EAAH2U,EAAG3U,KAAH,OAAckS,GAAQ,GAAA9Q,OAAIwS,EAAJ,KAAAxS,OAAkByS,GAAc7T,EAAhC,GAAAoB,OAAyC0S,EAAzC,KAAA1S,OAA4D2S,GAAmB/T,MANnHlB,OAAAuC,EAAA,EAAAvC,CAOI2I,EAAQnK,IAAI,SAAAsX,GAAA,IAAG5U,EAAH4U,EAAG5U,KAAH,OAAcuS,GAAU,GAAAnR,OAAIwS,EAAJ,KAAAxS,OAAkByS,GAAc7T,EAAhC,GAAAoB,OAAyC0S,EAAzC,KAAA1S,OAA4D2S,GAAmB/T,OAPvHyU,EAAAnL,KAAA,GAUGG,QAAQ2J,IAAIN,GAVf,eAAA2B,EAAAjL,OAAA,SAWI,IAAI6J,UAXR,yBAAAoB,EAAA9K,SAAA4K,0EAkBA,SAAAM,EAAsBhS,EAAcrB,GAApC,IAAAsR,EAAA,OAAA5J,EAAAC,EAAAC,KAAA,SAAA0L,GAAA,cAAAA,EAAA3U,KAAA2U,EAAAxL,MAAA,cACGwJ,EAAWiC,MAAMC,KAAKxT,GAAUlE,IAAI,SAAA2X,GAAI,OAAIC,GAAWrS,EAAMoS,EAAKjV,KAAMiV,KAD3EH,EAAAxL,KAAA,EAEGG,QAAQ2J,IAAIN,GAFf,cAAAgC,EAAAtL,OAAA,SAGI,IAAI6J,UAHR,wBAAAyB,EAAAnL,SAAAkL,6BAUA,SAAeH,GAAtBS,EAAAC,GAAA,OAAAC,GAAAvP,MAAAnB,KAAA7C,wDAAO,SAAAwT,EAA4BzS,EAAciN,GAA1C,OAAA5G,EAAAC,EAAAC,KAAA,SAAAmM,GAAA,cAAAA,EAAApV,KAAAoV,EAAAjM,MAAA,cAAAiM,EAAAjM,KAAA,EACOkM,GAAa3S,EAAMiN,GAD1B,WAAAyF,EAAA3E,KAAA,CAAA2E,EAAAjM,KAAA,eAAAiM,EAAA/L,OAAA,SAEQ,IAAI6J,UAFZ,cAAAkC,EAAA/L,OAAA,SAIIiM,GAAW5S,EAAMiN,EAAY,IAAI4F,KAAQ,0DAJ7C,wBAAAH,EAAA5L,SAAA2L,6BAWA,SAAeJ,GAAtBS,EAAAC,EAAAC,GAAA,OAAAC,GAAAhQ,MAAAnB,KAAA7C,wDAAO,SAAAiU,EAA0BlT,EAAc0J,EAAkBZ,GAA1D,OAAAzC,EAAAC,EAAAC,KAAA,SAAA4M,GAAA,cAAAA,EAAA7V,KAAA6V,EAAA1M,MAAA,cAAA0M,EAAA1M,KAAA,EACGxI,GAAW+B,EAAM0J,GADpB,cAAAyJ,EAAAxM,OAAA,SAEIgF,GAAW3L,EAAM0J,EAAUZ,IAF/B,wBAAAqK,EAAArM,SAAAoM,0EAQA,SAAAE,EAA6BpT,EAAc0J,EAAkB2J,GAA7D,IAAAvK,EAAA,OAAAzC,EAAAC,EAAAC,KAAA,SAAA+M,GAAA,cAAAA,EAAAhW,KAAAgW,EAAA7M,MAAA,cAAA6M,EAAA7M,KAAA,EACGxI,GAAW+B,EAAM0J,GADpB,cAEHtI,QAAQC,IAAI,mBAFTiS,EAAA7M,KAAA,EAGmB0H,GAAyBkF,GAH5C,cAGGvK,EAHHwK,EAAAvF,KAAAuF,EAAA3M,OAAA,SAII4E,GAAUvL,EAAM0J,EAAUZ,IAJ9B,wBAAAwK,EAAAxM,SAAAsM,6BAWA,SAAezH,GAAtB4H,EAAAC,EAAAC,GAAA,OAAAC,GAAAzQ,MAAAnB,KAAA7C,wDAAO,SAAA0U,EAA0B3T,EAAc0J,EAAkBZ,GAA1D,OAAAzC,EAAAC,EAAAC,KAAA,SAAAqN,GAAA,cAAAA,EAAAtW,KAAAsW,EAAAnN,MAAA,cAAAmN,EAAAjN,OAAA,SACIiM,GAAW5S,EAAM0J,EAAUZ,EAAS,oDADxC,wBAAA8K,EAAA9M,SAAA6M,sCASQf,yFAAf,SAAAiB,EAA0B7T,EAAc8T,EAAkBhL,EAAwBiL,GAAlF,IAAA1O,EAAA2O,EAAA,OAAA3N,EAAAC,EAAAC,KAAA,SAAA0N,GAAA,cAAAA,EAAA3W,KAAA2W,EAAAxN,MAAA,cACUpB,EADV,GAAA9G,OACuB/B,EAAOC,WAD9B8B,OAC0CyB,GAChCgU,EAAU,CACZE,OAAQ,OACR9G,QAAS,CACL2G,OACAI,KAAML,EACNM,oBAAqBjV,GAEzBkV,KAAMvL,GATdmL,EAAAtN,OAAA,SAWW0F,SAAgBhH,EAAS2O,GAC3BnT,KAAKyL,KAZd,wBAAA2H,EAAAnN,SAAA+M,6BAkBO,SAAe7E,GAAtBsF,EAAAC,GAAA,OAAAC,GAAAvR,MAAAnB,KAAA7C,wDAAO,SAAAwV,EAA2BzU,EAAc6O,GAAzC,OAAAxI,EAAAC,EAAAC,KAAA,SAAAmO,GAAA,cAAAA,EAAApX,KAAAoX,EAAAjO,MAAA,cAAAiO,EAAA/N,OAAA,SACIC,QAAQ2J,IAAI1B,EAAUpU,IAAI,SAAAqZ,GAAQ,OAAI7V,GAAW+B,EAAM8T,MACzDjT,KAAK,kBAAM,IAAI2P,YAFjB,wBAAAkE,EAAA5N,SAAA2N,6BASA,SAAexW,GAAtB0W,EAAAC,GAAA,OAAAC,GAAA5R,MAAAnB,KAAA7C,wDAAO,SAAA6V,EAA0B9U,EAAc8T,GAAxC,IAAAnS,EAAAgM,EAAA,OAAAtH,EAAAC,EAAAC,KAAA,SAAAwO,GAAA,cAAAA,EAAAzX,KAAAyX,EAAAtO,MAAA,cACG9E,EAAMyK,GAAapM,EAAM8T,GAD5BiB,EAAAtO,KAAA,EAGoB4F,SAAgB1K,EAAK,CAAEuS,OAAQ,WAHnD,UAIqB,OADlBvG,EAHHoH,EAAAhH,MAIUiH,QAAsC,MAApBrH,EAASqH,OAJrC,CAAAD,EAAAtO,KAAA,eAAAsO,EAAApO,OAAA,SAOQgJ,GAAwB3P,EAAM8T,IAPtC,UAS0B,MAApBnG,EAASqH,OATf,CAAAD,EAAAtO,KAAA,gBAAAsO,EAAApO,OAAA,SAWQgH,GAXR,eAcCrB,GAAyBqB,GAd1BoH,EAAApO,OAAA,SAeQgH,GAfR,yBAAAoH,EAAAjO,SAAAgO,6BAuBA,SAAenF,GAAtBsF,EAAAC,GAAA,OAAAC,GAAAlS,MAAAnB,KAAA7C,wDAAO,SAAAmW,EAAuCpV,EAAciN,GAArD,OAAA5G,EAAAC,EAAAC,KAAA,SAAA8O,GAAA,cAAAA,EAAA/X,KAAA+X,EAAA5O,MAAA,cAAA4O,EAAA5O,KAAA,EACG6O,GAAqBtV,EAAMiN,GAD9B,cAAAoI,EAAA1O,OAAA,SAEI1I,GAAW+B,EAAMiN,IAFrB,wBAAAoI,EAAAvO,SAAAsO,6BASA,SAAeE,GAAtBC,EAAAC,GAAA,OAAAC,GAAAxS,MAAAnB,KAAA7C,wDAAO,SAAAyW,EAAoC1V,EAAciN,GAAlD,IAAAtD,EAAAgM,EAAAhR,EAAAC,EAAAqL,EAAA,OAAA5J,EAAAC,EAAAC,KAAA,SAAAqP,GAAA,cAAAA,EAAAtY,KAAAsY,EAAAnP,MAAA,cACGkD,EADH,GAAApL,OACmByB,EADnB,KAAAzB,OAC2B0O,GAD3B2I,EAAAnP,KAAA,EAG8B6G,GAAWtN,EAAMiN,GAH/C,cAAA0I,EAAAC,EAAA7H,KAGKpJ,EAHLgR,EAGKhR,MAAOC,EAHZ+Q,EAGY/Q,QACTqL,EAJH,GAAA1R,OAAAtC,OAAAuC,EAAA,EAAAvC,CAKI0I,EAAMlK,IAAI,SAAAob,GAAA,IAAG1Y,EAAH0Y,EAAG1Y,KAAH,OAAcc,GAAW0L,EAAYxM,MALnDlB,OAAAuC,EAAA,EAAAvC,CAMI2I,EAAQnK,IAAI,SAAAqb,GAAA,IAAG3Y,EAAH2Y,EAAG3Y,KAAH,OAAcwS,GAAwBhG,EAAYxM,OANlEyY,EAAAnP,KAAA,EAQGG,QAAQ2J,IAAIN,GARf,cAAA2F,EAAAjP,OAAA,SASI,IAAI6J,UATR,yBAAAoF,EAAA9O,SAAA4O,6BAgBA,SAAe/C,GAAtBoD,EAAAC,GAAA,OAAAC,GAAAhT,MAAAnB,KAAA7C,wDAAO,SAAAiX,EAA4BlW,EAAciN,GAA1C,OAAA5G,EAAAC,EAAAC,KAAA,SAAA4P,GAAA,cAAAA,EAAA7Y,KAAA6Y,EAAA1P,MAAA,cAAA0P,EAAA7Y,KAAA,EAAA6Y,EAAA1P,KAAA,EAEOmG,GAAY5M,EAAMiN,GAFzB,cAAAkJ,EAAAxP,OAAA,UAGQ,GAHR,UAAAwP,EAAA7Y,KAAA,EAAA6Y,EAAAC,GAAAD,EAAA,WAMKA,EAAAC,cAAiB5F,UAA6B,MAAjB2F,EAAAC,GAAMpB,QANxC,CAAAmB,EAAA1P,KAAA,gBAAA0P,EAAAxP,OAAA,UAOY,GAPZ,cAAAwP,EAAAC,GAAA,yBAAAD,EAAArP,SAAAoP,EAAA,wCAiBP,SAAS/I,GAAenN,EAAciN,GAClC,OAAOb,GAAapM,EAAMiN,GAAc,IAO5C,SAASb,GAAapM,EAAc0J,GAEhC,IADA,IAAI/H,EAAG,GAAApD,OAAM/B,EAAOC,WAAb8B,OAAyByB,EAAzB,KAAAzB,OAAiCmL,GAAY,IAC3B,MAAlB/H,EAAI9E,OAAO,IACd8E,EAAMA,EAAI9E,MAAM,GAAI,GAExB,OAAO8E,EASX,SAAS2K,GAAyBqB,GAC9B,IAAKA,EAASpE,GACV,MAAMoE,EACV,OAAOA,2BCpVL0I,GAAQ,qDCFVC,MAAgC,mDAK5BtW,EAAcuW,GAEd,OADAzU,KAAKwU,MAAMtW,GAAQuW,EACZA,mCAMFvW,GACL,OAAO8B,KAAKwU,MAAME,eAAexW,+BAMjCA,GACA,OAAO8B,KAAKwU,MAAMtW,oCAMK,QAAAyW,EAAA3U,KAAA4U,EAAAzX,UAAAC,OAAjByX,EAAiB,IAAAzE,MAAAwE,GAAAjP,EAAA,EAAAA,EAAAiP,EAAAjP,IAAjBkP,EAAiBlP,GAAAxI,UAAAwI,GACvBkP,EAAM5Y,OAAO,SAAAiC,GAAI,OAAIyW,EAAKG,SAAS5W,KAC9B+E,QAAQ,SAAA/E,GAAI,cAAWyW,EAAKH,MAAMtW,qCAOvC8B,KAAKwU,MAAQ,aD3BfO,GAAgB,eAAAnR,EAAAzJ,OAAA6a,EAAA,EAAA7a,CAAAoK,EAAAC,EAAAyQ,KAAG,SAAA9Q,EAAOxE,GAAP,IAAAuV,EAAAC,EAAAC,EAAA,OAAA7Q,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAAC,MAAA,UACjBuQ,EAAuB,GAG3B5V,QAAQ+V,MAAM,sBACV1V,aAAiB+O,UALA,CAAAhK,EAAAC,KAAA,gBAAAD,EAAAC,KAAA,EAMYhF,EAAMyE,OANlB,OAMjB8Q,EANiBxQ,EAAAuH,KAQjB3M,QAAQK,MAAR,QAAAlD,OAAsBkD,EAAME,MAC5BP,QAAQK,MAAR,WAAAlD,OAAyBkD,EAAMuT,SAEzBkC,EAA0C,CAC5CE,IAAA,oBAAA7Y,OAA2BkD,EAAME,IAAjC,2BACA0V,IAAA,wDAAA9Y,OAA+DkD,EAAME,IAArE,oMAGA2V,IAAA,oBAAA/Y,OAA2BkD,EAAME,IAAjC,kBACA4V,IAAA,oDAAAhZ,OACEyY,IAEFvV,EAAMuT,UAAUkC,IAChBD,EAAsBC,EAAgBzV,EAAMuT,SArB/BxO,EAAAC,KAAA,iBAuBZhF,aAAiB3F,OACtBkb,EAAuBvV,EAAM+H,QAC7BpI,QAAQK,MAAMA,EAAM+V,QAGpBR,EADsB,kBAAVvV,EACWA,EAGAgW,KAAKC,UAAUjW,GA/BrB,cAiCrBL,QAAQK,MAAR,iBAAAlD,OAA+ByY,IAC/B5V,QAAQK,MAAR,UAAAlD,OAAwBkD,IACxBL,QAAQuW,WAEF,IAAI7b,MAAOmb,GAA6CD,GArCzC,yBAAAxQ,EAAAM,SAAAb,MAAH,gBAAAH,GAAA,OAAAJ,EAAAzC,MAAAnB,KAAA7C,YAAA,GA2ChB2Y,GAAU,SAAC5X,GACb,MAAa,KAATA,EACOA,GACH,IAAMA,GAAMgH,QAAQ,QAAS,MAS5B6Q,GAAc,SAAC7X,GAExB,OADAA,EAAO4X,GAAQ5X,GACXqW,GAAMO,SAAS5W,GACR4G,QAAQ1K,QAAQma,GAAMzT,IAAI5C,IAC9B8X,GAAe9X,GACjBa,KAAK,SAAAsP,GAAA,IAAGxL,EAAHwL,EAAGxL,MAAOC,EAAVuL,EAAUvL,QAAV,SAAArG,OAAAtC,OAAAuC,EAAA,EAAAvC,CAA4B0I,GAA5B1I,OAAAuC,EAAA,EAAAvC,CAAsC2I,MAC3C/D,KAAK,SAAA0V,GAAQ,OAAIF,GAAM0B,IAAI/X,EAAMuW,KACjC/U,MAAMqV,KAKFmB,GAAc,SAACC,GAAe,ODiJfjY,ECjJsC4X,GAAQK,GDkJtE,GAAA1Z,OAAU/B,EAAOC,WAAjB8B,OAA6ByB,GAD1B,IAAqBA,GC7IfkY,GAAc,SAAClY,EAAcmY,GAEtC,OAAOL,GADP9X,EAAO4X,GAAQ5X,GACYmY,GACtBtX,KAAK,SAAA8M,GAAQ,OAAIA,EAASpO,SAC1BiC,MAAMqV,KAgBFuB,GAAa,SAACpY,EAAc0J,EAAkB2O,GAGvD,OAFArY,EAAO4X,GAAQ5X,GACfqW,GAAMiC,OAAOtY,GDQV,SAAPuY,EAAAC,EAAAC,GAAA,OAAAC,GAAAzV,MAAAnB,KAAA7C,WCPW6Y,CAAe9X,EAAM0J,EAAU2O,GACjC7W,MAAMqV,KAOF8B,GAAe,SAAC3Y,EAAciN,EAAoBuC,GAG3D,OAFAxP,EAAO4X,GAAQ5X,GACfqW,GAAMiC,OAAOtY,GDMV,SAAP4Y,EAAAC,EAAAC,GAAA,OAAAC,GAAA9V,MAAAnB,KAAA7C,WCLW6Y,CAAiB9X,EAAMiN,EAAYuC,GACrChO,MAAMqV,KAMFhF,GAAe,SAAC7R,EAAciN,GAGvC,OAFAjN,EAAO4X,GAAQ5X,GACfqW,GAAMiC,OAAOtY,IACPiN,GAAc,IAAI+L,OAGjBlB,GAAiB9X,EAAMiN,GACzBzL,MAAMqV,IAHAjQ,QAAQC,OAAO,wBAsBjBoS,GAAY,SAACjZ,EAAc4O,EAAqBsK,GAIzD,OAHAlZ,EAAO4X,GAAQ5X,GACf4O,EAAcgJ,GAAQhJ,GACtByH,GAAMiC,OAAOtY,EAAM4O,GACdsK,EAAUha,ODlDZ,SAAPia,EAAAC,EAAAC,GAAA,OAAAC,GAAArW,MAAAnB,KAAA7C,WCqDW6Y,CAAc9X,EAAM4O,EAAasK,GACnC1X,MAAMqV,IAHAjQ,QAAQC,OAAO,qBAuBjB0S,GAAc,SAACvZ,EAAcrB,GAItC,OAHAqB,EAAO4X,GAAQ5X,GACfqW,GAAMiC,OAAOtY,GAERrB,EAASO,ODHX,SAAPsa,EAAAC,GAAA,OAAAC,GAAAzW,MAAAnB,KAAA7C,WCMW6Y,CAAW9X,EAAMrB,GACnB6C,MAAMqV,IAHAjQ,QAAQC,OAAO,uBASjBwL,GAAa,SAACrS,EAAc0J,EAAkBZ,GAGvD,OAFA9I,EAAO4X,GAAQ5X,GACfqW,GAAMiC,OAAOtY,GACN8X,GAAe9X,EAAM0J,EAAUZ,GACjCtH,MAAMqV,KAGFhO,GAAe,SAAC7I,EAAc2Z,EAAsBtL,GAG7D,OAFArO,EAAO4X,GAAQ5X,GACfqW,GAAMiC,OAAOtY,GDtHV,SAAP4Z,EAAAC,EAAAC,GAAA,OAAAC,GAAA9W,MAAAnB,KAAA7C,WCuHW6Y,CAAkB9X,EAAM2Z,EAActL,GACxC7M,MAAMqV,KAIFtL,GAAY,SAACvL,EAAc0J,EAAkBZ,GAGtD,OAFA9I,EAAO4X,GAAQ5X,GACfqW,GAAMiC,OAAOtY,GACN8X,GAAc9X,EAAM0J,EAAUZ,GAChCtH,MAAMqV,KAGFmD,GAAY,SAACha,EAAc0J,EAAkB2J,GAGtD,OAFArT,EAAO4X,GAAQ5X,GACfqW,GAAMiC,OAAOtY,GDRV,SAAPia,EAAAC,EAAAC,GAAA,OAAAC,GAAAnX,MAAAnB,KAAA7C,WCSW6Y,CAAkB9X,EAAM0J,EAAU2J,GAAS7R,MAAMqV,KAM/CwD,GAAW,SAACra,EAAcuW,GACnCvW,EAAO4X,GAAQ5X,GACf,IAAMsa,EAAM,IAAIC,KAEhB,OAAOC,GAAcF,EAAKta,EAAMuW,GAC3B1V,KAAK,kBAAMyZ,KAMdE,GAAgB,SAAhBA,EAAiBF,EAAYta,EAAcuW,GAC7C,IAAMtG,EAAWsG,EAAS9b,IAAT,eAAA4V,EAAApU,OAAA6a,EAAA,EAAA7a,CAAAoK,EAAAC,EAAAyQ,KAAa,SAAA7K,EAAM/N,GAAN,IAAAsc,EAAA9Q,EAAAkE,EAAAtO,EAAA,OAAA8G,EAAAC,EAAAC,KAAA,SAAA4F,GAAA,cAAAA,EAAA7O,KAAA6O,EAAA1F,MAAA,YACtBtI,aAAgB0F,GADM,CAAAsI,EAAA1F,KAAA,gBAEhBgU,EAAYH,EAAII,OAAOvc,EAAKhB,MAC5BwM,EAHgB,GAAApL,OAGAyB,EAHA,KAAAzB,OAGQJ,EAAKhB,MAHbgP,EAAA1F,KAAA,EAIIoR,GAAYlO,GAJhB,cAIhBkE,EAJgB1B,EAAA4B,KAAA5B,EAAA1F,KAAA,EAKhB+T,EAAcC,EAAW9Q,EAAYkE,GALrB,OAAA1B,EAAA1F,KAAA,sBAOjBtI,aAAgB0E,GAPC,CAAAsJ,EAAA1F,KAAA,gBAAA0F,EAAA1F,KAAA,GAQHyR,GAAYlY,EAAM7B,EAAKhB,MARpB,QAQhBoC,EARgB4M,EAAA4B,KAStBuM,EAAIlI,KAAKjU,EAAKhB,KAAMoC,EAAM,CAAEob,QAAQ,IATd,yBAAAxO,EAAArF,SAAAoF,MAAb,gBAAAnG,GAAA,OAAAsK,EAAApN,MAAAnB,KAAA7C,YAAA,IAajB,OAAO2H,QAAQ2J,IAAIN,IAMV2K,GAAiB,eAAAtK,EAAArU,OAAA6a,EAAA,EAAA7a,CAAAoK,EAAAC,EAAAyQ,KAAG,SAAArK,EAAO1M,GAAP,IAAA4O,EAAAlF,EAAAnK,EAAA+a,EAAAO,EAAA5b,UAAA,OAAAoH,EAAAC,EAAAC,KAAA,SAAAoG,GAAA,cAAAA,EAAArP,KAAAqP,EAAAlG,MAAA,cAAqBmI,EAArBiM,EAAA3b,OAAA,QAAAC,IAAA0b,EAAA,GAAAA,EAAA,GAA2C7a,EAAM0J,EAAjDmR,EAAA3b,OAAA,EAAA2b,EAAA,QAAA1b,EAAAwN,EAAAlG,KAAA,EACVyR,GAAYlY,EAAM0J,GADR,cACvBnK,EADuBoN,EAAAoB,KAAApB,EAAAlG,KAAA,EAEX8T,KAAMO,UAAUvb,GAFL,cAEvB+a,EAFuB3N,EAAAoB,KAAApB,EAAAhG,OAAA,SAItBoU,GAA0BT,EAAK1L,IAJT,wBAAAjC,EAAA7F,SAAA4F,MAAH,gBAAAlB,GAAA,OAAA8E,EAAArN,MAAAnB,KAAA7C,YAAA,YAUf8b,qFAAf,SAAArN,EAAyC4M,EAAY1L,GAArD,IAAAoM,EAAA/K,EAAAgL,EAAAhc,UAAA,OAAAoH,EAAAC,EAAAC,KAAA,SAAAuH,GAAA,cAAAA,EAAAxQ,KAAAwQ,EAAArH,MAAA,cAA0EuU,EAA1EC,EAAA/b,OAAA,QAAAC,IAAA8b,EAAA,GAAAA,EAAA,GAAsF,GAC5EhL,EAAWiL,GAAoBZ,EAAKU,GACrCvgB,IADY,eAAAkX,EAAA1V,OAAA6a,EAAA,EAAA7a,CAAAoK,EAAAC,EAAAyQ,KACR,SAAA/J,EAAM7O,GAAN,IAAAgd,EAAArH,EAAA9T,EAAAT,EAAA,OAAA8G,EAAAC,EAAAC,KAAA,SAAA2G,GAAA,cAAAA,EAAA5P,KAAA4P,EAAAzG,MAAA,UACK0U,EAAehd,EAAKhB,KACpB2W,EAAWsH,GAAoBD,GAC/Bnb,EAAOqb,GAAqB,GAAA9c,OAAIqQ,EAAJ,KAAArQ,OAAmB4c,KAEjDhd,EAAKmd,IALR,CAAApO,EAAAzG,KAAA,gBAAAyG,EAAAzG,KAAA,EAMSoL,GAAa7R,EAAM8T,GAN5B,cAAA5G,EAAAzG,KAAA,EAOSsU,GAA0BT,EAAK1L,EAAauM,GAPrD,OAAAjO,EAAAzG,KAAA,wBAAAyG,EAAAzG,KAAA,GAUsBtI,EAAKod,MAAM,QAVjC,eAUShc,EAVT2N,EAAAa,KAAAb,EAAAzG,KAAA,GAWS4L,GAAWrS,EAAM8T,EAAUvU,GAXpC,yBAAA2N,EAAApG,SAAAkG,MADQ,gBAAAR,GAAA,OAAAmF,EAAA1O,MAAAnB,KAAA7C,YAAA,IADrB6O,EAAAnH,OAAA,SAiBWC,QAAQ2J,IAAIN,IAjBvB,wBAAAnC,EAAAhH,SAAA4G,6BAoBA,SAASwN,GAAoBZ,EAAY3Q,GACrC,OAAO1N,OAAOD,KAAKse,EAAI3V,OAClB5G,OAAO,SAAA2L,GAEJ,IAAMyR,EAAezR,EAAS7M,MAAM8M,EAAWzK,OAAQwK,EAASxK,QAChE,SAAKic,GAAgBzR,EAAS7M,MAAM,EAAG8M,EAAWzK,UAAYyK,MAI1DwR,EAAarb,SAAS,OAAQqb,EAAate,MAAM,GAAI,GAAGiD,SAAS,QAKxErF,IAAI,SAAA6H,GAAG,OAAIgY,EAAI3V,MAAMrC,KAG9B,SAAS8Y,GAAoBpb,GAEzB,OADAA,EAAOA,EAAKpD,SAAS,KAAOoD,EAAKnD,MAAM,GAAI,GAAKmD,GACpCwb,OAAOxb,EAAKyb,YAAY,KAAO,GAG/C,SAASJ,GAAsBrb,GAG3B,OADAA,GADAA,EAAOA,EAAKpD,SAAS,KAAOoD,EAAKnD,MAAM,GAAI,GAAKmD,GACpCwb,OAAO,EAAGxb,EAAKyb,YAAY,MEtSpC,IAMMC,GAAa,kBAAe,SAACC,EAAUC,GAClDD,EAASE,iDAETC,GACGjb,KAAK,SAAAkb,GAAO,OAAIJ,EAASK,GAAkBD,MAC3Cva,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,UAGfL,GAAoB,SAACD,GAAD,sBAAArW,EAAAzJ,OAAA6a,EAAA,EAAA7a,CAAAoK,EAAAC,EAAAyQ,KAAuC,SAAA9Q,EAAO0V,EAAUC,GAAjB,OAAAvV,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAAC,MAAA,UAAAD,EAAA4P,GAC5D2F,EAD4DvV,EAAA4P,GAAA,CAAA5P,EAAAC,KAAA,eAAAD,EAAAC,KAAA,EAC3C4F,oBAD2C,OAAA7F,EAAA4P,GAAA5P,EAAAuH,KAAA,QACtEgO,EADsEvV,EAAA4P,KAOpEuF,EAASW,GAASP,EAAQ/e,QAC1B2e,EAASY,QALTZ,EAASa,MACTb,EAASc,OAJ2D,wBAAAjW,EAAAM,SAAAb,MAAvC,gBAAAH,EAAAC,GAAA,OAAAL,EAAAzC,MAAAnB,KAAA7C,YAAA,iDAYjC,SAAAyN,IAAA,OAAArG,EAAAC,EAAAC,KAAA,SAAAoG,GAAA,cAAAA,EAAArP,KAAAqP,EAAAlG,MAAA,cAAAkG,EAAAhG,OAAA,SACS0F,cAAqB,CAAEqQ,SAAU,2CAD1C,wBAAA/P,EAAA7F,SAAA4F,6BAKO,IAiBMiQ,GAAa,kBAAe,SAAChB,EAAUC,GAAX,OFeTvF,GAAMuG,UEazBC,GAAmB,SAAC1e,EAAYgM,GAAb,OAA8E,SAACwR,EAAUC,GAAa,IAAAkB,EAC7FlB,IAA/B5b,EAD4H8c,EAC5H9c,KAD4H8c,EACtH7c,OAAUtB,SAExBgd,EAASE,MACTF,EAASoB,MHJJ,SAAPC,EAAAC,EAAAC,GAAAC,GAAAla,MAAAnB,KAAA7C,WGOEgL,CADiBjK,EAAKgL,KAAK,KACA7M,EAAKhB,KAAMgN,GACtCwR,EAASyB,GAAY9gB,EAAQ+gB,kBAC7B1B,EAAS2B,QAGEC,GAAsB,SAACpf,EAAYqf,EAAoBC,GAAjC,OAAqE,SAAC9B,EAAUC,GAAa,IAAA8B,EACvF9B,IAA/B5b,EADsH0d,EACtH1d,KAAgBrB,EADsG+e,EAChHzd,OAAUtB,SAExBgd,EAASE,MACTF,EAASoB,MACTpB,EAASgC,GAAsB,KAC/B,IACIhU,EAAa3J,EAAKgL,KAAK,KACrB4D,EAAcjF,EAAa,YAAgC6T,EAC3D3O,EAAY,CAAC1Q,EAAKhB,MAExB,OAAiB,OAAbwB,GACFgd,EAASiC,MACTjC,EAAS2B,MACF3B,EAASO,GAAgB,mCAE9Bvd,EAAS,GAAGxB,MAAQgB,EAAKhB,MAC3Bwe,EAASiC,MACTjC,EAAS2B,MACF3B,EAASO,GAAgB,iDH9C7B,SAAP2B,EAAAC,EAAAC,EAAAC,GAAAC,GAAAhb,MAAAnB,KAAA7C,WGiDEif,CAAc,IAAMvU,EAAYhL,EAAS,GAAGxB,KAAMsgB,EAAgBD,QAElEW,GAAwBxU,EAlBE,WAmBvB9I,KAAK,SAAAob,GACJN,EAAS2B,MACT3B,EAASgC,GAAsB,MAC/BS,WAAW,SAAAC,GACT1C,EAASiC,OACR,KAEHO,GADAxU,GAAc,YACsB6T,GACjC3c,KAAK,SAAAob,GACJtS,GAAc,IAAM6T,EAAa,IACjCW,GAAqBne,EAAKgL,KAAK,KAAM4D,EAAaC,GAC/ChO,KAAK,SAAAob,GACJkC,GAAsBvP,EAAazQ,EAAKhB,KAAMgB,EAAKhB,KAAO,QACvDqE,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,QAC1B8B,GAAuBne,EAAKgL,KAAK,KAAMrM,GACpCkC,KAAK,SAAAob,GACJN,EAAS2B,QAEV9b,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,WACPT,EAASU,UAGd7a,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,UAE3B7a,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,UAE3B7a,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,WA4BtBiC,GAAiB,SAACte,EAAgB0J,GACtC,OAAOyU,GAAuBne,EAAKgL,KAAK,MAAQ,IAAMtB,GAGlD6U,GAAgB,WACpB,OAAOJ,GAAuB,oBAGnBK,GAAwB,SAAC9U,EAAkBZ,GAAnB,OAAgD,SAAC6S,EAAUC,GAAa,IACnG5b,EAAS4b,IAAT5b,KACR2b,EAASE,MAET,IAAI4C,EAAWH,GAAete,EAAM0J,GAChCgV,EAAcH,KAElBzV,EAAO,kHAAAvK,OAEQmgB,EAFR,0BAAAngB,OAGWkgB,EAHX,gGAOP/U,GAAY,OAEZiS,EAASE,MACTsC,GAAqBne,EAAKgL,KAAK,KAAMtB,EAAUZ,GAC5CjI,KAAK,SAAAob,GAEJ,OADAN,EAAS2B,MACFa,GAAuBne,EAAKgL,KAAK,QAEzCnK,KAAK,SAAA0V,GAAQ,OAAIA,EAASoI,KAAK,SAAAxgB,GAAI,OAAIA,EAAKygB,mBAAqBlV,MACjElI,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,UA6BfxT,GAAgB,SAACwF,EAA0BsL,GAA3B,OAA4D,SAACgC,EAAUC,GAAa,IACxG5b,EAAQ4b,IAAR5b,KACPme,GAAyBne,EAAKgL,KAAK,KAAM2O,EAActL,KAK5CwQ,GAAoB,SAACnV,GAAD,OAA+B,SAACiS,EAAUC,GAAa,IAC9E5b,EAAS4b,IAAT5b,KACR2b,EAASE,MAET,IAAI4C,EAAWH,GAAete,EAAM0J,GAChCgV,EAAcH,KAEdzV,EAAO,kHAAAvK,OAEImgB,EAFJ,0BAAAngB,OAGOkgB,EAHP,mMAAAlgB,OASSkgB,EATT,wFAaX/U,GAAY,OAEZiS,EAASE,MACTsC,GAAqBne,EAAKgL,KAAK,KAAMtB,EAAUZ,GAC5CjI,KAAK,SAAAob,GAEJ,OADAN,EAAS2B,MACFa,GAAuBne,EAAKgL,KAAK,QAEzCnK,KAAK,SAAA0V,GAAQ,OAAIA,EAASoI,KAAK,SAAAxgB,GAAI,OAAIA,EAAKygB,mBAAqBlV,MACjElI,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,UA0DfiB,GAAyB,kBAAe,SAAC3B,EAAUC,GAAa,IACnE5b,EAAS4b,IAAT5b,KACR2b,EAASE,MACTF,EAASoB,MACToB,GAAuBne,EAAKgL,KAAK,MAC9BnK,KAAK,SAAA3C,GAAK,OAAIyd,EAASmD,GAAS5gB,MAChCsD,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,UAMf0C,GAAkB,kBAAe,SAACpD,EAAUC,GAGvD,OF1RiC,SAAC5b,GAAiBqW,GAAMiC,OAAOV,GAAQ5X,IEyRxEme,CADiBvC,IAAT5b,KAC4BgL,KAAK,MAClC2Q,EAAS2B,QAmGlB,SAAS0B,GAAe5M,EAAY1I,GAClC,GAAItJ,OAAOM,UAAUue,iBACnB7e,OAAOM,UAAUue,iBAAiB7M,EAAM1I,OACrC,CACH,IAAMpD,EAAI4Y,SAASC,cAAc,KAC3Bxd,EAAMnC,IAAIC,gBAAgB2S,GAChC9L,EAAE8Y,KAAOzd,EACT2E,EAAE+Y,SAAW3V,EACbwV,SAAS7K,KAAKiL,YAAYhZ,GAC1BA,EAAEiZ,QACFnB,WAAW,WACTc,SAAS7K,KAAKmL,YAAYlZ,GAC1BlG,OAAOZ,IAAIE,gBAAgBiC,IAC1B,IAOA,IAQM8d,GAAiB,SAAC/V,GAAD,OAA+B,SAACiS,EAAUC,GAAa,IAC3E5b,EAAS4b,IAAT5b,KACR2b,EAASE,MACTF,EAAS+D,MAETvB,GAAuBne,EAAKgL,KAAK,KAAMtB,GACpC7I,KAAK,SAAAtB,GAAI,OAAIoc,EAASgE,GAAepgB,MACrCiC,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,UAqBfuD,GAAkB,SAAClW,GAAD,OAA+B,SAACiS,EAAUC,GACvED,EAAS8D,GAAe/V,IACxBiS,EAASkE,GAAWvjB,EAAQwjB,SAyBjBC,GAAqB,SAACrW,GAAD,OAA+B,SAACiS,EAAUC,GAC1ED,EAAS8D,GAAe/V,IACxBiS,EAASkE,GAAWvjB,EAAQ0jB,YAOjBC,GAA2B,kBAAe,SAACtE,EAAUC,GAChED,EAASkE,GAAWvjB,EAAQ4jB,UAwBjBlR,GAAc,SAAC9Q,GAAD,OAA4B,SAACyd,EAAUC,GAAa,IACrE5b,EAAS4b,IAAT5b,KACR2b,EAASE,MAET,IAAMhN,EAAY3Q,EAAMzD,IAAI,SAAA4jB,GAAC,OAAIA,EAAElhB,QF3bV,SAAC6C,EAAckZ,GAGtC,OAFAlZ,EAAO4X,GAAQ5X,GACfqW,GAAMiC,OAAOtY,GACRkZ,EAAUha,OAGR4Y,GAAgB9X,EAAMkZ,GACxB1X,MAAMqV,IAHAjQ,QAAQC,OAAO,uBEyb5BsX,CAAuBne,EAAKgL,KAAK,KAAM6D,GACpChO,KAAK,SAAAob,GAAC,OAAIN,EAAS2B,QACnB9b,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,UA4BftN,GAAY,SAAC7Q,EAADmS,KAAkB9T,KAAlB,IAA8B4jB,EAA9B9P,EAAwBrQ,KAAxB,OAA0F,SAAC2b,EAAUC,GAAa,IACjI5b,EAAS4b,IAAT5b,KACR2b,EAASE,MAET,IAAMjN,EAAcuR,EAAWnV,KAAK,KAC9B6D,EAAY3Q,EAAMzD,IAAI,SAAA4jB,GAAC,OAAIA,EAAElhB,QFtcZ,SAAC6C,EAAc4O,EAAqBsK,GAIzD,OAHAlZ,EAAO4X,GAAQ5X,GACf4O,EAAcgJ,GAAQhJ,GACtByH,GAAMiC,OAAOtY,EAAM4O,GACdsK,EAAUha,OAGR4Y,GAAc9X,EAAM4O,EAAasK,GACnC1X,MAAMqV,IAHAjQ,QAAQC,OAAO,qBEmc5BsX,CAAqBne,EAAKgL,KAAK,KAAM4D,EAAaC,GAC/ChO,KAAK,SAAAob,GACJN,EAAS2B,MACT3B,EAASyB,GAAY9gB,EAAQ8jB,SAE9B5e,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,UAOfgE,GAA6B,SAACC,GAAD,OAA6B,SAAC3E,EAAUC,GAAa,IAAA2E,EAC1B3E,IAA3D1d,MAAsBA,EAD+DqiB,EAC5EziB,YAA8B0iB,EAD8CD,EACxDviB,SAE/ByiB,EAAyBxkB,OAAAuC,EAAA,EAAAvC,CAAIukB,GAAepe,MAClD,IAAKqe,EACH,OAAO9E,EAASO,GAAgB,yEAElC,IAAMwE,EAA8BxiB,EAAMyiB,QAAQF,GAC5CG,EAAoB1iB,EAAMyiB,QAAQL,GAElCO,EAAY,SAACC,EAAaC,EAAeC,GAA7B,OAA6CD,GAASD,GAAOA,GAAOE,GAChFC,EAAQL,EAAoBF,EAChCxiB,EAAMH,OAAO,SAACI,EAAMsE,GAAP,OAAiBoe,EAAUpe,EAAOie,EAA6BE,KAC1E1iB,EAAMH,OAAO,SAACI,EAAMsE,GAAP,OAAiBoe,EAAUpe,EAAOme,EAAmBF,KAEtE/E,EAASuF,GAAW,GAAA3iB,OAAAtC,OAAAuC,EAAA,EAAAvC,CAAKukB,GAALvkB,OAAAuC,EAAA,EAAAvC,CAAuBglB,QAIhCE,GAAoB,kBAAe,SAACxF,EAAUC,GACzDD,EAASgC,GAAsB,IAC/BhC,EAASyB,GAAY9gB,EAAQ8kB,cAC7BzF,EAAS0F,QAGEzD,GAA0B,kBAAe,SAACjC,EAAUC,GAC/DD,EAASgC,GAAsB,IAC/BhC,EAASyB,GAAY9gB,EAAQglB,kBAC7B3F,EAAS0F,QAUEE,GAAwB,kBAAe,SAAC5F,EAAUC,GAC7DD,EAASgC,GAAsB,IAC/BhC,EAASyB,GAAY9gB,EAAQklB,kBAC7B7F,EAAS0F,QAIEI,GAAc,SAACzhB,GAAD,OAA6B,SAAC2b,EAAUC,GACjED,EAAS+F,GAAQ1hB,IACjB2b,EAASgG,MACThG,EAAS2B,QAGEsE,GAAoB,SAACzjB,GAAD,OAAyB,SAACwd,EAAUC,GACnE,IAAM5b,EAAO7B,EAAK6B,KAElB2b,EAAS8F,GAAYtjB,aAAgB0E,EAAW7C,EAA3B,GAAAzB,OAAAtC,OAAAuC,EAAA,EAAAvC,CAAsC+D,GAAtC,CAA4C7B,EAAKhB,WAiBlE0kB,GAAqF,SAAexiB,GAAf,OAAgC,SAACC,GAC1H,MAAO,CACLD,OACAC,WAISwiB,GAAoBD,GnB/rBE,uBmBgsBtBH,GAAUG,GnB/rBC,YmBgsBXE,GAAY,kBAAML,GAAQ,KAE1BnF,GAAcsF,GnBhsBE,iBmBisBhBrF,GAAeqF,GnBhsBE,kBmBisBjBnlB,GAAUmlB,GnB/rBC,YmBisBXvF,IADYuF,GnBjsBC,cmBksBFA,GnB/rBE,emBgsBbpF,GAAaoF,GnBjsBE,gBmBmsBf/C,GAAW+C,GnBhsBC,amBisBZG,GAAa,kBAAMlD,GAAS,KAK5BoC,IAHcW,GnBlsBC,gBmBqsBDA,GnBnsBC,iBmBosBfI,GAAa,SAAC9jB,GAAD,OAAgB+iB,GAAY,CAAC/iB,KAC1C4e,GAAqB,kBAAMmE,GAAY,KACvCgB,GAAqBL,GnBrsBE,wBmBwsBvBM,IAFeN,GnBrsBC,iBmBusBFA,GnBrsBC,iBmBssBfF,GAAcE,GnBrsBC,iBmBwsBfhG,GAAiBgG,GnBtsBC,mBmBusBlBxF,GAAcwF,GnBtsBC,gBmBwsBfnC,GAAmBmC,GnBtsBC,qBmBusBpBlC,GAAiBkC,GnBtsBC,mBmBusBlBO,GAAoBP,GnBpsBG,wBmBqsBvBR,GAAsB,kBAAMe,GAAkB,OAC9CzE,GAAwBkE,GnBvsBG,4BmBysB3BhC,GAAagC,GnBnsBC,emBosBdzE,GAAcyE,GnBnsBC,gBmBosBfQ,GAAkBR,GnBxsBE,qBmBysBpBS,GAAmBT,GnBxsBE,sBmB0sBrB3F,GAAkB2F,GnB1uBE,8KoBW3BU,oLACO,IAAAC,EAC2E1gB,KAAK2gB,MAA7EC,EADHF,EACGE,WAAYvkB,EADfqkB,EACerkB,KAAMwkB,EADrBH,EACqBG,YAAaC,EADlCJ,EACkCI,kBAAmBC,EADrDL,EACqDK,kBACpDC,EAAc,CAChBC,gBAAiBL,EAAaM,KAAI,UAAW7jB,GAE3C8jB,EAAY9kB,aAAgB0E,EAAY1E,EAAK+kB,iBAAmB,KACtE,OACIC,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAU,OAAOC,QAASV,EAAaW,cAAeV,EAAmBW,cAAeV,EAAmBW,gBAAed,GAC3HS,EAAA7c,EAAA6Y,cAACsE,GAAAnd,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACuE,GAAApd,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACwE,GAAArd,EAAD,CAAQsd,MAAOd,GACR3kB,aAAgB0E,EAAYsgB,EAAA7c,EAAA6Y,cAAC0E,GAAAvd,EAAD,MAAe6c,EAAA7c,EAAA6Y,cAAC2E,GAAAxd,EAAD,QAGtD6c,EAAA7c,EAAA6Y,cAAC4E,GAAAzd,EAAD,CAAc8c,UAAU,WAAWY,QAAS7lB,EAAKygB,iBAAkBqF,UAAWhB,aAf/EiB,aAuGJC,eAlES,SAACnlB,EAAiBolB,GACtC,MAAO,CACH1B,WAAY1jB,EAAMd,MAAMF,SAAS8B,SAASskB,EAASjmB,QAKhC,SAACwd,EAAsByI,GAC9C,MAAO,CACHxB,kBAAmB,WACf,IAAMzkB,EAAOimB,EAASjmB,KAElBA,aAAgB0E,EACZ1E,EAAKkmB,aACL1I,EAASiE,GAAgBzhB,EAAKhB,OACzBgB,EAAKmmB,UACV3I,EAASoE,GAAmB5hB,EAAKhB,OAC5BgB,EAAKomB,WACV5I,EAASsE,MAGbtE,EAASiG,GAAkBzjB,KAGnC0kB,kBAAmB,SAAC2B,GAChBA,EAAMC,iBACND,EAAME,kBAEN,IDqmBqBvmB,ECrmBjBR,EAAI,EACJC,EAAI,EAEJ4mB,EAAMG,uBAAuBC,YAC7BjnB,EAAI6mB,EAAMG,YAAYE,QACtBjnB,EAAI4mB,EAAMG,YAAYG,SAEjBN,EAAMG,uBAAuBI,YAClCpnB,EAAI6mB,EAAMG,YAAYK,QAAQ,GAAGC,MACjCrnB,EAAI4mB,EAAMG,YAAYK,QAAQ,GAAGE,OAGjC9jB,QAAQ+jB,KAAK,sBAAuBX,GAGpCA,EAAMY,SACNzJ,EAAS0E,GAA2B+D,EAASjmB,OAE7Cwd,GDmlBiBxd,ECnlBSimB,EAASjmB,KDmlBM,SAACwd,EAAUC,IAClCA,IAAxB1d,MAASF,SACW8B,SAAS3B,IAEtBwd,EAASsG,GAAW9jB,OCplBzBwd,EAAS0G,GAAgB,CAAE1kB,IAAGC,QAGlC+kB,YAAa,SAAC6B,GACVA,EAAME,kBAEFF,EAAMa,QACN1J,EAASuG,GAAmBkC,EAASjmB,OAC9BqmB,EAAMY,SACbzJ,EAAS0E,GAA2B+D,EAASjmB,OAE7Cwd,EAASuF,GAAY,CAACkD,EAASjmB,WAMhCgmB,CAA6C5B,WCtH7C,SAAS+C,KACpB,OACInC,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAU,wBAAf,kFCiBOmC,6BAhBA,SAACC,GAAD,OAAkBC,wBAAa,CAC5C7mB,SAAU,CACR8mB,OAA6B,GAArBF,EAAMG,QAAQC,SAcXL,CAVf,SAAgB9C,GACZ,OACIU,EAAA7c,EAAA6Y,cAAC0G,GAAAvf,EAAD,CAAMwf,WAAS,EAACC,QAAQ,UACpB5C,EAAA7c,EAAA6Y,cAAC6G,GAAA1f,EAAD,CAAkB8c,UAAWX,EAAMwD,QAAQrnB,SAAUsnB,MAAM,iBCNjEC,4LACO,IAAA3D,EACwB1gB,KAAK2gB,MAA1BvkB,EADHskB,EACGtkB,MAAOkoB,EADV5D,EACU4D,UACTC,EAAiBnoB,EAAMzD,IAAI,SAAC0D,EAAMmE,GACpC,OAAO6gB,EAAA7c,EAAA6Y,cAACmH,GAAD,CAAMnoB,KAAMA,EAAMmE,IAAKA,MAGlC,OAAO6gB,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAU,YAChBgD,EACEjD,EAAA7c,EAAA6Y,cAACoH,GAAD,MACAF,EAAennB,OAASmnB,EAAiBlD,EAAA7c,EAAA6Y,cAACqH,GAAD,cAVlCtC,cAmCjBuC,GAAc,SAACC,EAAeC,GAChC,OAAOD,EAAME,oBAAoBrmB,MAAMomB,EAAOC,sBAGnCzC,eAjBS,SAACnlB,GAIrB,MAAO,CACHd,MAJUc,EAAMd,MAAMJ,YACrBC,OAAO,SAAAI,GAAI,OAAIsoB,GAAYtoB,EAAKygB,iBAAkB5f,EAAMd,MAAMH,UAI/DqoB,UAAWpnB,EAAMe,UAKE,iBAAO,IAMnBokB,CAA6CgC,oQCb5D,IAYehC,eAZS,SAACnlB,GACrB,MAAO,IAGgB,SAAC2c,GACxB,MAAO,CACHgH,YAAa,WACThH,EAASkE,GAAWvjB,EAAQuqB,mBAKzB1C,CArCf,SAA4B1B,GAAgC,IAG9BqE,EAFnBnE,EAA4BF,EAA5BE,YAAaoE,EAAetE,EAAfsE,YAOpB,OACI5D,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,SANYyD,EAMcnE,EANW,WAC/CmE,IACAC,OAKI5D,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC+H,GAAA5gB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,qBCYZ,IAYejD,eAZS,SAACnlB,GACrB,MAAO,IAGgB,SAAC2c,GACxB,MAAO,CACHgH,YAAa,WACThH,EAASkE,GAAWvjB,EAAQ+qB,iBAKzBlD,CArCf,SAA0B1B,GAA8B,IAG1BqE,EAFnBnE,EAA4BF,EAA5BE,YAAaoE,EAAetE,EAAfsE,YAOpB,OACI5D,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,SANYyD,EAMcnE,EANW,WAC/CmE,IACAC,OAKI5D,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC0E,GAAAvd,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,uCCYZ,IAYejD,eAZS,SAACnlB,GACrB,MAAO,IAGgB,SAAC2c,GACxB,MAAO,CACHgH,YAAa,WACThH,EAASkE,GAAWvjB,EAAQ8kB,iBAKzB+C,CArCf,SAA0B1B,GAA8B,IAG1BqE,EAFlBnE,EAA6BF,EAA7BE,YAAaoE,EAAgBtE,EAAhBsE,YAOrB,OACI5D,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,SANYyD,EAMcnE,EANW,WAC/CmE,IACAC,OAKI5D,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACmI,GAAAhhB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,2BCbNxD,GAAQ,CACZsC,MAAO,SAGHqB,8MACJvoB,MAAQ,CACNwoB,SAAU,QAGZ7E,YAAc,SAAC6B,GACb/N,EAAKgR,SAAS,CAAED,SAAUhD,EAAMkD,mBAGlCX,YAAc,WACZtQ,EAAKgR,SAAS,CAAED,SAAU,gFAGnB,IACCA,EAAa1lB,KAAK9C,MAAlBwoB,SAER,OACErE,EAAA7c,EAAA6Y,cAAA,OAAKyE,MAAO,CAAC+D,WAAW,QACtBxE,EAAA7c,EAAA6Y,cAACyI,GAAAthB,EAAD,CAAY4f,MAAM,UAChBtC,MAAOA,GACPiE,aAAW,OACXC,YAAW3nB,QAAQqnB,GAAY,iBAAcroB,EAC7C4oB,gBAAc,OACd1E,QAASvhB,KAAK6gB,aACdQ,EAAA7c,EAAA6Y,cAAC6I,GAAA1hB,EAAD,OAGF6c,EAAA7c,EAAA6Y,cAAC8I,GAAA3hB,EAAD,CAAMkhB,SAAUA,EAAU9pB,KAAMyC,QAAQqnB,GAAWU,QAASpmB,KAAKilB,aAC/D5D,EAAA7c,EAAA6Y,cAACgJ,GAAD,CAAoBpB,YAAajlB,KAAKilB,cACtC5D,EAAA7c,EAAA6Y,cAACiJ,GAAD,CAAkBrB,YAAajlB,KAAKilB,cACpC5D,EAAA7c,EAAA6Y,cAACkJ,GAAD,CAAkBtB,YAAajlB,KAAKilB,uBA9BlBuB,IAAMpE,WA2CnBC,eAJS,iBAAO,IAEJ,iBAAO,IAEnBA,CAA6CoD,6CCnCtDgB,4LAEO,IAAA/F,EAC0E1gB,KAAK2gB,MAA5EwD,EADHzD,EACGyD,QAASuC,EADZhG,EACYgG,gBAAiBxoB,EAD7BwiB,EAC6BxiB,KAAMyoB,EADnCjG,EACmCiG,UAAWC,EAD9ClG,EAC8CkG,aAAcC,EAD5DnG,EAC4DmG,UAE3DC,EAAYzF,EAAA7c,EAAA6Y,cAAA,iBACZ0J,EAAW1F,EAAA7c,EAAA6Y,cAAA,QAAMkE,QAAS,kBAAMmF,GAAiB,IAAIM,aAAY,GACjEL,EADW,IACGzoB,EAAKd,OAAS0pB,EAAY,IAExCG,EAAW9sB,OAAAuC,EAAA,EAAAvC,CAAI+D,GAAMoC,OAASqmB,EAE9BO,EAAchpB,EAAKvF,IAAI,SAAC6gB,EAAK7Y,GAC/B,OAAO0gB,EAAA7c,EAAA6Y,cAAA,QAAM7c,IAAKG,EAAOqmB,aAAYrmB,EAAO4gB,QAAS,SAACxnB,GAAD,OAAO2sB,EAAgB/lB,KACxE0gB,EAAA7c,EAAA6Y,cAAA,YAAO7D,GADJ,IACkBtb,EAAKd,OAAQ,IAAMuD,EAAQmmB,EAAY,GADzD,UAKX,OACIzF,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAU,kBACXD,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAW6C,EAAQ8C,UACpB5F,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAASqF,EAAcxC,MAAM,UAAU7mB,KAAK,SAASukB,MAAO,CAACsF,QAASP,EAAY,cAAgB,SACtGxF,EAAA7c,EAAA6Y,cAACgK,GAAA7iB,EAAD,OAEHyiB,GAEL5F,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAW6C,EAAQtP,OAAQkS,EAAhC,IAA2CG,WAzB9B9E,cA4CdqB,yBA3DA,SAACC,GAAD,OAAkBC,wBAAa,CAC5CsD,SAAS9sB,OAAAmB,EAAA,EAAAnB,CAAA,CACPitB,QAAS,SACR1D,EAAM4D,YAAYC,GAAG,MAAQ,CAC5BH,QAAS,SAGbvS,MAAM1a,OAAAmB,EAAA,EAAAnB,CAAA,CACJitB,QAAS,QACR1D,EAAM4D,YAAYC,GAAG,MAAQ,CAC5BH,QAAS,aAiDA3D,CAAmBpB,YAFV,iBAAO,IAFJ,iBAAO,IAIAA,CAA6CoE,KC0E/E,IAsBehD,yBAjJA,SAACC,GAAD,OAAkBC,wBAAa,CAC5C9a,KAAM,CACJ2e,MAAO,OACPC,aAAc,SAEhBC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACV/B,YAAa,GACbgC,YAAa,IAEfC,MAAM3tB,OAAAmB,EAAA,EAAAnB,CAAA,CACJitB,QAAS,SACR1D,EAAM4D,YAAYC,GAAG,MAAQ,CAC5BH,QAAS,UAGbW,OAAO5tB,OAAAmB,EAAA,EAAAnB,CAAA,CACL6tB,SAAU,WACVC,aAAcvE,EAAMwE,MAAMD,aAC1BhH,gBAAiBkH,gBAAKzE,EAAM0E,QAAQC,OAAOC,MAAO,KAClDC,UAAW,CACTtH,gBAAiBkH,gBAAKzE,EAAM0E,QAAQC,OAAOC,MAAO,MAEpDzC,WAAY,EACZ2B,MAAO,OACPJ,QAAS,QACR1D,EAAM4D,YAAYC,GAAG,MAAQ,CAC5B1B,WAAYnC,EAAMG,QAAQC,KAC1B0D,MAAO,OACPJ,QAAS,UAGboB,WAAY,CACVhB,MAA4B,EAArB9D,EAAMG,QAAQC,KACrBM,MAAO,UACPqE,OAAQ,OACRT,SAAU,WACVU,cAAe,OACftB,QAAS,OACTuB,WAAY,SACZC,eAAgB,UAElBC,UAAW,CACTzE,MAAO,UACPoD,MAAO,QAETsB,YAAa,CACX1E,MAAO,WAET2E,WAAW5uB,OAAAmB,EAAA,EAAAnB,CAAA,CACT6uB,WAAYtF,EAAMG,QAAQC,KAC1BmF,aAAcvF,EAAMG,QAAQC,KAC5BoF,cAAexF,EAAMG,QAAQC,KAC7BqF,YAAkC,GAArBzF,EAAMG,QAAQC,KAC3BsF,WAAY1F,EAAM2F,YAAYC,OAAO,SACrC9B,MAAO,QACN9D,EAAM4D,YAAYC,GAAG,MAAQ,CAC5BC,MAAO,IACP+B,UAAW,CACT/B,MAAO,UAoFA/D,CAAmBpB,YAtBV,SAACnlB,GACrB,MAAO,CACHjB,OAAQiB,EAAMd,MAAMH,OACpBiC,KAAMhB,EAAMgB,KACZ2oB,UAAW3pB,EAAMgB,KAAKd,OAAS,IAIZ,SAACyc,GACxB,MAAO,CACH2P,aAAc,SAAC9G,GACX7I,EAASwG,GAAYqC,EAAMkD,cAAcpoB,SAE7CisB,YAAa,SAACC,GACZpqB,QAAQC,IAAI,cAAemqB,GAC3B7P,EVwhBiC,SAAC6P,GAAD,OAAwB,SAAC7P,EAAUC,GAC5ED,EAASmG,GAAkB0J,IAC3B7P,EAASoD,OU1hBQ0M,CAA4BD,KAEvCE,cAAe,kBAAM/P,EAASoD,SAKJoF,CA9ElC,SAAsB1B,GAA0B,IACtCwD,EAA+ExD,EAA/EwD,QAASjmB,EAAsEyiB,EAAtEziB,KAAMjC,EAAgE0kB,EAAhE1kB,OAAQwtB,EAAwD9I,EAAxD8I,YAAa5C,EAA2ClG,EAA3CkG,UAAW2C,EAAgC7I,EAAhC6I,aAAcI,EAAkBjJ,EAAlBiJ,cACrE,OACEvI,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAW6C,EAAQtb,MACtBwY,EAAA7c,EAAA6Y,cAACwM,GAAArlB,EAAD,CAAQwjB,SAAS,SACf3G,EAAA7c,EAAA6Y,cAACyM,GAAAtlB,EAAD,KACE6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8c,UAAW6C,EAAQ2D,MAAOxC,QAAQ,KAAKlB,MAAM,UAAU2F,QAAM,GACvE1I,EAAA7c,EAAA6Y,cAAC2M,GAAD,CACI9rB,KAAMA,EACNwoB,gBAAiB,SAAA/lB,GAAK,OAAI8oB,EAAYvrB,EAAKd,OAASuD,EAAQ,IAC5DimB,aAAc,kBAAM6C,EAAY,IAChC5C,UAAWA,EACXF,UAAU,aAGhBtF,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAW6C,EAAQuD,OAExBrG,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAW6C,EAAQ4D,QACtB1G,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAW6C,EAAQqE,YACtBnH,EAAA7c,EAAA6Y,cAAC4M,GAAAzlB,EAAD,OAEF6c,EAAA7c,EAAA6Y,cAAC6M,GAAA1lB,EAAD,CACE2lB,YAAY,eACZ3sB,MAAOvB,EACPmuB,SAAUZ,EACVrF,QAAS,CACPtb,KAAMsb,EAAQ0E,UACdwB,MAAOlG,EAAQ4E,eAIrB1H,EAAA7c,EAAA6Y,cAACyI,GAAAthB,EAAD,CAAY4f,MAAM,UAAU9C,UAAW6C,EAAQ2E,YAAa/C,aAAW,UAAUxE,QAASqI,GACxFvI,EAAA7c,EAAA6Y,cAACiN,GAAA9lB,EAAD,OAEF6c,EAAA7c,EAAA6Y,cAACkN,GAAD,0CCzFV,IAyBelI,eAzBS,SAACnlB,GACrB,MAAO,CACHwhB,cAAexhB,EAAMd,MAAMF,WAIR,SAAC2d,GACxB,MAAO,CACHgH,YAAa,SAACnC,GACV,IAAMriB,EAAOqiB,EAAc,GAEvBriB,aAAgB0F,EAChB8X,EAASiG,GAAkBzjB,IACtBA,aAAgB0E,IACjB1E,EAAKkmB,aACL1I,EAASiE,GAAgBzhB,EAAKhB,OACzBgB,EAAKmmB,UACV3I,EAASoE,GAAmB5hB,EAAKhB,OAC5BgB,EAAKomB,WACV5I,EAASsE,UAMdkE,CA5Cf,SAAoB1B,GAAwB,IAChCE,EAA+BF,EAA/BE,YAAanC,EAAkBiC,EAAlBjC,cACrB,OACI2C,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAAS,kBAAMV,EAAYnC,KACjC2C,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACmN,GAAAhmB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,gCCYZ,IAcejD,eAdS,SAACnlB,GACrB,MAAO,CACHwhB,cAAexhB,EAAMd,MAAMF,WAIR,SAAC2d,GACxB,MAAO,CACHgH,YAAa,SAACnC,GACV7E,EAAS3M,GAAYwR,OAKlB2D,CAjCf,SAAsB1B,GAA0B,IACpCE,EAA+BF,EAA/BE,YAAanC,EAAkBiC,EAAlBjC,cACrB,OACI2C,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAAS,kBAAMV,EAAYnC,KACjC2C,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACoN,GAAAjmB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,kCCYZ,IAYejD,eAZS,SAACnlB,GACrB,MAAO,IAGgB,SAAC2c,GACxB,MAAO,CACHgH,YAAa,WACThH,EAASkE,GAAWvjB,EAAQkwB,UAKzBrI,CA/Bf,SAAoB1B,GAAwB,IAChCE,EAAgBF,EAAhBE,YAER,OACIQ,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAAS,kBAAMV,MACrBQ,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACsN,GAAAnmB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,gCCWZ,IAYejD,eAZS,SAACnlB,GACrB,MAAO,IAGgB,SAAC2c,GACxB,MAAO,CACHgH,YAAa,WACThH,EAASkE,GAAWvjB,EAAQ8jB,UAKzB+D,CA/Bf,SAAoB1B,GAAwB,IAChCE,EAAgBF,EAAhBE,YAER,OACIQ,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAASV,GACfQ,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACuN,GAAApmB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,WCWZ,IAcejD,eAdS,SAACnlB,GACrB,MAAO,CACHwhB,cAAexhB,EAAMd,MAAMF,WAIR,SAAC2d,GACxB,MAAO,CACHgH,YAAa,SAACnC,GACV7E,EAASiE,GAAgBY,EAAc,GAAGrjB,UAKvCgnB,CAjCf,SAAoB1B,GAAwB,IAChCE,EAA+BF,EAA/BE,YAAanC,EAAkBiC,EAAlBjC,cACrB,OACI2C,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAAS,kBAAMV,EAAYnC,KACjC2C,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACmN,GAAAhmB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,gCCYZ,IAYejD,eAZS,SAACnlB,GACrB,MAAO,IAGgB,SAAC2c,GACxB,MAAO,CACHgH,YAAa,WACThH,EAASkE,GAAWvjB,EAAQqwB,YAKzBxI,CA/Bf,SAAoB1B,GAAwB,IAChCE,EAAgBF,EAAhBE,YAER,OACIQ,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAASV,GACfQ,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACyN,GAAAtmB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,kCCYZ,IAcejD,eAdS,SAACnlB,GACrB,MAAO,CACHwhB,cAAexhB,EAAMd,MAAMF,WAIR,SAAC2d,GACxB,MAAO,CACHgH,YAAa,SAACnC,GjBuYM,IAACtiB,EiBtYjByd,GjBsYiBzd,EiBtYKsiB,EjBsYsB,SAAC7E,EAAUC,GAAa,IACtE5b,EAAS4b,IAAT5b,KACR2b,EAASE,MAET,IAAMgR,EAAgC,IAAjB3uB,EAAMgB,QAAgBhB,EAAM,aAAc2F,EAA3C,GAAAtF,OACfL,EAAM,GAAGf,KADM,QAEhB,cAEJghB,GAAoBne,EAAKgL,KAAK,KAAM9M,GACjC2C,KAAK,SAAAyZ,GAAG,OAAIA,EAAIwS,cAAc,CAAEztB,KAAM,WACtCwB,KAAK,SAAAtB,GAAI,OAAI4e,GAAsBne,EAAKgL,KAAK,KAAM6hB,EAAattB,KAChEsB,KAAK,kBAAM8a,EAAS2B,QACpB9b,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,ciB9Yb8H,CAlCf,SAAmB1B,GAAuB,IAC9BE,EAA+BF,EAA/BE,YAAanC,EAAkBiC,EAAlBjC,cAErB,OACI2C,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAAS,kBAAMV,EAAYnC,KACjC2C,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC4N,GAAAzmB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,oCCYZ,IAcejD,eAdS,SAACnlB,GACrB,MAAO,CACHwhB,cAAexhB,EAAMd,MAAMF,WAIR,SAAC2d,GACxB,MAAO,CACHgH,YAAa,SAACnC,GlB0ZQ,IAAC9W,EkBzZnBiS,GlByZmBjS,EkBzZK8W,EAAc,GAAGrjB,KlByZQ,SAACwe,EAAUC,GAAa,IAC3E5b,EAAS4b,IAAT5b,KACR2b,EAASE,MAETsC,GAA6Bne,EAAKgL,KAAK,KAAMhL,EAAKgL,KAAK,KAAMtB,GAC1D7I,KAAK,SAAAob,GAAC,OAAIN,EAAS2B,QACnB9b,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,ckB3Zb8H,CAlCf,SAAuB1B,GAA2B,IACvCE,EAA8BF,EAA9BE,YAAanC,EAAiBiC,EAAjBjC,cAEpB,OACI2C,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAAS,kBAAMV,EAAYnC,KACjC2C,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC6N,GAAA1mB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,wCCcZ,IAcejD,eAdS,SAACnlB,GACrB,MAAO,CACHwhB,cAAexhB,EAAMd,MAAMF,WAIR,SAAC2d,GACxB,MAAO,CACHgH,YAAa,SAACnC,GnBuWO,IAACtiB,EmBtWlByd,GnBsWkBzd,EmBtWKsiB,EnBsWN,eAAArQ,EAAAlU,OAAA6a,EAAA,EAAA7a,CAAAoK,EAAAC,EAAAyQ,KAA4B,SAAA7K,EAAOyP,EAAUC,GAAjB,IAAAqR,EAAAjtB,EAAAT,EAAA2tB,EAAA5S,EAAA,OAAAjU,EAAAC,EAAAC,KAAA,SAAA4F,GAAA,cAAAA,EAAA7O,KAAA6O,EAAA1F,MAAA,UAAAwmB,EACtCrR,IAAT5b,EAD+CitB,EAC/CjtB,KACR2b,EAASE,MAF8C1P,EAAA7O,KAAA,EAMjD4vB,EAAehvB,EAAM,GAAGf,OACP,IAAjBe,EAAMgB,QAAgBhB,EAAM,aAAc2E,GAPO,CAAAsJ,EAAA1F,KAAA,gBAAA0F,EAAA1F,KAAA,EAQtC0X,GAAuBne,EAAKgL,KAAK,KAAM9M,EAAM,GAAGf,MARV,OAQnDoC,EARmD4M,EAAA4B,KAAA5B,EAAA1F,KAAA,wBAAA0F,EAAA1F,KAAA,GAWjC0X,GAAoBne,EAAKgL,KAAK,KAAM9M,GAXH,eAW7Coc,EAX6CnO,EAAA4B,KAAA5B,EAAA1F,KAAA,GAYtC6T,EAAIwS,cAAc,CAAEztB,KAAM,SAZY,QAYnDE,EAZmD4M,EAAA4B,KAc/C7P,EAAMgB,OAAS,IACjBguB,EAAe,WACjBA,EAAY,GAAA3uB,OAAM2uB,EAAN,QAhBuC,QAmBrDlO,GAAezf,EAAM2tB,GAnBgC/gB,EAAA1F,KAAA,iBAAA0F,EAAA7O,KAAA,GAAA6O,EAAAiK,GAAAjK,EAAA,SAsBrDwP,EAASO,GAAgBC,OAAMhQ,EAAAiK,MAtBsB,QAwBvDuF,EAASU,MAxB8C,yBAAAlQ,EAAArF,SAAAoF,EAAA,kBAA5B,gBAAAV,EAAAO,GAAA,OAAAoE,EAAAlN,MAAAnB,KAAA7C,YAAA,QmBjWdklB,CApCf,SAAwB1B,GAA4B,IACxCE,EAA+BF,EAA/BE,YAAanC,EAAkBiC,EAAlBjC,cACrB,OACI2C,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAAS,kBAAMV,EAAYnC,KACjC2C,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACgO,GAAA7mB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WACW,IAAzB5G,EAActhB,QAAgBshB,EAAc,aAAc3d,EACxD,WACE,wCCStB,IAceshB,eAdS,SAACnlB,GACrB,MAAO,CACHwhB,cAAexhB,EAAMd,MAAMF,WAIR,SAAC2d,GACxB,MAAO,CACHgH,YAAa,SAACnC,GpB0bM,IAACriB,EoBzbjBwd,GpBybiBxd,EoBzbKqiB,EAAc,GpBybK,SAAC7E,EAAUC,GAC9Dxb,OAAO1C,KAAKS,EAAKwD,IAAK,gBoBrbTwiB,CAjCf,SAA4B1B,GAAgC,IAChDE,EAA+BF,EAA/BE,YAAanC,EAAkBiC,EAAlBjC,cACrB,OACI2C,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAAS,kBAAMV,EAAYnC,KACjC2C,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACiO,GAAA9mB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,sBCYZ,IAYejD,eAZS,SAACnlB,GACrB,MAAO,IAGgB,SAAC2c,GACxB,MAAO,CACHgH,YAAa,WACThH,EAASkE,GAAWvjB,EAAQklB,qBAKzB2C,CA/Bf,SAA8B1B,GAAkC,IACpDE,EAAgBF,EAAhBE,YAER,OACIQ,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAASV,GACfQ,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACmI,GAAAhhB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,2CCcZ,IAeejD,eAfS,SAACnlB,GACrB,MAAO,CAACwhB,cAAexhB,EAAMd,MAAMF,WAGZ,SAAC2d,GACxB,MAAO,CACHgH,YAAa,SAACnC,GtBgfkB,IAAC9W,EsB/e7BiS,GtB+e6BjS,EsB/eK8W,EAAc,GAAGrjB,KtB+eQ,SAACwe,EAAUC,GAChFD,EAAS8D,GAAe/V,EAAW,SACnCiS,EAASkE,GAAWvjB,EAAQ+wB,uBsBzeflJ,CApCf,SAA6B1B,GAAiC,IAElDE,EAA+BF,EAA/BE,YAAanC,EAAkBiC,EAAlBjC,cAErB,OACI2C,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAAS,kBAAMV,EAAYnC,KACjC2C,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACmO,GAAAhnB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,qBCgBZ,IAcejD,eAdS,SAACnlB,GACrB,MAAO,CACHwhB,cAAexhB,EAAMd,MAAMF,WAIR,SAAC2d,GACxB,MAAO,CACHgH,YAAa,SAACnC,GvBkeU,IAAC9W,EuBjerBiS,GvBieqBjS,EuBjeK8W,EAAc,GAAGrjB,KvBieQ,SAACwe,EAAUC,GACxED,EAAS8D,GAAe/V,EAAW,SACnCiS,EAASkE,GAAWvjB,EAAQglB,wBuB9df6C,CAvCf,SAA6B1B,GAAiC,IAClDE,EAA+BF,EAA/BE,YAAanC,EAAkBiC,EAAlBjC,cAMrB,OACI2C,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAAS,kBAAMV,EAAYnC,KACjC2C,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACmI,GAAAhhB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,sBCOZ,IAcejD,eAdS,SAACnlB,GACrB,MAAO,CACHwhB,cAAexhB,EAAMd,MAAMF,WAGR,SAAC2d,GACxB,MAAO,CACHgH,YAAa,SAACnC,GxBoeY,IAAC9W,EwBnevBiS,GxBmeuBjS,EwBneK8W,EAAc,GAAGrjB,KxBmeQ,SAACwe,EAAUC,GAC1ED,EAAS8D,GAAe/V,IACxBiS,EAASkE,GAAWvjB,EAAQ+gB,wBwB/df8G,CAjCf,SAA8B1B,GAAkC,IACpDE,EAA+BF,EAA/BE,YAAanC,EAAkBiC,EAAlBjC,cACrB,OACI2C,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAAS,kBAAMV,EAAYnC,KACjC2C,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACsN,GAAAnmB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,2CCWZ,IAaejD,eAbS,SAACnlB,GACrB,MAAO,IAGgB,SAAC2c,GACxB,MAAO,CACHgH,YAAa,WACT4K,MAAM,mBAMHpJ,CAhCf,SAA6B1B,GAAiC,IAClDE,EAAgBF,EAAhBE,YAER,OACIQ,EAAA7c,EAAA6Y,cAAC6H,GAAA1gB,EAAD,CAAU+c,QAAS,kBAAMV,MACrBQ,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACqO,GAAAlnB,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,WAApB,qBCINqG,oLAEO,IAAAjL,EACwB1gB,KAAK2gB,MAA1BiL,EADHlL,EACGkL,KAAMhwB,EADT8kB,EACS9kB,KAAMC,EADf6kB,EACe7kB,EAAGC,EADlB4kB,EACkB5kB,EAEvB,OACIulB,EAAA7c,EAAA6Y,cAAA,WACIgE,EAAA7c,EAAA6Y,cAAC8I,GAAA3hB,EAAD,CACIqnB,gBAAgB,iBAChBC,eAAgB,CAAEC,IAAKjwB,EAAGkwB,KAAMnwB,GAChCowB,gBAAiB,CACbC,SAAU,MACVC,WAAY,QAEhBvwB,KAAMA,EACNwqB,QAAS,aACTgG,WAAY,CAAEtK,MAAO,CAAE0F,MAAO,OAC7BoE,EAAK5tB,SAAS,SAAWqjB,EAAA7c,EAAA6Y,cAACgP,GAAD,MACzBT,EAAK5tB,SAAS,iBAAmBqjB,EAAA7c,EAAA6Y,cAACiP,GAAD,MACjCV,EAAK5tB,SAAS,mBAAqBqjB,EAAA7c,EAAA6Y,cAACkP,GAAD,MACnCX,EAAK5tB,SAAS,kBAAoBqjB,EAAA7c,EAAA6Y,cAACmP,GAAD,MAClCZ,EAAK5tB,SAAS,kBAAoBqjB,EAAA7c,EAAA6Y,cAACoP,GAAD,MAClCb,EAAK5tB,SAAS,mBAAqBqjB,EAAA7c,EAAA6Y,cAACqP,GAAD,MACnCd,EAAK5tB,SAAS,kBAAoBqjB,EAAA7c,EAAA6Y,cAACsP,GAAD,MAClCf,EAAK5tB,SAAS,aAAeqjB,EAAA7c,EAAA6Y,cAACuP,GAAD,MAC7BhB,EAAK5tB,SAAS,aAAeqjB,EAAA7c,EAAA6Y,cAACwP,GAAD,MAC7BjB,EAAK5tB,SAAS,YAAcqjB,EAAA7c,EAAA6Y,cAACyP,GAAD,MAC5BlB,EAAK5tB,SAAS,SAAWqjB,EAAA7c,EAAA6Y,cAAC0P,GAAD,MACzBnB,EAAK5tB,SAAS,SAAWqjB,EAAA7c,EAAA6Y,cAAC2P,GAAD,MACzBpB,EAAK5tB,SAAS,SAAWqjB,EAAA7c,EAAA6Y,cAAC4P,GAAD,MACzBrB,EAAK5tB,SAAS,WAAaqjB,EAAA7c,EAAA6Y,cAAC6P,GAAD,MAC3BtB,EAAK5tB,SAAS,WAAaqjB,EAAA7c,EAAA6Y,cAAC8P,GAAD,eA/BtB/K,aA8DpBgL,GAA6B,SAAChxB,GAChC,OAAwB,IAAjBA,EAAMgB,OACTiwB,GAAkBjxB,EAAM,IACtB,CACE,OACA,OACA,SACA,WACA,aAONixB,GAAoB,SAAChxB,GASvB,SAAAI,OARsB,CAClB,eACA,OACA,OACA,SACA,SACA,YAEJtC,OAAAuC,EAAA,EAAAvC,CAESkC,aAAgB0E,EACjBusB,GAAkBjxB,GAChBkxB,GAAoBlxB,MAO5BixB,GAAoB,SAAChd,GACvB,IAAMkd,EAAU,CAAC,iBASjB,OARCld,EAAKmd,mBAAsBD,EAAQ1pB,KAAK,iBACzCwM,EAAKiS,cAAgBiL,EAAQ1pB,KAAK,QAClCwM,EAAKod,iBAAmBF,EAAQ1pB,KAAK,YACpCwM,EAAKkS,WAAalS,EAAKmS,YAAc+K,EAAQ1pB,KAAK,SAClDwM,EAAKqd,cAAgBH,EAAQ1pB,KAAK,kBACnCwM,EAAKqd,cAAgBH,EAAQ1pB,KAAK,kBAClCwM,EAAKsd,iBAAmBJ,EAAQ1pB,KAAK,iBAE9B0pB,GAMLD,GAAsB,SAAC3U,GACzB,MAAO,CACH,OACA,aAKOyJ,eA1ES,SAACnlB,GACrB,MAAO,CACHrB,EAAGqB,EAAMW,YAAYhC,EACrBC,EAAGoB,EAAMW,YAAY/B,EACrBF,KAAMsB,EAAMW,YAAYjC,KACxBgwB,KAAMwB,GAA2BlwB,EAAMd,MAAMF,YAI1B,iBAAO,IAiEnBmmB,CAA6CsJ,kHCzItDkC,eAKF,SAAAA,EAAYlN,GAA4B,IAAAhM,EAAA,OAAAxa,OAAA4F,EAAA,EAAA5F,CAAA6F,KAAA6tB,IACpClZ,EAAAxa,OAAA8G,EAAA,EAAA9G,CAAA6F,KAAA7F,OAAA+G,EAAA,EAAA/G,CAAA0zB,GAAAC,KAAA9tB,KAAM2gB,KALFoN,aAIgC,EAAApZ,EAHhCqZ,YAGgC,EAAArZ,EAFhCsZ,gBAEgC,EAGpCtZ,EAAKqZ,OAAS,GACdrZ,EAAKsZ,YAAc,EACnBtZ,EAAKoZ,QAAUG,eACfvZ,EAAKoZ,QAAQI,OAAO,SAAC5vB,EAAUjB,GAC3B,OAAOA,GACH,IAAK,MACDqX,EAAKyZ,UAAU7vB,GACf,MACJ,IAAK,UACDoW,EAAK0Z,cAAc9vB,GACnB,MACJ,IAAK,OACDoW,EAAK2Z,WAAW/vB,MAfQoW,oFAqBnB,IAAA+L,EACM1gB,KAAK2gB,MAApBlmB,EADSimB,EACTjmB,KAAMyD,EADGwiB,EACHxiB,KAGd,GAAa,OAATzD,EAAJ,CAEA,GAA2B,IAAvBuF,KAAKguB,OAAO5wB,QAAgB4C,KAAKiuB,WAAa,EAC9C,OAAOjuB,KAAKuuB,uBAEhB,IAAMC,EAAYxuB,KAAKguB,OAAOhuB,KAAKiuB,YAE9BQ,GAAe,CAAEh0B,OAAMyD,QAAQswB,IAChCxuB,KAAKuuB,uEAGU,IAAAG,EACI1uB,KAAK2gB,MAApBlmB,EADWi0B,EACXj0B,KAAMyD,EADKwwB,EACLxwB,KACR2B,EAAM8uB,UAAS,GAAAlyB,OAAIhC,EAAJ,KAAAgC,OAAYyB,EAAKgL,KAAK,OACrC0lB,EAAW,CACbn0B,KAAMA,GAAQ,GACdyD,OACAyC,MAAOX,KAAKiuB,WAAa,GAG7BjuB,KAAK+tB,QAAQjqB,KAAb,QAAArH,OAA0BoD,GAAO+uB,qCAG3BrwB,GACNyB,KAAKiuB,WAAa1vB,EAASrB,MAAMyD,MACjCX,KAAK2gB,MAAMyN,UAAU7vB,yCAGXA,GACVyB,KAAKguB,OAAOhuB,KAAKiuB,YAAc1vB,EAASrB,yCAGjCqB,GACPyB,KAAKguB,OAAL,GAAAvxB,OAAAtC,OAAAuC,EAAA,EAAAvC,CAAkB6F,KAAKguB,OAAOjzB,MAAM,IAAKiF,KAAKiuB,aAA9C,CAA2D1vB,EAASrB,yCAMpE,OAAOmkB,EAAA7c,EAAA6Y,cAAAgE,EAAA7c,EAAAqqB,SAAA,aArEczM,aAuHhB0M,GAA2B,SAACvsB,GACrC,IAAM1C,EAAM,IAAInC,IAAI6E,GAIpB,MAAO,CACH9H,KAJSoF,EAAIkvB,OAKb7wB,KAJS2B,EAAI2C,SAASC,MAAM,KAAKxG,OAAO,SAAAyE,GAAG,MAAY,KAARA,MAQjD+tB,GAAiB,SAAC7J,EAAmBC,GACvC,OAAOD,EAAMnqB,OAASoqB,EAAOpqB,MACnBmqB,EAAM1mB,KAAKd,SAAWynB,EAAO3mB,KAAKd,QAClCwnB,EAAM1mB,KAAKuC,MAAM,SAACC,EAAKC,GAAN,OAAgBD,IAAQmkB,EAAO3mB,KAAKyC,MAGpD0hB,eA5CS,SAACnlB,GAAD,MAAkC,CACtDzC,KAAMyC,EAAMD,QAAQxC,KACpByD,KAAMhB,EAAMgB,OAGW,SAAC2b,GACxB,MAAO,CACHuU,UAAW,SAAC7vB,GACR,IAAI9D,EAAO,GACPyD,EAAiB,GAErB,GAAIK,GAAsC,qBAAnBA,EAASrB,MAA4B,KAAA8xB,EACtCzwB,EAASrB,MAAxBzC,EADqDu0B,EACrDv0B,KAAMyD,EAD+C8wB,EAC/C9wB,SAER,CACD,IACM2B,EADS,IAAIovB,gBAAgB1wB,EAASwpB,OAAOrO,OAAO,IACvC5Y,IAAI,OACvB,GAAY,OAARjB,EAAc,KAAAqvB,EACIJ,GAAyBjvB,GAAxCpF,EADWy0B,EACXz0B,KAAMyD,EADKgxB,EACLhxB,MAGjB2b,EAASjf,GAAQH,IACjBof,EAAS8F,GAAYzhB,OAsBlBmkB,CAA6CwL,IC/HtDsB,8MACFjyB,MAAQ,CACJqB,SAAU,6FAGYoiB,GAA4B,IAC1CyO,EAAsBzO,EAAtByO,WAAYl0B,EAAUylB,EAAVzlB,MAEdm0B,EADS,IAAIJ,gBAAgB7R,SAAS7e,SAASwpB,OAAOrO,OAAO,IACzC5Y,IAAI,OAE9B,GAAmB,OAAfuuB,EAAqB,CACrB,IAAM9wB,EAAWqC,UAAUyuB,GAC3BrvB,KAAK2lB,SAAS,CAAEpnB,kBAEf,GAAI6wB,GAAcl0B,EAAO,CAC1B,IAAMqD,EAAY,IAAIb,IAAIxC,GAAQ6zB,OAClC/uB,KAAK2lB,SAAS,CAAEpnB,mDAIXmkB,GACT,IAAM4M,EAAa5M,EAAMkD,cAAc2J,KACvC,GAAID,EAAY,CACZ,IAAMjF,EAAQiF,EAAWE,cAAc,SACvC,GAAInF,EAAO,CACP,IAAM9rB,EAAW8rB,EAAM7sB,MAEvB,YADAwC,KAAK2lB,SAAS,CAAEpnB,cAIxBe,QAAQC,IAAI,qEAGHmjB,GACT1iB,KAAK2gB,MAAM8O,aAAa/M,EAAO,CAAEnkB,SAAUyB,KAAK9C,MAAMqB,4CAGjD,IACCA,EAAayB,KAAK9C,MAAlBqB,SACNA,EAAWA,GAAsB,GAF5B,IAAAmiB,EAGuE1gB,KAAK2gB,MAAzEsE,EAHHvE,EAGGuE,YAAayK,EAHhBhP,EAGgBgP,YAAaC,EAH7BjP,EAG6BiP,aAAc/zB,EAH3C8kB,EAG2C9kB,KAAMwzB,EAHjD1O,EAGiD0O,WAAYl0B,EAH7DwlB,EAG6DxlB,MAElE,OACImmB,EAAA7c,EAAA6Y,cAACuS,GAAAprB,EAAD,CAAQ5I,KAAMA,EAAMwqB,QAASnB,EAAa4K,kBAAgB,8BAA8BC,WAAW,EAAMC,SAAU,MAC/G1O,EAAA7c,EAAA6Y,cAAA,YACIgE,EAAA7c,EAAA6Y,cAAC2S,GAAAxrB,EAAD,CAAa5K,GAAG,+BAAhB,+BACAynB,EAAA7c,EAAA6Y,cAAC4S,GAAAzrB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,QAAQ4K,cAAY,GAClCd,EAEI,gBAAkBl0B,EAAQ,IAD5B,gFAINk0B,EAEI/N,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ8gB,QAAQ,WAAW/D,QAASoO,GAApC,UADFtO,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ8gB,QAAQ,WAAWlB,MAAM,UAAU7C,QAASmO,GAApD,SAIJrO,EAAA7c,EAAA6Y,cAACgI,GAAA7gB,EAAD,CAAY8gB,QAAQ,SAApB,sDAGAjE,EAAA7c,EAAA6Y,cAAC8S,GAAA3rB,EAAD,CAAW4rB,WAAS,EAACN,WAAS,EAC1BlM,OAAO,SACPyM,MAAM,mBACN/K,QAAQ,WACR8E,SAAUpqB,KAAKwpB,aAAa8G,KAAKtwB,MACjCxC,MAAOe,KAEf8iB,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAAS0D,EAAab,MAAM,UAAU7mB,KAAK,UAAnD,UAGA8jB,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ4f,MAAM,UAAU7mB,KAAK,SAASgkB,QAASvhB,KAAKyvB,aAAaa,KAAKtwB,OAAtE,4BAxECoiB,aAiIVC,eAnCS,SAACnlB,GACrB,MAAO,CACHtB,KAAMsB,EAAMY,eAAe0yB,gBAC3Bt1B,MAAOgC,EAAMD,QAAQ/B,MACrBk0B,WAAYlyB,EAAMD,QAAQhC,WAIP,SAAC4e,GACxB,MAAO,CACHoL,YAAa,WACTpL,EAASyB,GAAY9gB,EAAQg2B,mBAEjCd,YAAa,SAAAhN,GACTA,EAAMC,iBACN9I,EAASD,OAEb+V,aAAc,SAAAjN,GACVA,EAAMC,iBACN9I,E5BjF8B,SAACA,EAAUC,GACnDD,EAASE,MAETxP,YACGxL,KAAK,WACJ8a,EAASoG,MACTpG,EAASqG,MACTrG,EAASoB,MACTpB,EAASa,MACTb,EAASc,MAETd,EAASkE,GAAWvjB,EAAQg2B,oBAE7B9wB,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,W4BqEpBkV,aAAc,SAAC/M,EAAD9e,GAAyB,IAAfrF,EAAeqF,EAAfrF,SAEpB,GADAmkB,EAAMC,kBACDpkB,EACD,OAAOsb,EAASO,GAAgB,mDAHD,IAAA8U,EAKZJ,GAAyBvwB,GAAxC9D,EAL2By0B,EAK3Bz0B,KAAMyD,EALqBgxB,EAKrBhxB,KACd2b,EAASyB,GAAY9gB,EAAQg2B,kBAC7B3W,EAASjf,GAAQH,IACjBof,EAASgB,MACThB,EAAS8F,GAAYzhB,OAKlBmkB,CAA6C8M,ICpItDA,8MAEFjyB,MAAQ,CACJuzB,YAAa,KACbzpB,QAAS,MACT/I,SAAS,uFAIL+B,KAAK2gB,MAAM+P,UAAY1wB,KAAK9C,MAAMuzB,cAClCzwB,KAAK2lB,SAAS,CACV8K,YAAazwB,KAAK2gB,MAAM+P,UAE5B1wB,KAAK2lB,SAAS,CACV1nB,SAAS,sCAKZ,IAAAyiB,EACyB1gB,KAAK2gB,MAA3BsE,EADHvE,EACGuE,YAAarpB,EADhB8kB,EACgB9kB,KACrB,OACEylB,EAAA7c,EAAA6Y,cAAA,OAAKyE,MAAO,CAAC+D,WAAW,QACtBxE,EAAA7c,EAAA6Y,cAACuS,GAAAprB,EAAD,CAAQ5I,KAAMA,EAAMwqB,QAASnB,EAAa4K,kBAAgB,sBAAsBC,WAAW,EAAMC,SAAU,MACzG1O,EAAA7c,EAAA6Y,cAAC2S,GAAAxrB,EAAD,CAAa5K,GAAG,uBAAhB,iBACAynB,EAAA7c,EAAA6Y,cAAC4S,GAAAzrB,EAAD,KACE6c,EAAA7c,EAAA6Y,cAAA,OAAKsT,IAAK3wB,KAAK2gB,MAAM+P,QAASE,IAAI,GAAG9O,MAAO,CAACiO,SAAU,WAEzD1O,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACE6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAAS0D,EAAab,MAAM,UAAU7mB,KAAK,UAAnD,mBA7BS6kB,aA4DVC,eAfS,SAACnlB,GACrB,MAAO,CACHtB,KAAMsB,EAAMY,eAAeogB,QAC3BwS,QAASxzB,EAAMO,WAAQJ,IAIJ,SAACwc,GACxB,MAAO,CACHoL,YAAa,WACTpL,EAASyB,GAAY9gB,EAAQ0jB,aAK1BmE,CAA6C8M,yBCzDtDA,4LACO,IAAAzO,EAC+B1gB,KAAK2gB,MAAjCrQ,EADHoQ,EACGpQ,KAAM2U,EADTvE,EACSuE,YAAarpB,EADtB8kB,EACsB9kB,KAGrBiE,GADWyQ,GAAOA,EAAKjV,KACjBiV,EAAOA,EAAKzQ,SAAMxC,GAExBE,GADW+S,GAAQA,EAAKugB,UACjBvgB,EAAQA,EAAKugB,UAAY,QAAU,aAAWxzB,GAE3D,OACIgkB,EAAA7c,EAAA6Y,cAACuS,GAAAprB,EAAD,CAAQ5I,KAAMA,EAAMwqB,QAASnB,EAAa4K,kBAAgB,4BAA4BC,WAAW,EAAMC,SAAU,MAC7G1O,EAAA7c,EAAA6Y,cAAC2S,GAAAxrB,EAAD,CAAa5K,GAAG,6BAAhB,iBACAynB,EAAA7c,EAAA6Y,cAAC4S,GAAAzrB,EAAD,KAEQ8L,EAEQ+Q,EAAA7c,EAAA6Y,cAAA,WACIgE,EAAA7c,EAAA6Y,cAAA,oBAAY/M,EAAKjV,MACjBgmB,EAAA7c,EAAA6Y,cAACyT,GAAAtsB,EAAD,CAAMjH,KAAMA,EAAoCsC,IAAKA,EAAKkxB,QAAQ,4BAGxE1P,EAAA7c,EAAA6Y,cAAA,kCAIdgE,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAAS0D,EAAab,MAAM,UAAU7mB,KAAK,UAAnD,kBA1BK6kB,cA+DVC,eAtBS,SAACnlB,GACrB,IAAMtB,EAAOsB,EAAMY,eAAesgB,MAE5B9N,EAAOpT,EAAMd,MAAMF,SAAS,GAElC,OAAIoU,aAAgBvP,EACL,CACHnF,OACA0U,QAGL,CAAE1U,SAGc,SAACie,GACxB,MAAO,CACHoL,YAAa,WACTpL,EAASyB,GAAY9gB,EAAQ4jB,WAK1BiE,CAA6C8M,yBChEtDA,8MACM6B,UAAkDC,wBAC1D/zB,MAAQ,CACJuzB,YAAa,KACbzpB,QAAS,KACT/I,SAAS,uFAGQ,IAAAizB,EAAAlxB,KACbA,KAAK2gB,MAAM+P,UAAY1wB,KAAK9C,MAAMuzB,cAClCzwB,KAAK2lB,SAAS,CACV8K,YAAazwB,KAAK2gB,MAAM+P,UAE5B1wB,KAAK2lB,SAAS,CACV1nB,SAAS,IAGb+B,KAAK2gB,MAAM+P,SAAWS,MAAMnxB,KAAK2gB,MAAM+P,SAAS3xB,KAAK,SAAAob,GACjD,OAAOA,EAAE/V,SACVrF,KAAK,SAAAqyB,GACJF,EAAKvL,SAAS,CACV3e,QAASoqB,IAEbF,EAAKvL,SAAS,CACV1nB,SAAS,0CAMdykB,GACPA,EAAMC,iBACN,IAAMqO,EAAYhxB,KAAKgxB,UAAUK,QAC3Bh1B,EAAO2D,KAAK2gB,MAAMtkB,KACxB,GAAI20B,GAAa30B,EAAM,CACnB,IAAM2K,EAAUgqB,EAAUxzB,MAC1BwC,KAAK2gB,MAAM8O,aAAa/M,EAAO,CAC3B1Q,SAAU3V,EAAKhB,KACf2L,8CAKH,IAAA0Z,EAC+B1gB,KAAK2gB,MAAjCsE,EADHvE,EACGuE,YAAarpB,EADhB8kB,EACgB9kB,KAAMS,EADtBqkB,EACsBrkB,KACrB2V,EAAW3V,EAAOA,EAAKygB,iBAAmB,mBAK1CwU,EAAWjQ,EAAA7c,EAAA6Y,cAAA,YAAUyE,MAJL,CAClB0F,MAAO,OACP+J,UAAW,SAEkCC,aAAcxxB,KAAK9C,MAAM8J,SAAW,GAAIyqB,IAAKzxB,KAAKgxB,YAEnG,OACI3P,EAAA7c,EAAA6Y,cAAA,WACEgE,EAAA7c,EAAA6Y,cAACuS,GAAAprB,EAAD,CAAQ5I,KAAMA,EAAMwqB,QAASnB,EAAa4K,kBAAgB,mBAAmBC,WAAW,EAAMC,SAAU,MACtG1O,EAAA7c,EAAA6Y,cAAA,YACEgE,EAAA7c,EAAA6Y,cAAC2S,GAAAxrB,EAAD,CAAa5K,GAAG,oBAAhB,iBAAkDoY,EAAlD,KACAqP,EAAA7c,EAAA6Y,cAAC4S,GAAAzrB,EAAD,KACE6c,EAAA7c,EAAA6Y,cAACqU,GAAAltB,EAAD,KACGxE,KAAK9C,MAAMe,QAAU,aAAeqzB,IAGzCjQ,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACE6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAAS0D,EAAab,MAAM,UAAU7mB,KAAK,UAAnD,SAGA8jB,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ4f,MAAM,UAAU7C,QAASvhB,KAAK2xB,WAAWrB,KAAKtwB,MAAOzC,KAAK,UAAlE,qBAlEK6kB,aAyGVC,eAnBS,SAACnlB,GACrB,MAAO,CACHtB,KAAMsB,EAAMY,eAAekgB,KAC3B3hB,KAAMa,EAAMd,MAAMF,SAAS,GAC3Bw0B,QAASxzB,EAAMO,MAAQ,KAIJ,SAACoc,GACxB,MAAO,CACHoL,YAAa,WACTpL,EAASyB,GAAY9gB,EAAQwjB,QAEjCyR,aAAc,SAAC/M,EAAD9e,GAAkC,IAAxBoO,EAAwBpO,EAAxBoO,SAAUhL,EAAcpD,EAAdoD,QAC9B6S,E/BsNkB,SAACjS,EAAkBZ,GAAnB,OAAuD,SAAC6S,EAAUC,GAAa,IACnG5b,EAAS4b,IAAT5b,KACR2b,EAASE,MAETsC,GAAsBne,EAAKgL,KAAK,KAAMtB,EAAUZ,GAC7CjI,KAAK,SAAAob,GACJN,EAASyB,GAAY9gB,EAAQwjB,OAC7BnE,EAAS2B,QAEV9b,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,S+BhOPqX,CAAe5f,EAAUhL,OAK/Bqb,CAA6C8M,IC1GtDA,8MACM6B,UAA+CC,kGAE1CvO,GACT,IAAMsO,EAAYhxB,KAAKgxB,UAAUK,QACjC,GAAIL,EAAW,CACX,IAAM7lB,EAAa6lB,EAAUxzB,MAC7BwC,KAAK2gB,MAAM8O,aAAa/M,EAAO,CAAEvX,iDAIhC,IAAAuV,EACuC1gB,KAAK2gB,MAAzCsE,EADHvE,EACGuE,YAA2BrpB,GAD9B8kB,EACgB+O,aADhB/O,EAC8B9kB,MAEnC,OACIylB,EAAA7c,EAAA6Y,cAACuS,GAAAprB,EAAD,CAAQ5I,KAAMA,EAAMwqB,QAASnB,EAAa4K,kBAAgB,4BAA4BC,WAAW,EAAMC,SAAU,MAC7G1O,EAAA7c,EAAA6Y,cAAA,YACIgE,EAAA7c,EAAA6Y,cAAC2S,GAAAxrB,EAAD,CAAa5K,GAAG,6BAAhB,kBACAynB,EAAA7c,EAAA6Y,cAAC4S,GAAAzrB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC8S,GAAA3rB,EAAD,CAAW4rB,WAAS,EAACN,WAAS,EAAClM,OAAO,QAAQyM,MAAM,iBAAiB9yB,KAAK,OAAOs0B,SAAU7xB,KAAKgxB,aAEpG3P,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAAS0D,EAAab,MAAM,UAAU7mB,KAAK,UAAnD,UAGA8jB,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ4f,MAAM,UAAU7mB,KAAK,SAASgkB,QAASvhB,KAAKyvB,aAAaa,KAAKtwB,OAAtE,kBAzBCoiB,aA0DVC,eAlBS,SAACnlB,GACrB,MAAO,CACHtB,KAAMsB,EAAMY,eAAeinB,gBAIR,SAAClL,GACxB,MAAO,CACHoL,YAAa,WACTpL,EAASyB,GAAY9gB,EAAQuqB,iBAEjC0K,aAAc,SAAC/M,EAAD9e,GAA2B,IAAjBuH,EAAiBvH,EAAjBuH,WACpBuX,EAAMC,iBACN9I,EhC8emB,SAAC1O,GAAD,OAAiC,SAAC0O,EAAUC,GAAa,IAC9E5b,EAAS4b,IAAT5b,KACR2b,EAASE,MAETsC,GAAwBne,EAAKgL,KAAK,KAAMiC,GACrCpM,KAAK,SAAAob,GACJN,EAAS2B,MACT3B,EAASyB,GAAY9gB,EAAQuqB,kBAE9BrlB,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,SgCxfPuX,CAAgB3mB,OAKtBkX,CAA6C8M,IC1DtDA,8MACM6B,UAA+CC,kGAE1CvO,GACT,IAAMsO,EAAYhxB,KAAKgxB,UAAUK,QACjC,GAAIL,EAAW,CACX,IAAMppB,EAAWopB,EAAUxzB,MAC3BwC,KAAK2gB,MAAM8O,aAAa/M,EAAO,CAAE9a,+CAIhC,IAAA8Y,EACyB1gB,KAAK2gB,MAA3BsE,EADHvE,EACGuE,YAAarpB,EADhB8kB,EACgB9kB,KAErB,OACIylB,EAAA7c,EAAA6Y,cAACuS,GAAAprB,EAAD,CAAQ5I,KAAMA,EAAMwqB,QAASnB,EAAa4K,kBAAgB,0BAA0BC,WAAW,EAAMC,SAAU,MAC3G1O,EAAA7c,EAAA6Y,cAAA,YACIgE,EAAA7c,EAAA6Y,cAAC2S,GAAAxrB,EAAD,CAAa5K,GAAG,2BAAhB,eACAynB,EAAA7c,EAAA6Y,cAAC4S,GAAAzrB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC8S,GAAA3rB,EAAD,CAAW4rB,WAAS,EAACN,WAAS,EAAClM,OAAO,QAAQyM,MAAM,YAAY9yB,KAAK,OAAOs0B,SAAU7xB,KAAKgxB,aAE/F3P,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAAS0D,EAAab,MAAM,UAAU7mB,KAAK,UAAnD,UAGA8jB,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ4f,MAAM,UAAU7mB,KAAK,SAASgkB,QAASvhB,KAAKyvB,aAAaa,KAAKtwB,OAAtE,oBAzBCoiB,aA0DVC,eAlBS,SAACnlB,GACrB,MAAO,CACHtB,KAAMsB,EAAMY,eAAeynB,cAIR,SAAC1L,GACxB,MAAO,CACHoL,YAAa,WACTpL,EAASyB,GAAY9gB,EAAQ+qB,eAEjCkK,aAAc,SAAC/M,EAAD9e,GAAyB,IAAfgE,EAAehE,EAAfgE,SACpB8a,EAAMC,iBACN9I,EjC+Nc,SAACjS,GAAD,OAA+B,SAACiS,EAAUC,GAAa,IACvE5b,EAAS4b,IAAT5b,KACR2b,EAASE,MAETsC,GAAsBne,EAAKgL,KAAK,KAAMtB,EAAU,IAAImJ,MACjDhS,KAAK,SAAAob,GAIJ,OAHAN,EAASyB,GAAY9gB,EAAQ+qB,cAC7B1L,EAAS2B,MACT3B,EAASiE,GAAgBlW,IAClByU,GAAuBne,EAAKgL,KAAK,QAEzCnK,KAAK,SAAA0V,GAAQ,OAAIA,EAASoI,KAAK,SAAAxgB,GAAI,OAAIA,EAAKygB,mBAAqBlV,MACjE7I,KAAK,SAAA1C,GACJ,IAAKA,EACH,MAAM,IAAIrC,MAAM,0CAClB6f,EAASsG,GAAW9jB,IACpBwd,EAAS8D,GAAethB,EAAKhB,SAE9BqE,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,SiClPP1Q,CAAWjC,OAKjBya,CAA6C8M,IC1DtDA,8MACM6B,UAA+CC,kGAE1CvO,GACT,IAAMsO,EAAYhxB,KAAKgxB,UAAUK,QAC3Bh1B,EAAO2D,KAAK2gB,MAAMtkB,KACxB,GAAI20B,GAAa30B,EAAM,CACnB,IAAMgR,EAAU2jB,EAAUxzB,MAC1BwC,KAAK2gB,MAAM8O,aAAa/M,EAAO,CAAErmB,OAAMgR,8CAItC,IAAAqT,EAC+B1gB,KAAK2gB,MAAjCsE,EADHvE,EACGuE,YAAarpB,EADhB8kB,EACgB9kB,KAAMS,EADtBqkB,EACsBrkB,KACrB01B,EAAe11B,EAAOA,EAAKhB,KAAO,GAExC,OACIgmB,EAAA7c,EAAA6Y,cAACuS,GAAAprB,EAAD,CAAQ5I,KAAMA,EAAMwqB,QAASnB,EAAa4K,kBAAgB,4BAA4BC,WAAW,EAAMC,SAAU,MAC7G1O,EAAA7c,EAAA6Y,cAAA,YACEgE,EAAA7c,EAAA6Y,cAAC2S,GAAAxrB,EAAD,CAAa5K,GAAG,6BAAhB,UACAynB,EAAA7c,EAAA6Y,cAAC4S,GAAAzrB,EAAD,KACE6c,EAAA7c,EAAA6Y,cAAC8S,GAAA3rB,EAAD,CAAW4rB,WAAS,EAACN,WAAS,EAAClM,OAAO,QAAQyM,MAAM,YAAY9yB,KAAK,OAAOs0B,SAAU7xB,KAAKgxB,UAAWQ,aAAcO,KAEtH1Q,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACE6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAAS0D,EAAab,MAAM,UAAU7mB,KAAK,UAAnD,UAGA8jB,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ4f,MAAM,UAAU7mB,KAAK,SAASgkB,QAASvhB,KAAKyvB,aAAaa,KAAKtwB,OAAtE,kBA3BKoiB,aAoEVC,eAtBS,SAACnlB,GACrB,MAAO,CACHtB,KAAMsB,EAAMY,eAAe+sB,OAC3BxuB,KAAMa,EAAMd,MAAMF,SAAS,KAIR,SAAC2d,GACxB,MAAO,CACHoL,YAAa,WACTpL,EAASyB,GAAY9gB,EAAQqwB,UAEjC4E,aAAc,SAAC/M,EAAD9e,GAA8B,IlCwSzBgE,EAAkB2O,EAgBhBpL,EAAoBuC,EkCxTjBrR,EAAoBuH,EAApBvH,KAAMgR,EAAczJ,EAAdyJ,QAC1BqV,EAAMC,iBAEF9I,EADAxd,aAAgB0F,GlCsTHoJ,EkCrTS9O,EAAKhB,KlCqTMqS,EkCrTAL,ElCqTmC,SAACwM,EAAUC,GAAa,IAClG5b,EAAS4b,IAAT5b,KACR2b,EAASE,MAETsC,GAAwBne,EAAKgL,KAAK,KAAMiC,EAAYuC,GACjD3O,KAAK,WACJ8a,EAAS2B,MACT3B,EAASyB,GAAY9gB,EAAQqwB,WAE9BnrB,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,WA1BD3S,EkCnSSvL,EAAKhB,KlCmSIkb,EkCnSElJ,ElCmS+B,SAACwM,EAAUC,GAAa,IAC5F5b,EAAS4b,IAAT5b,KACR2b,EAASE,MAETsC,GAAsBne,EAAKgL,KAAK,KAAMtB,EAAU2O,GAC7CxX,KAAK,WACJ8a,EAAS2B,MACT3B,EAASyB,GAAY9gB,EAAQqwB,WAE9BnrB,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,ckCxSb8H,CAA6C8M,IC3C7C6C,OA1Bf,SAAqBrR,GAAiB,IAC1BtkB,EAAqDskB,EAArDtkB,KAAMukB,EAA+CD,EAA/CC,WAAYC,EAAmCF,EAAnCE,YAAaC,EAAsBH,EAAtBG,kBACjCE,EAAc,CAChBC,gBAAiBL,EAAaM,KAAI,UAAW7jB,GAEjD,OACIgkB,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAU,OAAOC,QAASV,EAAaa,gBAAed,EAAYY,cAAeV,GAClFO,EAAA7c,EAAA6Y,cAACsE,GAAAnd,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACuE,GAAApd,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACwE,GAAArd,EAAD,CAAQsd,MAAOd,GACR3kB,aAAgB0E,EAAYsgB,EAAA7c,EAAA6Y,cAAC0E,GAAAvd,EAAD,MAAe6c,EAAA7c,EAAA6Y,cAAC2E,GAAAxd,EAAD,QAGtD6c,EAAA7c,EAAA6Y,cAAC4E,GAAAzd,EAAD,CAAc0d,QAAS7lB,EAAKhB,KAAM8mB,UAAU,eCQ7C8P,OA1Bf,SAAyBtR,GAAiB,IAC9BvkB,EAAuCukB,EAAvCvkB,MAAOkoB,EAAgC3D,EAAhC2D,UAAW4N,EAAqBvR,EAArBuR,iBAEpB3N,EAAiBnoB,EAAMzD,IAAI,SAAC0D,EAAMmE,GACpC,OAAO6gB,EAAA7c,EAAA6Y,cAAC8U,GAAD,CACH91B,KAAMA,EACNukB,YAAY,EACZC,YAAa,kBAAMqR,EAAiB71B,IACpCykB,kBAAmB,kBAAMoR,EAAiB71B,IAC1CmE,IAAKA,MAGb,OAAO6gB,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAU,mBAChBgD,EACEjD,EAAA7c,EAAA6Y,cAACoH,GAAD,MACAF,EAAennB,OAASmnB,EAAiBlD,EAAA7c,EAAA6Y,cAACqH,GAAD,QCiFtCyK,eAxFX,SAAAA,EAAYxO,GAAiB,IAAAhM,EAAAxa,OAAA4F,EAAA,EAAA5F,CAAA6F,KAAAmvB,IACzBxa,EAAAxa,OAAA8G,EAAA,EAAA9G,CAAA6F,KAAA7F,OAAA+G,EAAA,EAAA/G,CAAAg1B,GAAArB,KAAA9tB,KAAM2gB,KAJFlmB,UAGqB,EAAAka,EAFrBzW,UAEqB,MAEjBvB,EAA6BgkB,EAA7BhkB,YAAay1B,EAAgBzR,EAAhByR,YAFI,OAGzBzd,EAAKla,KAAO23B,EACZzd,EAAKzW,KAAOvB,EAEZgY,EAAKzX,MAAQ,CACTd,MAAO,GACPkoB,WAAW,GARU3P,kFAYV0d,GACXA,EAAUD,cAAgBpyB,KAAK2gB,MAAMyR,aAClCC,EAAU11B,YAAYuM,KAAK,MAAQlJ,KAAK2gB,MAAMhkB,YAAYuM,KAAK,MAClElJ,KAAKvF,KAAOuF,KAAK2gB,MAAMyR,YACvBpyB,KAAK9B,KAAO8B,KAAK2gB,MAAMhkB,YACvBqD,KAAKsyB,sDAKTtyB,KAAK9B,KAAO8B,KAAK9B,KAAKnD,MAAM,GAAI,GAChCiF,KAAKsyB,uDAGQ1Z,GACb5Y,KAAK9B,KAAL,GAAAzB,OAAAtC,OAAAuC,EAAA,EAAAvC,CAAgBye,EAAO1a,MAAvB,CAA6B0a,EAAOvd,OACpC2E,KAAKsyB,yKAILtyB,KAAK2lB,SAAS,CAAErB,WAAW,aACNiO,GAAuBvyB,KAAK9B,KAAKgL,KAAK,kBAC/C,SAAA7M,GAAI,OAAIA,aAAgB0F,GAD9B3F,SACDH,aAEL+D,KAAK2lB,SAAS,CAAErB,WAAW,EAAOloB,6IAG7B,IAAAskB,EACmD1gB,KAAK2gB,MAArD/kB,EADH8kB,EACG9kB,KAAMqpB,EADTvE,EACSuE,YAAawK,EADtB/O,EACsB+O,aAAc+C,EADpC9R,EACoC8R,WADpCC,EAEwBzyB,KAAK9C,MAA1Bd,EAFHq2B,EAEGr2B,MAAOkoB,EAFVmO,EAEUnO,UACT7pB,EAAOuF,KAAKvF,KACZyD,EAAO8B,KAAK9B,KACZ2B,EAAG,GAAApD,OAAMhC,EAAN,KAAAgC,OAAcyB,EAAKgL,KAAK,MAC3B2d,EAAY3oB,EAAKd,OAAS,EAEhC,OACIikB,EAAA7c,EAAA6Y,cAACuS,GAAAprB,EAAD,CAAQ5I,KAAMA,EAAMwqB,QAASnB,EAAa4K,kBAAgB,mBAAmBC,WAAW,EAAMC,SAAU,MACpG1O,EAAA7c,EAAA6Y,cAAA,YACIgE,EAAA7c,EAAA6Y,cAAC2S,GAAAxrB,EAAD,CAAa5K,GAAG,oBACX44B,EADL,aAC0BnR,EAAA7c,EAAA6Y,cAAA,SAAOyE,MAAO,CAACsC,MAAO,SAAWvkB,IAE3DwhB,EAAA7c,EAAA6Y,cAAC4S,GAAAzrB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACqV,GAAD,CAAiBt2B,MAAOA,EAAOkoB,UAAWA,EAAW4N,iBAAkBlyB,KAAKkyB,iBAAiB5B,KAAKtwB,SAEtGqhB,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAASvhB,KAAK4mB,aAAa0J,KAAKtwB,MAAOokB,MAAM,UAAU7mB,KAAK,SAASo1B,UAAW9L,GACpFxF,EAAA7c,EAAA6Y,cAACgK,GAAA7iB,EAAD,MADJ,sBAIA6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAAS0D,EAAab,MAAM,UAAU7mB,KAAK,UAAnD,UAGA8jB,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ4f,MAAM,UAAU7C,QAAS,SAACxnB,GAAD,OAAO01B,EAAa,CAAEh1B,OAAMyD,UAASX,KAAK,UACtEi1B,aArEJpQ,aC0BzB,IAoBeC,eApBS,SAACnlB,GACrB,MAAO,CACHtB,KAAMsB,EAAMY,eAAe4sB,KAC3B0H,YAAal1B,EAAMD,QAAQxC,MAAQ,GACnCkC,YAAaO,EAAMgB,KACnBwgB,cAAexhB,EAAMd,MAAMF,WAIR,SAAC2d,GACxB,MAAO,CACHoL,YAAa,WACTpL,EAASyB,GAAY9gB,EAAQkwB,QAEjCkI,KAAM,SAAClU,EAAemU,GAClBhZ,EtC6hBa,SAACzd,EAADkS,KAAkB7T,KAAlB,IAA8B4jB,EAA9B/P,EAAwBpQ,KAAxB,OAA0F,SAAC2b,EAAUC,GAAa,IACjI5b,EAAS4b,IAAT5b,KACR2b,EAASE,MAGT,IAAMjN,EAAcuR,EAAWnV,KAAK,KAC9B6D,EAAY3Q,EAAMzD,IAAI,SAAA4jB,GAAC,OAAIA,EAAElhB,OAEnCghB,GAAqBne,EAAKgL,KAAK,KAAM4D,EAAaC,GAC/ChO,KAAK,SAAAob,GACJN,EAAS2B,MACT3B,EAASyB,GAAY9gB,EAAQkwB,SAE9BhrB,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,SsC3iBPpD,CAAUuH,EAAemU,OAK/BxQ,CA/Cf,SAAoB1B,GAAkB,IAC1ByR,EAAqEzR,EAArEyR,YAAaz1B,EAAwDgkB,EAAxDhkB,YAAa+hB,EAA2CiC,EAA3CjC,cAAe9iB,EAA4B+kB,EAA5B/kB,KAAMqpB,EAAsBtE,EAAtBsE,YAAa2N,EAASjS,EAATiS,KAEpE,OAAOvR,EAAA7c,EAAA6Y,cAACyV,GAAD,CACHl3B,KAAMA,EACN42B,WAAW,OACXJ,YAAaA,EACbz1B,YAAaA,EACbsoB,YAAaA,EACbwK,aAAc,SAAClxB,GAAD,OAAcq0B,EAAKlU,EAAengB,QCkBxD,IAoBe8jB,eApBS,SAACnlB,GACrB,MAAO,CACHtB,KAAMsB,EAAMY,eAAewgB,KAC3B8T,YAAal1B,EAAMD,QAAQxC,MAAQ,GACnCkC,YAAaO,EAAMgB,KACnBwgB,cAAexhB,EAAMd,MAAMF,WAIR,SAAC2d,GACxB,MAAO,CACHoL,YAAa,WACTpL,EAASyB,GAAY9gB,EAAQ8jB,QAEjCyU,KAAM,SAACrU,EAAemU,GAClBhZ,EAAS5M,GAAUyR,EAAemU,OAK/BxQ,CA/Cf,SAAoB1B,GAAkB,IAC1ByR,EAAqEzR,EAArEyR,YAAaz1B,EAAwDgkB,EAAxDhkB,YAAa+hB,EAA2CiC,EAA3CjC,cAAe9iB,EAA4B+kB,EAA5B/kB,KAAMqpB,EAAsBtE,EAAtBsE,YAAa8N,EAASpS,EAAToS,KAEpE,OAAO1R,EAAA7c,EAAA6Y,cAACyV,GAAD,CACHl3B,KAAMA,EACN42B,WAAW,OACXJ,YAAaA,EACbz1B,YAAaA,EACbsoB,YAAaA,EACbwK,aAAc,SAAClxB,GAAD,OAAcw0B,EAAKrU,EAAengB,iDCezCy0B,OAzBf,SAAwBrS,GAA4B,IACxC9d,EAAU8d,EAAV9d,MACRA,EAAM,GACN,IAAMowB,EAAO7iB,MAAMC,KAAKxN,GAAOlK,IAAI,SAAC4jB,EAAG9V,GAAJ,OAC/B4a,EAAA7c,EAAA6Y,cAACsE,GAAAnd,EAAD,CAAU0uB,OAAK,EAAC1yB,IAAKiG,GACjB4a,EAAA7c,EAAA6Y,cAAC8H,GAAA3gB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC0E,GAAAvd,EAAD,OAEJ6c,EAAA7c,EAAA6Y,cAAC4E,GAAAzd,EAAD,CAAc0d,QAAO,GAAAzlB,OAAK8f,EAAElhB,KAAP,MAAAoB,OAAgBoE,EAAiB0b,EAAEzc,MAAnC,UAI7B,OACIuhB,EAAA7c,EAAA6Y,cAAA,WACIgE,EAAA7c,EAAA6Y,cAAC8V,GAAA3uB,EAAD,CAAM4uB,UAAU,OACXH,KC4BFI,8MA9CXxB,SAA8CZ,iGAElCvO,GACR,IAAM4Q,EAAetzB,KAAK6xB,SAASR,QAC/BiC,IACAA,EAAa91B,MAAQ,GACrBwC,KAAK2gB,MAAM4S,YAAY7Q,qCAItB,IAAAhC,EACqC1gB,KAAK2gB,MAAvC9jB,EADH6jB,EACG7jB,SAAU22B,EADb9S,EACa8S,oBACZC,EAAS,CACXC,UAAW,GAGRC,WAAY,CACXvM,QAAUvqB,GAAYA,EAASO,OAAU,cAAgB,SAIjE,OACIikB,EAAA7c,EAAA6Y,cAAA,WACIgE,EAAA7c,EAAA6Y,cAAA,SAAOuW,QAAQ,eACXvS,EAAA7c,EAAA6Y,cAAA,SAAOyE,MAAO2R,EAAOC,UAAW95B,GAAG,cAAc63B,IAAKzxB,KAAK6xB,SAAUgC,UAAQ,EAACt2B,KAAK,OAAO6sB,SAAUoJ,KAMxGnS,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQsd,MAAO2R,EAAOE,WAAYP,UAAU,OAAO71B,KAAK,QAAQgkB,QAASvhB,KAAKuzB,YAAYjD,KAAKtwB,OAA/F,SAIEnD,GAAYwkB,EAAA7c,EAAA6Y,cAACyW,GAAD,CAAgBjxB,MAAOhG,YAnC1BulB,aCQrB+M,oLAEO,IAAAzO,EACwG1gB,KAAK2gB,MAA1GsE,EADHvE,EACGuE,YAAasO,EADhB7S,EACgB6S,YAAa9D,EAD7B/O,EAC6B+O,aAAc7zB,EAD3C8kB,EAC2C9kB,KAAMm4B,EADjDrT,EACiDqT,UAAWj3B,EAD5D4jB,EAC4D5jB,SAAUD,EADtE6jB,EACsE7jB,SAAU22B,EADhF9S,EACgF8S,oBAErF,OACInS,EAAA7c,EAAA6Y,cAACuS,GAAAprB,EAAD,CAAQ5I,KAAMA,EAAMwqB,QAASnB,EAAa4K,kBAAgB,qBAAqBC,WAAW,EAAMC,SAAU,MACtG1O,EAAA7c,EAAA6Y,cAAA,YACIgE,EAAA7c,EAAA6Y,cAAC2S,GAAAxrB,EAAD,CAAa5K,GAAG,sBAAhB,wBAGAynB,EAAA7c,EAAA6Y,cAAC4S,GAAAzrB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC2W,GAAD,CAAcn3B,SAAUA,EAAU22B,oBAAqBA,EAAqBD,YAAaA,IACxFQ,EAAY1S,EAAA7c,EAAA6Y,cAAC4W,GAAAzvB,EAAD,CAAgB8gB,QAAQ,cAAc9nB,MAAOV,IAAe,MAE7EukB,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAAS0D,EAAab,MAAM,UAAU7mB,KAAK,UAAnD,UAGA8jB,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ4f,MAAM,UAAU7C,QAASkO,EAAckD,UAAWoB,EAAWx2B,KAAK,UAA1E,oBAnBC6kB,aAqEVC,eA5BS,SAACnlB,GACrB,MAAO,CACHtB,KAAMsB,EAAMY,eAAewhB,YAC3ByU,YAAW72B,EAAMiB,OAAOtB,UAAWK,EAAMiB,OAAOtB,SAASO,OAAS,EAClEP,SAAUK,EAAMiB,OAAOtB,SACvBC,SAAUI,EAAMiB,OAAOrB,WAIJ,SAAC+c,GACxB,MAAO,CACHoL,YAAa,SAACvC,GACV7I,EAASwF,OAEboQ,aAAc,SAAC/M,GACXA,EAAMC,iBACN9I,E1C6FoC,SAACA,EAAUC,GAAa,IAAAoa,EAC/Bpa,IAA/B5b,EAD8Dg2B,EAC9Dh2B,KAAgBrB,EAD8Cq3B,EACxD/1B,OAAUtB,SAExB,GAAiB,OAAbA,EACF,OAAOgd,EAASO,GAAgB,kCAElCP,EAASE,MACTF,EAASoB,MACTpB,EAASgC,GAAsB,KAE/BQ,GAAuBne,EAAKgL,KAAK,KAAMrM,GACpCkC,KAAK,SAAAob,GACJN,EAASgC,GAAsB,MAC/BS,WAAW,SAAAC,GACT1C,EAASwF,OACR,KACHxF,EAAS2B,QAEV9b,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,WACPT,EAAS6C,GAAsB7f,EAAS,GAAGxB,KAAM,MACjDwe,EAASU,W0ChHPiZ,oBAAqB,SAAC9Q,GAClB,IAAM7f,EAAQ6f,EAAMyR,OAAOtxB,MAC3BgX,EAASyG,GAAkBzd,KAE/B0wB,YAAa,WACT1Z,EAAS0F,SAKN8C,CAA6C8M,6FCvEtC1L,sBAAW,CAC/B5a,KAAM,CACJub,MAAOgQ,SAAM,KACbC,YAAa,CACXjQ,MAAOgQ,SAAM,OAGjBE,QAAS,IAPW7Q,CAQnB,SAAC9C,GAAD,OAA0BU,EAAA7c,EAAA6Y,cAACkX,GAAA/vB,EAADrK,OAAAq6B,OAAA,CAAUpQ,MAAM,WAAczD,MAE5C,SAAS8T,KAAiB,IAAAC,EACblO,IAAMmO,SAAS,CACvCC,UAAU,EACVC,UAAU,EACVC,UAAU,EACVC,UAAU,EACVC,UAAU,EACVC,UAAU,EACVC,UAAU,IAR2BC,EAAAh7B,OAAAi7B,GAAA,EAAAj7B,CAAAu6B,EAAA,GAChCx3B,EADgCi4B,EAAA,GACzBxP,EADyBwP,EAAA,GAWjC3L,EAAe,SAACnuB,GAAD,OAAkB,SAACqnB,GACtCiD,EAASxrB,OAAAuB,EAAA,EAAAvB,CAAA,GAAK+C,EAAN/C,OAAAmB,EAAA,EAAAnB,CAAA,GAAckB,EAAOqnB,EAAMyR,OAAOG,aAG5C,OACEjT,EAAA7c,EAAA6Y,cAACgY,GAAA7wB,EAAD,CAAW8wB,KAAG,GACZjU,EAAA7c,EAAA6Y,cAACkY,GAAA/wB,EAAD,CACEiB,QACE4b,EAAA7c,EAAA6Y,cAACkX,GAAA/vB,EAAD,CACE8vB,QAASp3B,EAAM03B,SACfxK,SAAUZ,EAAa,YACvBhsB,MAAM,WACN4mB,MAAM,YAGViM,MAAM,gBAERhP,EAAA7c,EAAA6Y,cAACkY,GAAA/wB,EAAD,CACEiB,QACE4b,EAAA7c,EAAA6Y,cAACkX,GAAA/vB,EAAD,CACE8vB,QAASp3B,EAAM23B,SACfzK,SAAUZ,EAAa,YACvBhsB,MAAM,WACN4mB,MAAM,YAGViM,MAAM,qBAERhP,EAAA7c,EAAA6Y,cAACkY,GAAA/wB,EAAD,CACEiB,QACE4b,EAAA7c,EAAA6Y,cAACkX,GAAA/vB,EAAD,CACE8vB,QAASp3B,EAAM43B,SACf1K,SAAUZ,EAAa,YACvBhsB,MAAM,WACN4mB,MAAM,YAGViM,MAAM,oBAERhP,EAAA7c,EAAA6Y,cAACkY,GAAA/wB,EAAD,CACEiB,QACE4b,EAAA7c,EAAA6Y,cAACkX,GAAA/vB,EAAD,CACE8vB,QAASp3B,EAAM63B,SACf3K,SAAUZ,EAAa,YACvBhsB,MAAM,WACN4mB,MAAM,YAGViM,MAAM,YAERhP,EAAA7c,EAAA6Y,cAACkY,GAAA/wB,EAAD,CACEiB,QACE4b,EAAA7c,EAAA6Y,cAACkX,GAAA/vB,EAAD,CACE8vB,QAASp3B,EAAM83B,SACf5K,SAAUZ,EAAa,YACvBhsB,MAAM,WACN4mB,MAAM,YAGViM,MAAM,cAERhP,EAAA7c,EAAA6Y,cAACkY,GAAA/wB,EAAD,CACEiB,QACE4b,EAAA7c,EAAA6Y,cAACkX,GAAA/vB,EAAD,CACE8vB,QAASp3B,EAAMg4B,SACf9K,SAAUZ,EAAa,YACvBhsB,MAAM,WACN4mB,MAAM,YAGViM,MAAM,YAERhP,EAAA7c,EAAA6Y,cAACkY,GAAA/wB,EAAD,CACEiB,QACE4b,EAAA7c,EAAA6Y,cAACkX,GAAA/vB,EAAD,CACE8vB,QAASp3B,EAAM+3B,SACf7K,SAAUZ,EAAa,YACvBhsB,MAAM,WACN4mB,MAAM,YAGViM,MAAM,0BC9FRlB,8MAEFjyB,MAAQ,CACJs4B,YAAa,KAGjBC,YAAc,SAAC/0B,GAAD,OAAciU,EAAKgR,SAAS,CAAE+P,SAAUh1B,OAGtD8oB,aAAe,SAACmM,EAAQH,GAAT,OAA8B7gB,EAAKgR,SAAS,CAAE6P,6FAEhD9S,GACT,IAAMrmB,EAAO2D,KAAK2gB,MAAMtkB,KACpBA,GACA2D,KAAK2gB,MAAM8O,aAAa/M,EAAO,CAAErmB,0CAIhC,IAAAqkB,EAC0F1gB,KAAK2gB,MAA5FsE,EADHvE,EACGuE,YAAasO,EADhB7S,EACgB6S,YAAa33B,EAD7B8kB,EAC6B9kB,KAAMm4B,EADnCrT,EACmCqT,UAAWj3B,EAD9C4jB,EAC8C5jB,SAAUD,EADxD6jB,EACwD7jB,SAAU22B,EADlE9S,EACkE8S,oBACnEgC,EAAcx1B,KAAK9C,MAAMs4B,YAE7B,OACInU,EAAA7c,EAAA6Y,cAACuS,GAAAprB,EAAD,CAAQ5I,KAAMA,EAAMwqB,QAASnB,EAAa4K,kBAAgB,qBAAqBC,WAAW,EAAMC,SAAU,MACtG1O,EAAA7c,EAAA6Y,cAAA,WACIgE,EAAA7c,EAAA6Y,cAACuY,GAAD,CACIp4B,MAAOg4B,EACPpL,SAAUpqB,KAAKwpB,cAGfnI,EAAA7c,EAAA6Y,cAACwY,GAAD,CAAOxF,MAAM,yBACbhP,EAAA7c,EAAA6Y,cAACwY,GAAD,CAAOxF,MAAM,+BAEA,IAAhBmF,GAAqBnU,EAAA7c,EAAA6Y,cAAA,YAClBgE,EAAA7c,EAAA6Y,cAAC4S,GAAAzrB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC2W,GAAD,CAAcn3B,SAAUA,EAAU22B,oBAAqBA,EAAqBD,YAAaA,IACxFQ,EAAY1S,EAAA7c,EAAA6Y,cAAC4W,GAAAzvB,EAAD,CAAgB8gB,QAAQ,cAAc9nB,MAAOV,IAAe,MAE7EukB,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAAS0D,EAAab,MAAM,UAAU7mB,KAAK,UAAnD,UAGA8jB,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ4f,MAAM,UAAU7C,QAASvhB,KAAKyvB,aAAaa,KAAKtwB,MAAM2yB,UAAWoB,EAAWx2B,KAAK,UAAzF,YAKS,IAAhBi4B,GAAqBnU,EAAA7c,EAAA6Y,cAAA,YAClBgE,EAAA7c,EAAA6Y,cAAC4S,GAAAzrB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAahG,WAAW,GACpBzO,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAYlC,QAAQ,YAApB,SACAvS,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAOl8B,GAAG,WAAWm8B,mBAAiB,oBAE1C1U,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAahG,WAAW,GACpBzO,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAYlC,QAAQ,YAApB,UACAvS,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAOl8B,GAAG,WAAWm8B,mBAAiB,oBAE1C1U,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAahG,WAAW,GACpBzO,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAYlC,QAAQ,YAApB,eACAvS,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAOl8B,GAAG,WAAWm8B,mBAAiB,oBAE1C1U,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAahG,WAAW,GACpBzO,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAYlC,QAAQ,YAApB,WACAvS,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAOl8B,GAAG,WAAWm8B,mBAAiB,oBAE1C1U,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAahG,WAAW,GACpBzO,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAYlC,QAAQ,YAApB,WACAvS,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAOl8B,GAAG,WAAWm8B,mBAAiB,oBAE1C1U,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAahG,WAAW,GACpBzO,EAAA7c,EAAA6Y,cAACoX,GAAD,QAGRpT,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAAS0D,EAAab,MAAM,UAAU7mB,KAAK,UAAnD,UAGA8jB,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ4f,MAAM,UAAU7C,QAASvhB,KAAKyvB,aAAaa,KAAKtwB,MAAO2yB,UAAWoB,EAAWx2B,KAAK,UAA1F,qBA7EH6kB,aAyFnBwT,GAAenS,sBAAW,SAAAC,GAAK,MAAK,CACtCsS,cAAe,CACXC,cAAe,OAEnBC,UAAW,CACP9O,QAAS,UALI3D,CAOjB0S,MAEEN,GAAQpS,sBAAW,SAAAC,GAAK,MAAK,CAC/BxnB,SAAU,CACNkoB,MAAO,SACPgS,aAAc,sBAHR3S,CAKV4S,MAwBJ,IA6BehU,eA7BS,SAACnlB,GACrB,MAAO,CACHb,KAAMa,EAAMd,MAAMF,SAAS,GAC3BN,KAAMsB,EAAMY,eAAe4hB,gBAC3BqU,YAAW72B,EAAMiB,OAAOtB,UAAWK,EAAMiB,OAAOtB,SAASO,OAAS,EAClEP,SAAUK,EAAMiB,OAAOtB,SACvBC,SAAUI,EAAMiB,OAAOrB,WAIJ,SAAC+c,GACxB,MAAO,CACHoL,YAAa,SAACvC,GACV7I,EAAS4F,OAEbgQ,aAAc,SAAC/M,EAAD9e,GAAqB,IAAXvH,EAAWuH,EAAXvH,KACpBqmB,EAAMC,iBACN9I,E5C4DkB,SAACxd,GAAD,OAAyB,SAACwd,EAAUC,GAAa,IAAAwc,EACtCxc,IAA/B5b,EADqEo4B,EACrEp4B,KAAgBrB,EADqDy5B,EAC/Dn4B,OAAUtB,SAExB,GAAiB,OAAbA,EACF,OAAOgd,EAASO,GAAgB,kCAElCP,EAASE,MACTF,EAASoB,MACTpB,EAASgC,GAAsB,KAE/BQ,GAAuBne,EAAKgL,KAAK,KAAMrM,GACpCkC,KAAK,SAAAob,GACJN,EAASgC,GAAsB,MAC/BS,WAAW,SAAAC,GACT1C,EAAS4F,OACR,KACH5F,EAAS2B,QAEV9b,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,WACPT,EAAS9S,GAAclK,EAAS,GAAGxB,KAAMgB,EAAKhB,OAC9Cwe,EAASkD,GAAkBlgB,EAAS,GAAGxB,OACvCwe,EAASU,S4ClFMgc,CAAel6B,KAE5Bm3B,oBAAqB,SAAC9Q,GAClB,IAAM7f,EAAQ6f,EAAMyR,OAAOtxB,MAC3BgX,EAASyG,GAAkBzd,KAE/B0wB,YAAa,WACT1Z,EAAS0F,SAKN8C,CAA6C8M,iIC1JtDA,8MACM6B,UAAkDC,wBAC1D/zB,MAAQ,CACJuzB,YAAa,KACbzpB,QAAS,KACT/I,SAAS,EACTqmB,WAAW,EACXjf,SAAU,GACVD,MAAO,GACPE,MAAM,EACNC,OAAO,EACPC,QAAQ,EACRC,SAAS,EACT4P,OAAO,EACPtM,QAAS,MA4CbygB,aAAe,SAAChpB,EAAa6I,GAAd,OAA+B,SAACqZ,GAC/B,SAARrZ,IACAsL,EAAKzX,MAAM6L,QAAQvI,GAAK0F,SAAWwc,EAAMyR,OAAOG,SACxC,QAARjrB,IACAsL,EAAKzX,MAAM6L,QAAQvI,GAAKsF,MAAQ4c,EAAMyR,OAAOG,SACrC,SAARjrB,IACAsL,EAAKzX,MAAM6L,QAAQvI,GAAKuF,OAAS2c,EAAMyR,OAAOG,SACtC,UAARjrB,IACAsL,EAAKzX,MAAM6L,QAAQvI,GAAKwF,QAAU0c,EAAMyR,OAAOG,SACvC,WAARjrB,IACAsL,EAAKzX,MAAM6L,QAAQvI,GAAKyF,SAAWyc,EAAMyR,OAAOG,SACpD3f,EAAKgR,SAALxrB,OAAAuB,EAAA,EAAAvB,CAAA,GAAmBwa,EAAKzX,MAAxB/C,OAAAmB,EAAA,EAAAnB,CAAA,GAAgCkB,KAAOqnB,EAAMyR,OAAOG,eAGxDkC,iBAAmB,SAACh2B,GAAD,OAAiB,SAACkiB,GACjC/N,EAAKzX,MAAM6L,QAAQvI,GAAKoF,OAAS8c,EAAMyR,OAAO32B,MAC9CmX,EAAKgR,SAALxrB,OAAAuB,EAAA,EAAAvB,CAAA,GAAmBwa,EAAKzX,MAAxB/C,OAAAmB,EAAA,EAAAnB,CAAA,GAAgCkB,KAAOqnB,EAAMyR,OAAO32B,aAExDi5B,oBAAsB,kBAAM,SAAC/T,GACzB/N,EAAKzX,MAAMkI,MAAQsd,EAAMyR,OAAO32B,MAChCmX,EAAKgR,SAALxrB,OAAAuB,EAAA,EAAAvB,CAAA,GAAmBwa,EAAKzX,MAAxB/C,OAAAmB,EAAA,EAAAnB,CAAA,GAAgCkB,KAAOqnB,EAAMyR,OAAO32B,aAGxDk5B,aAAe,SAACl2B,GAAD,OAAiB,SAACkiB,GAC7B/N,EAAKzX,MAAM6L,QAAQ4tB,OAAOn2B,EAAK,GAC/BmU,EAAKgR,SAALxrB,OAAAuB,EAAA,EAAAvB,CAAA,GAAmBwa,EAAKzX,MAAxB/C,OAAAmB,EAAA,EAAAnB,CAAA,GAAgCkB,KAAOqnB,EAAMkU,OAAOC,gBAGxDC,gBAAkB,SAACz7B,GAAD,OAAkB,SAACqnB,GACjC/N,EAAKgR,SAALxrB,OAAAuB,EAAA,EAAAvB,CAAA,GAAmBwa,EAAKzX,MAAxB/C,OAAAmB,EAAA,EAAAnB,CAAA,GAAgCkB,EAAOqnB,EAAMyR,OAAOG,eAGxDyC,UAAY,kBAAM,SAACrU,GACf,IAAK/N,EAAKqiB,SAASriB,EAAKzX,MAAMkI,OAG1B,OAFAqmB,MAAM,6BACN9W,EAAKsiB,aAGTtiB,EAAKzX,MAAM6L,QAAQjF,KAAK,IAAIqB,EAAQwP,EAAKzX,MAAM6L,QAAQ3L,OACnDuX,EAAKzX,MAAMkI,MACXuP,EAAKzX,MAAMmI,SACXsP,EAAKzX,MAAMoI,KACXqP,EAAKzX,MAAMqI,MACXoP,EAAKzX,MAAMsI,OACXmP,EAAKzX,MAAMuI,QACXkP,EAAKzX,MAAMmY,QACfV,EAAKsiB,iBAcTA,WAAa,WACTtiB,EAAKgR,SAAS,CACVvgB,MAAO,GACPE,MAAM,EACNC,OAAO,EACPC,QAAQ,EACRC,SAAS,EACT4P,OAAO,yFA5GM,IAAA6b,EAAAlxB,KACbA,KAAK2gB,MAAM+P,UAAY1wB,KAAK9C,MAAMuzB,aAA4C,GAA7BzwB,KAAK9C,MAAM6L,QAAQ3L,SAEpE4C,KAAK2lB,SAAS,CACV8K,YAAazwB,KAAK2gB,MAAM+P,UAE5B1wB,KAAK2lB,SAAS,CACV1nB,SAAS,IAGb+B,KAAK2gB,MAAM+P,SAAWS,MAAMnxB,KAAK2gB,MAAM+P,SAAS3xB,KAAK,SAAAob,GACjD,OAAOA,EAAE/V,SACVrF,KAFmB,eAAA6E,EAAAzJ,OAAA6a,EAAA,EAAA7a,CAAAoK,EAAAC,EAAAyQ,KAEd,SAAA9Q,EAAMitB,GAAN,IAAA8F,EAAAnuB,EAAA,OAAAxE,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAAC,MAAA,OACAuyB,EAAWhG,EAAKvQ,MAAMyR,YAAc,IAAMlB,EAAKvQ,MAAMhkB,YAAYuM,KAAK,KAAO,IAAMgoB,EAAKvQ,MAAMjC,cAAc,GAAGrjB,KAG/G0N,EAAUxC,EAAS6qB,EAFT8F,EAAW,QAGzBhG,EAAKvL,SAAS,CACVtgB,SAAU6xB,EACVlwB,QAASoqB,EACTroB,QAASA,IAIbmoB,EAAKvL,SAAS,CACV1nB,SAAS,IAbT,wBAAAyG,EAAAM,SAAAb,MAFc,gBAAAH,GAAA,OAAAJ,EAAAzC,MAAAnB,KAAA7C,YAAA,wCAqBnBulB,GACPA,EAAMC,iBACN,IAAMtmB,EAAO2D,KAAK2gB,MAAMtkB,KACxB2D,KAAK2gB,MAAM8O,aAAa/M,EAAO,CAC3B1Q,SAAU3V,EAAKhB,KACf0N,QAAS/I,KAAK9C,MAAM6L,2CAuDnBouB,GAOL,QANc,IAAIC,OAAO,wKAKC,KACT71B,KAAK41B,uCAcdzU,GACR1iB,KAAK9C,MAAM6L,QAAU,GACrB/I,KAAK2gB,MAAMsE,YAAYvC,oCAIlB,IAAA2U,EAAAr3B,KACGpE,EAASoE,KAAK2gB,MAAd/kB,KACR,OACIylB,EAAA7c,EAAA6Y,cAACuS,GAAAprB,EAAD,CAAQ5I,KAAMA,EAAMwqB,QAASpmB,KAAKilB,YAAYqL,KAAKtwB,MAAO6vB,kBAAgB,qBAAqBC,WAAW,EAAMC,SAAU,MACtH1O,EAAA7c,EAAA6Y,cAAA,YACIgE,EAAA7c,EAAA6Y,cAAC2S,GAAAxrB,EAAD,CAAa5K,GAAG,sBAAhB,qBACuBoG,KAAK9C,MAAMmI,UAElCgc,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,KACIzU,EAAA7c,EAAA6Y,cAACia,GAAA9yB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAA,gBACIgE,EAAA7c,EAAA6Y,cAAA,YACAgE,EAAA7c,EAAA6Y,cAAA,OAAKyE,MAAO,CAAE0F,MAAO,MAAO+P,QAAS,cACrClW,EAAA7c,EAAA6Y,cAAA,OAAKyE,MAAO,CAAE0F,MAAO,SACrBnG,EAAA7c,EAAA6Y,cAAA,aAEJgE,EAAA7c,EAAA6Y,cAACma,GAAAhzB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACoa,GAAAjzB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACqa,GAAAlzB,EAAD,CAAW+yB,QAAQ,YAAnB,SACAlW,EAAA7c,EAAA6Y,cAACqa,GAAAlzB,EAAD,CAAW+yB,QAAQ,QAAnB,SACAlW,EAAA7c,EAAA6Y,cAACqa,GAAAlzB,EAAD,CAAW+yB,QAAQ,QAAnB,QACAlW,EAAA7c,EAAA6Y,cAACqa,GAAAlzB,EAAD,CAAW+yB,QAAQ,YAAnB,YAGRlW,EAAA7c,EAAA6Y,cAACsa,GAAAnzB,EAAD,KACKxE,KAAK9C,MAAM6L,QAAQpQ,IAAI,SAAA0D,GAAI,OAAIglB,EAAA7c,EAAA6Y,cAACoa,GAAAjzB,EAAD,CAAUhE,IAAKnE,EAAKsJ,MAChD0b,EAAA7c,EAAA6Y,cAACqa,GAAAlzB,EAAD,CAAW+yB,QAAQ,YACflW,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAkBzF,MAAM,GAAG5qB,QACvB4b,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAUxB,QAASj4B,EAAKqJ,QACpB0kB,SAAUiN,EAAK7N,aAAantB,EAAKsJ,KAAM,SACvCnI,MAAM,QACN4mB,MAAM,eAGlB/C,EAAA7c,EAAA6Y,cAACqa,GAAAlzB,EAAD,CAAW+yB,QAAQ,QACflW,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAOhG,WAAW,EAAMtyB,MAAOnB,EAAK+I,MAAOglB,SAAUiN,EAAKb,iBAAiBn6B,EAAKsJ,MAAOwkB,YAAY,uBAEvG9I,EAAA7c,EAAA6Y,cAACqa,GAAAlzB,EAAD,CAAW+yB,QAAQ,QACflW,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAkBzF,MAAM,OAAO5qB,QAC3B4b,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAUxB,QAASj4B,EAAKiJ,KACpB8kB,SAAUiN,EAAK7N,aAAantB,EAAKsJ,KAAM,QACvCnI,MAAM,OACN4mB,MAAM,cAEd/C,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAkBzF,MAAM,QAAQ5qB,QAC5B4b,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAUxB,QAASj4B,EAAKkJ,MACpB6kB,SAAUiN,EAAK7N,aAAantB,EAAKsJ,KAAM,SACvCnI,MAAM,QACN4mB,MAAM,cAEd/C,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAkBzF,MAAM,SAAS5qB,QAC7B4b,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAUxB,QAASj4B,EAAKmJ,OACpB4kB,SAAUiN,EAAK7N,aAAantB,EAAKsJ,KAAM,UACvCnI,MAAM,SACN4mB,MAAM,cAEd/C,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAkBzF,MAAM,UAAU5qB,QAC9B4b,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAUxB,QAASj4B,EAAKoJ,QACpB2kB,SAAUiN,EAAK7N,aAAantB,EAAKsJ,KAAM,WACvCnI,MAAM,UACN4mB,MAAM,eAGlB/C,EAAA7c,EAAA6Y,cAACqa,GAAAlzB,EAAD,CAAW+yB,QAAQ,YACflW,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAUvU,QAAS8V,EAAKX,aAAar6B,EAAKsJ,OACtC0b,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,KACIzU,EAAA7c,EAAA6Y,cAACoN,GAAAjmB,EAAD,YAKhB6c,EAAA7c,EAAA6Y,cAACoa,GAAAjzB,EAAD,CAAUhE,IAAKR,KAAK9C,MAAM6L,QAAQ3L,QAC9BikB,EAAA7c,EAAA6Y,cAACqa,GAAAlzB,EAAD,CAAW+yB,QAAQ,YACflW,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAkBzF,MAAM,GAAG5qB,QACvB4b,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAUxB,QAASt0B,KAAK9C,MAAMmY,MAC1B+U,SAAUpqB,KAAK82B,gBAAgB,SAC/Bt5B,MAAM,QACN4mB,MAAM,eAGlB/C,EAAA7c,EAAA6Y,cAACqa,GAAAlzB,EAAD,CAAW+yB,QAAQ,QACflW,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAOhG,WAAW,EAAMtyB,MAAOwC,KAAK9C,MAAMkI,MAAOglB,SAAUpqB,KAAKy2B,sBAAuB78B,GAAG,WAAWuwB,YAAY,uBAErH9I,EAAA7c,EAAA6Y,cAACqa,GAAAlzB,EAAD,CAAW+yB,QAAQ,QACflW,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAkBzF,MAAM,OAAO5qB,QAC3B4b,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAUxB,QAASt0B,KAAK9C,MAAMoI,KAC1B8kB,SAAUpqB,KAAK82B,gBAAgB,QAC/Bt5B,MAAM,OACN4mB,MAAM,cAEd/C,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAkBzF,MAAM,QAAQ5qB,QAC5B4b,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAUxB,QAASt0B,KAAK9C,MAAMqI,MAC1B6kB,SAAUpqB,KAAK82B,gBAAgB,SAC/Bt5B,MAAM,QACN4mB,MAAM,cAEd/C,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAkBzF,MAAM,SAAS5qB,QAC7B4b,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAUxB,QAASt0B,KAAK9C,MAAMsI,OAC1B4kB,SAAUpqB,KAAK82B,gBAAgB,UAC/Bt5B,MAAM,SACN4mB,MAAM,cAEd/C,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAkBzF,MAAM,UAAU5qB,QAC9B4b,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAUxB,QAASt0B,KAAK9C,MAAMuI,QAC1B2kB,SAAUpqB,KAAK82B,gBAAgB,WAC/Bt5B,MAAM,UACN4mB,MAAM,eAGlB/C,EAAA7c,EAAA6Y,cAACqa,GAAAlzB,EAAD,CAAW+yB,QAAQ,YACflW,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAUvU,QAASvhB,KAAK+2B,aACpB1V,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,KACIzU,EAAA7c,EAAA6Y,cAACua,GAAApzB,EAAD,aAQ5B6c,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAASvhB,KAAKilB,YAAYqL,KAAKtwB,MAAOokB,MAAM,UAAU7mB,KAAK,UAAnE,UAGA8jB,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ4f,MAAM,UAAU7C,QAASvhB,KAAK2xB,WAAWrB,KAAKtwB,MAAOzC,KAAK,UAAlE,kBAnQC6kB,aAkTVC,eAvBS,SAACnlB,GACrB,MAAO,CACHtB,KAAMsB,EAAMY,eAAeytB,eAC3BlvB,KAAMa,EAAMd,MAAMF,SAAS,GAC3Bw0B,QAASxzB,EAAMO,MAAQ,GACvB20B,YAAal1B,EAAMD,QAAQxC,MAAQ,GACnCkC,YAAaO,EAAMgB,KACnBwgB,cAAexhB,EAAMd,MAAMF,WAIR,SAAC2d,GACxB,MAAO,CACHoL,YAAa,SAACvC,GACV7I,E7C2VqC,SAACA,EAAUC,GAC1DD,EAASgC,GAAsB,IAC/BhC,EAASyB,GAAY9gB,EAAQ+wB,iBAC7B1R,EAAS0F,S6C5VHkQ,aAAc,SAAC/M,EAADrU,GAAkC,I7CRpBzG,EAAkB2J,E6CQtBS,EAAwB3D,EAAxB2D,SAAUjJ,EAAcsF,EAAdtF,QAC9B2Z,EAAMC,iBACN9I,G7CVwBjS,E6CUKoK,E7CVaT,E6CUHxI,E7CVmC,SAAC8Q,EAAUC,GAAa,IACpG5b,EAAS4b,IAAT5b,KACR2b,EAASE,MAGTnS,GAAY,OAEZyU,GAAqBne,EAAKgL,KAAK,KAAMtB,EAAU2J,GAC5CxS,KAAK,SAAAob,GACJN,EAASyB,GAAY9gB,EAAQ+wB,iBAC7B1R,EAAS2B,QAEV9b,MAAM,SAAAya,GAAC,OAAIN,EAASO,GAAgBC,OAAOF,OAC3CG,QAAQ,kBAAMT,EAASU,c6CEb8H,CAA6C8M,ICtTtDA,8MACFjyB,MAAQ,CACJuzB,YAAa,KACb9U,eAAgB,MAChBkc,YAAa,MAsCjBrB,iBAAmB,kBAAM,SAAC9T,GACtB/N,EAAKzX,MAAM26B,YAAcnV,EAAMyR,OAAO32B,MACtCmX,EAAKgR,SAALxrB,OAAAuB,EAAA,EAAAvB,CAAA,GAAmBwa,EAAKzX,MAAxB/C,OAAAmB,EAAA,EAAAnB,CAAA,GAAgCkB,KAAOqnB,EAAMyR,OAAO32B,uFAtC3CklB,GACT,IAAMrmB,EAAO2D,KAAK2gB,MAAMtkB,KAClBsf,EAAiB3b,KAAK9C,MAAMye,eAC5Bkc,EAAc73B,KAAK9C,MAAM26B,YAC3Bx7B,GACA2D,KAAK2gB,MAAM8O,aAAa/M,EAAO,CAAErmB,OAAMsf,iBAAgBkc,6DAI1C,IAAA3G,EAAAlxB,KACbA,KAAK2gB,MAAM+P,UAAY1wB,KAAK9C,MAAMuzB,cAClCzwB,KAAK2lB,SAAS,CACV8K,YAAazwB,KAAK2gB,MAAM+P,UAE5B1wB,KAAK2lB,SAAS,CACV1nB,SAAS,IAGb+B,KAAK2gB,MAAM+P,SAAWS,MAAMnxB,KAAK2gB,MAAM+P,SAAS3xB,KAAK,SAAAob,GACjD,OAAOA,EAAE/V,SACVrF,KAFmB,eAAA6E,EAAAzJ,OAAA6a,EAAA,EAAA7a,CAAAoK,EAAAC,EAAAyQ,KAEd,SAAA9Q,EAAMitB,GAAN,IAAAxuB,EAAAf,EAAA,OAAA0C,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAAC,MAAA,OACA/B,EAAOsuB,EAAKvQ,MAAMyR,YAAc,IAAMlB,EAAKvQ,MAAMhkB,YAAYuM,KAAK,KAAO,IAAMgoB,EAAKvQ,MAAMjC,cAAc,GAAGrjB,KAAO,OAClHwG,EAAU6G,GAAW0oB,EAAGxuB,GAC5BsuB,EAAKvL,SAAS,CACVhK,eAAgB9Z,EAChBmF,QAASoqB,IAIbF,EAAKvL,SAAS,CACV1nB,SAAS,IAVT,wBAAAyG,EAAAM,SAAAb,MAFc,gBAAAH,GAAA,OAAAJ,EAAAzC,MAAAnB,KAAA7C,YAAA,sCAuBrB,IAAAujB,EAC0F1gB,KAAK2gB,MAA5FsE,EADHvE,EACGuE,YAAasO,EADhB7S,EACgB6S,YAAa33B,EAD7B8kB,EAC6B9kB,KAAMm4B,EADnCrT,EACmCqT,UAAWj3B,EAD9C4jB,EAC8C5jB,SAAUD,EADxD6jB,EACwD7jB,SAAU22B,EADlE9S,EACkE8S,oBAEvE,OACInS,EAAA7c,EAAA6Y,cAACuS,GAAAprB,EAAD,CAAQ5I,KAAMA,EAAMwqB,QAASnB,EAAa4K,kBAAgB,qBAAqBC,WAAW,EAAMC,SAAU,MACtG1O,EAAA7c,EAAA6Y,cAAA,YACIgE,EAAA7c,EAAA6Y,cAAC2S,GAAAxrB,EAAD,CAAa5K,GAAG,sBAAhB,mBAGAynB,EAAA7c,EAAA6Y,cAAC4S,GAAAzrB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAahG,WAAW,GACpBzO,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAYlC,QAAQ,cAApB,mBACAvS,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAOl8B,GAAG,aAAam8B,mBAAiB,iBAAiBv4B,MAAOwC,KAAK9C,MAAMye,eAAgBgX,UAAQ,KAEvGtR,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAahG,WAAW,GACpBzO,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAYlC,QAAQ,cAApB,eACAvS,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAOhG,WAAW,EAAM1F,SAAUpqB,KAAKw2B,mBAAoB58B,GAAG,aAAauwB,YAAY,uBAE3F9I,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAahG,WAAW,GACpBzO,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAYlC,QAAQ,cAApB,WACAvS,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAOhG,WAAW,EAAMl2B,GAAG,UAAUuwB,YAAY,wBAErD9I,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAahG,WAAW,GACpBzO,EAAA7c,EAAA6Y,cAAC2W,GAAD,CAAcn3B,SAAUA,EAAU22B,oBAAqBA,EAAqBD,YAAaA,IACxFQ,EAAY1S,EAAA7c,EAAA6Y,cAAC4W,GAAAzvB,EAAD,CAAgB8gB,QAAQ,cAAc9nB,MAAOV,IAAe,OAGjFukB,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ+c,QAAS0D,EAAab,MAAM,UAAU7mB,KAAK,UAAnD,UAGA8jB,EAAA7c,EAAA6Y,cAAC8J,GAAA3iB,EAAD,CAAQ4f,MAAM,UAAU7C,QAASvhB,KAAKyvB,aAAaa,KAAKtwB,MAAO2yB,UAAWoB,EAAWx2B,KAAK,UAA1F,oBA9EC6kB,aA4IVC,eAlCS,SAACnlB,GACrB,MAAO,CACHtB,KAAMsB,EAAMY,eAAe0hB,gBAC3BnjB,KAAMa,EAAMd,MAAMF,SAAS,GAC3B63B,YAAW72B,EAAMiB,OAAOtB,UAAWK,EAAMiB,OAAOtB,SAASO,OAAS,EAClEP,SAAUK,EAAMiB,OAAOtB,SACvBC,SAAUI,EAAMiB,OAAOrB,SACvB4zB,QAASxzB,EAAMO,MAAQ,GACvB20B,YAAal1B,EAAMD,QAAQxC,MAAQ,GACnCkC,YAAaO,EAAMgB,KACnBwgB,cAAexhB,EAAMd,MAAMF,WAIR,SAAC2d,GACxB,MAAO,CAEHoL,YAAa,SAACvC,GACV7I,EAASiC,OAEb2T,aAAc,SAAC/M,EAADrU,GAAkD,IAAxChS,EAAwCgS,EAAxChS,KAAMsf,EAAkCtN,EAAlCsN,eAAgBkc,EAAkBxpB,EAAlBwpB,YAC1CnV,EAAMC,iBACN9I,EAAS4B,GAAoBpf,EAAMsf,EAAgBkc,KAEvDrE,oBAAqB,SAAC9Q,GAClB,IAAM7f,EAAQ6f,EAAMyR,OAAOtxB,MAC3BgX,EAASyG,GAAkBzd,KAE/B0wB,YAAa,eAMNlR,CAA6C8M,IC/ItD2I,8MACF56B,MAAQ,CACJuzB,YAAa,KACb9U,eAAgB,MAChBoc,aAAc,CAAEvvB,QAAQ,GAAIC,WAAY,IACxCpN,KAAMsZ,EAAKgM,MAAMjC,cAAc,GAAK/J,EAAKgM,MAAMjC,cAAc,GAAGrjB,KAAO,MA+B3Em7B,iBAAmB,SAACh2B,GAAD,OAAiB,SAACkiB,GACtB,WAAPliB,IACAmU,EAAKzX,MAAM66B,aAAavvB,QAAUka,EAAMyR,OAAO32B,OACxC,cAAPgD,IACAmU,EAAKzX,MAAM66B,aAAatvB,WAAaia,EAAMyR,OAAO32B,OACtDmX,EAAKgR,SAALxrB,OAAAuB,EAAA,EAAAvB,CAAA,GAAmBwa,EAAKzX,MAAxB/C,OAAAmB,EAAA,EAAAnB,CAAA,GAAgCkB,KAAOqnB,EAAMyR,OAAO32B,+FAjCnC,IAAA0zB,EAAAlxB,KACbA,KAAK2gB,MAAM+P,UAAY1wB,KAAK9C,MAAMuzB,cAClCzwB,KAAK2lB,SAAS,CACV8K,YAAazwB,KAAK2gB,MAAM+P,UAE5B1wB,KAAK2lB,SAAS,CACV1nB,SAAS,IAGb+B,KAAK2gB,MAAM+P,SAAWS,MAAMnxB,KAAK2gB,MAAM+P,SAAS3xB,KAAK,SAAAob,GACjD,OAAOA,EAAE/V,SACVrF,KAFmB,eAAA6E,EAAAzJ,OAAA6a,EAAA,EAAA7a,CAAAoK,EAAAC,EAAAyQ,KAEd,SAAA9Q,EAAMitB,GAAN,IAAAxuB,EAAAoE,EAAA,OAAAzC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAAC,MAAA,OACA/B,EAAOsuB,EAAKvQ,MAAMyR,YAAc,IAAMlB,EAAKvQ,MAAMhkB,YAAYuM,KAAK,KAAO,IAAMgoB,EAAKvQ,MAAMjC,cAAc,GAAGrjB,KAC3G2L,EAAU4B,GAAWwoB,EAAGxuB,GAC5BsuB,EAAKvL,SAAS,CACVtqB,KAAMuH,EACNm1B,aAAc/wB,EACdA,QAASoqB,IAIbF,EAAKvL,SAAS,CACV1nB,SAAS,IAXT,wBAAAyG,EAAAM,SAAAb,MAFc,gBAAAH,GAAA,OAAAJ,EAAAzC,MAAAnB,KAAA7C,YAAA,0CA2BjBulB,GACT,IAAMrmB,EAAO2D,KAAK2gB,MAAMtkB,KAClB07B,EAAe/3B,KAAK9C,MAAM66B,aAC5B17B,GACA2D,KAAK2gB,MAAM8O,aAAa/M,EAAO,CAAErmB,OAAM07B,kDAItC,IAAArX,EACmD1gB,KAAK2gB,MAArDsE,EADHvE,EACGuE,YAAarpB,EADhB8kB,EACgB9kB,KADhB8kB,EACsB0R,YADtB1R,EACmC/jB,YACxC,OACI0kB,EAAA7c,EAAA6Y,cAACuS,GAAAprB,EAAD,CAAQ5I,KAAMA,EAAMwqB,QAASnB,EAAa4K,kBAAgB,qBAAqBC,WAAW,EAAMC,SAAU,MACtG1O,EAAA7c,EAAA6Y,cAAA,YACIgE,EAAA7c,EAAA6Y,cAAC2S,GAAAxrB,EAAD,CAAa5K,GAAG,sBAAhB,mBAGAynB,EAAA7c,EAAA6Y,cAAC4S,GAAAzrB,EAAD,KACKxE,KAAK9C,MAAM7B,KACZgmB,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAahG,WAAW,GACpBzO,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAYlC,QAAQ,YAApB,WACAvS,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAOt4B,MAAOwC,KAAK9C,MAAM66B,aAAavvB,QAAS4hB,SAAUpqB,KAAKw2B,iBAAiB,WAAY58B,GAAG,UAAUm8B,mBAAiB,oBAE7H1U,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAahG,WAAW,GACpBzO,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAYlC,QAAQ,YAApB,cACAvS,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAOt4B,MAAOwC,KAAK9C,MAAM66B,aAAatvB,WAAYkqB,UAAQ,EAACvI,SAAUpqB,KAAKw2B,iBAAiB,cAAe58B,GAAG,aAAam8B,mBAAiB,qBAGnJ1U,EAAA7c,EAAA6Y,cAACkT,GAAA/rB,EAAD,KACI6c,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAQvU,QAAS0D,EAAab,MAAM,UAAU7mB,KAAK,UAAnD,SAGA8jB,EAAA7c,EAAA6Y,cAACyY,GAAA,EAAD,CAAQ1R,MAAM,UAAU7C,QAASvhB,KAAKyvB,aAAaa,KAAKtwB,MAAOzC,KAAK,UAApE,oBA3EK6kB,aAsIdC,eAhCS,SAACnlB,GACrB,MAAO,CACHtB,KAAMsB,EAAMY,eAAeyd,gBAC3BmV,QAASxzB,EAAMO,MAAQ,GACvBpB,KAAMa,EAAMd,MAAMF,SAAS,GAC3Bk2B,YAAal1B,EAAMD,QAAQxC,MAAQ,GACnCkC,YAAaO,EAAMgB,KACnBwgB,cAAexhB,EAAMd,MAAMF,WAIR,SAAC2d,GAExB,MAAO,CAEHoL,YAAa,SAACvC,GACV7I,EAASyB,GAAY9gB,EAAQ+gB,mBAEjCkU,aAAc,SAAC/M,EAADrU,GAAmC,IAAzBhS,EAAyBgS,EAAzBhS,KAAM07B,EAAmB1pB,EAAnB0pB,aAC1BrV,EAAMC,iBACN9I,EAASkB,GAAiB1e,EAAM07B,KAEpCvE,oBAAqB,SAAC9Q,GACJA,EAAMyR,OAAOtxB,OAG/B0wB,YAAa,eAMNlR,CAA6CyV,IC9G7CE,OArBf,WACI,OACI3W,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAU,WACXD,EAAA7c,EAAA6Y,cAAC4a,GAAD,MACA5W,EAAA7c,EAAA6Y,cAAC6a,GAAD,MACA7W,EAAA7c,EAAA6Y,cAAC8a,GAAD,MACA9W,EAAA7c,EAAA6Y,cAAC+a,GAAD,MACA/W,EAAA7c,EAAA6Y,cAACgb,GAAD,MACAhX,EAAA7c,EAAA6Y,cAACib,GAAD,MACAjX,EAAA7c,EAAA6Y,cAACkb,GAAD,MACAlX,EAAA7c,EAAA6Y,cAACmb,GAAD,MACAnX,EAAA7c,EAAA6Y,cAACob,GAAD,MACApX,EAAA7c,EAAA6Y,cAACqb,GAAD,MACArX,EAAA7c,EAAA6Y,cAACsb,GAAD,MACAtX,EAAA7c,EAAA6Y,cAACub,GAAD,MACAvX,EAAA7c,EAAA6Y,cAACwb,GAAD,MACAxX,EAAA7c,EAAA6Y,cAACyb,GAAD,uECjBNC,oLACK,IAAArY,EACgE1gB,KAAK2gB,MAApEwD,EADDzD,EACCyD,QAAS6U,EADVtY,EACUsY,SAAU/T,EADpBvE,EACoBuE,YAAarpB,EADjC8kB,EACiC9kB,KAAMq9B,EADvCvY,EACuCuY,qBAC9C,OACE5X,EAAA7c,EAAA6Y,cAAA,WACEgE,EAAA7c,EAAA6Y,cAAC6b,GAAA10B,EAAD,CACE20B,aAAc,CACZjN,SAAU,SACVC,WAAY,QAEdvwB,KAAMA,EACNw9B,iBAAkBH,EAClB7S,QAASnB,EACToU,aAAc,CACZtD,mBAAoB,cAEtBruB,QAAS2Z,EAAA7c,EAAA6Y,cAAA,QAAMzjB,GAAG,cAAco/B,GAChC17B,OAAQ,CACN+jB,EAAA7c,EAAA6Y,cAACyI,GAAAthB,EAAD,CAAYhE,IAAI,QAAQulB,aAAW,QAAQ3B,MAAM,UAAU9C,UAAW6C,EAAQmV,MAAO/X,QAAS0D,GAC5F5D,EAAA7c,EAAA6Y,cAACkc,GAAA/0B,EAAD,kBAnBgBgiB,IAAMpE,WAsDrBC,eAhBS,SAACnlB,GACrB,MAAO,CACHtB,OAAQsB,EAAMa,aACdi7B,SAAU97B,EAAMa,aAChBk7B,qBAAsB,MAIH,SAACpf,GACxB,MAAO,CACHoL,YAAa,WACXpL,EjDirB6BO,GAAgB,QiD5qBxCiI,CAA6CoB,sBA5D7C,SAACC,GAAD,OAAkBC,wBAAa,CAC5C2V,MAAO,CACL/B,QAAS7T,EAAMG,QAAQC,KAAO,MA0D0BL,CAAmBsV,KCzDzErV,GAAQ8V,0BAAe,CACzBpR,QAAS,CACLlG,QAASkS,MAEbqF,WAAY,CACRC,iBAAiB,KAInBC,+LAGE35B,KAAK2gB,MAAMiZ,wCAIX,OACIvY,EAAA7c,EAAA6Y,cAAA,OAAKiE,UAAU,OACXD,EAAA7c,EAAA6Y,cAACwc,GAAA,iBAAD,CAAYnW,MAAOA,IACfrC,EAAA7c,EAAA6Y,cAAA,OAAKkE,QAASvhB,KAAK2gB,MAAMmZ,sBAAuBrY,cAAezhB,KAAK2gB,MAAMmZ,uBACtEzY,EAAA7c,EAAA6Y,cAAC0c,GAAD,MACA1Y,EAAA7c,EAAA6Y,cAAC2c,GAAD,MACA3Y,EAAA7c,EAAA6Y,cAAC4c,GAAD,MACA5Y,EAAA7c,EAAA6Y,cAAC6c,GAAD,MACA7Y,EAAA7c,EAAA6Y,cAAC8c,GAAD,QAGR9Y,EAAA7c,EAAA6Y,cAAC+c,GAAD,cAlBEhY,aAiDHC,eAlBS,iBAAO,IAEJ,SAACxI,GACxB,MAAO,CACH+f,KAAM,WACF/f,ElD3C0B,SAACA,EAAUC,GAC/CD,EAASK,MACTL,EAASkE,GAAWvjB,EAAQg2B,qBkD4CtBsJ,sBAAuB,SAACpX,GACpB,IAAM2X,EAAU3X,EAAMyR,OACI,UAApBkG,EAAQC,SAAuB,SAAS/4B,KAAK84B,EAAQ/Y,YACvDoB,EAAMC,iBAEV9I,EAAS2G,SAKN6B,CAA6CsX,IC5DtDY,kBAAQC,YAAYC,EAASC,YAAgBC,OAEnDC,IAASC,OACLxZ,EAAA7c,EAAA6Y,cAACyd,EAAA,EAAD,CAAUP,MAAOA,IACblZ,EAAA7c,EAAA6Y,cAAC0d,GAAD,OAEF3d,SAAS4d,eAAe,S3DKvB,SAAkBtgC,GACvB,GAA6C,kBAAmBkE,UAAW,CAGzE,GADkB,IAAIlB,IAAIu9B,IAAwB38B,OAAOC,SAAS+e,MACpDyR,SAAWzwB,OAAOC,SAASwwB,OAIvC,OAGFzwB,OAAO48B,iBAAiB,OAAQ,WAC9B,IAAMv8B,EAAK,GAAAlC,OAAMw+B,IAAN,sBAEP78B,GAgEV,SAAiCO,EAAejE,GAE9Cy2B,MAAMxyB,GACHI,KAAK,SAAA8M,GAEJ,IAAMxH,EAAcwH,EAASP,QAAQxK,IAAI,gBAEnB,MAApB+K,EAASqH,QACO,MAAf7O,IAA8D,IAAvCA,EAAYwa,QAAQ,cAG5CjgB,UAAUC,cAAcs8B,MAAMp8B,KAAK,SAAAC,GACjCA,EAAao8B,aAAar8B,KAAK,WAC7BT,OAAOC,SAAS88B,aAKpB38B,EAAgBC,EAAOjE,KAG1BgF,MAAM,WACLJ,QAAQC,IACN,mEArFA+7B,CAAwB38B,EAAOjE,GAI/BkE,UAAUC,cAAcs8B,MAAMp8B,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,EAAOjE,M2D5B/BmE,CAAuB,CACnBW,SAAU,SAAC9E,GACP4E,QAAQ+V,MAAM,0BACd/V,QAAQC,IAAI7E,GACZ4E,QAAQuW,YAEZpW,UAAW,SAAC/E,GACR4E,QAAQ+V,MAAM,2BACd/V,QAAQC,IAAI7E,GACZ4E,QAAQuW","file":"static/js/main.4d61f4ef.chunk.js","sourcesContent":["var map = {\n\t\"./N3Lexer\": 191,\n\t\"./N3Lexer.js\": 191,\n\t\"./N3Parser\": 192,\n\t\"./N3Parser.js\": 192,\n\t\"./N3Store\": 257,\n\t\"./N3Store.js\": 257,\n\t\"./N3StreamParser\": 258,\n\t\"./N3StreamParser.js\": 258,\n\t\"./N3StreamWriter\": 264,\n\t\"./N3StreamWriter.js\": 264,\n\t\"./N3Util\": 193,\n\t\"./N3Util.js\": 193,\n\t\"./N3Writer\": 197,\n\t\"./N3Writer.js\": 197\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 475;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 655;","import { Item } from \"../Api/Item\";\r\n\r\nexport interface Action<V> {\r\n    type: string;\r\n    value: V;\r\n};\r\n\r\nexport const SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\r\nexport const ENTER_FOLDER = 'ENTER_FOLDER';\r\nexport const MOVE_FOLDER_UPWARDS = 'MOVE_FOLDER_UPWARDS';\r\nexport const SET_PATH = 'SET_PATH';\r\n\r\nexport const SET_LOGGED_IN = 'SET_LOGGED_IN';\r\nexport const SET_LOGGED_OUT = 'SET_LOGGED_OUT';\r\nexport const RESET_HOST = 'RESET_HOST';\r\nexport const SET_HOST = 'SET_HOST'; // TODO: Consider renaming to BASE_URL\r\nexport const RESET_WEB_ID = 'RESET_WEB_ID';\r\nexport const SET_WEB_ID = 'SET_WEB_ID';\r\n\r\nexport const SET_ITEMS = 'SET_ITEMS';\r\nexport const SET_ACLITEMS = 'SET_ACLITEMS';\r\n\r\nexport const SELECT_ITEMS = 'SELECT_ITEMS';\r\nexport const TOGGLE_SELECTED_ITEM = 'TOGGLE_SELECTED_ITEM';\r\nexport const DESELECT_ITEM = 'DESELECT_ITEM';\r\n\r\nexport const FILTER_ITEMS = 'FILTER_ITEMS';\r\nexport const RESET_FILTER = 'REMOVE_FILTER';\r\n\r\nexport const DISPLAY_LOADING = 'DISPLAY_LOADING';\r\nexport const STOP_LOADING = 'STOP_LOADING';\r\n\r\nexport const RESET_LOADED_BLOB = 'RESET_LOADED_BLOB';\r\nexport const SET_LOADED_BLOB = 'SET_LOADED_BLOB';\r\n\r\nexport const SET_UPLOAD_FILE_PROGRESS = 'SET_UPLOAD_FILE_PROGRESS';\r\nexport const SET_UPLOAD_FILE_LIST = 'SET_UPLOAD_FILE_LIST';\r\n\r\nexport const OPEN_CONTEXT_MENU = 'OPEN_CONTEXT_MENU';\r\nexport const CLOSE_CONTEXT_MENU = 'CLOSE_CONTEXT_MENU';\r\n\r\nexport const OPEN_DIALOG = 'OPEN_DIALOG';\r\nexport const CLOSE_DIALOG = 'CLOSE_DIALOG';\r\n\r\nexport enum DIALOGS {\r\n    CHOOSE_LOCATION = 'CHOOSE_LOCATION',\r\n    CREATE_FOLDER = 'CREATE_FOLDER',\r\n    CREATE_FILE = 'CREATE_FILE',\r\n    UPLOAD_FILE = 'UPLOAD_FILE',\r\n    EXPOSE_METADATA = 'EXPOSE_METADATA',\r\n    ADD_NEW_VERSION = 'ADD_NEW_VERSION',\r\n    UPLOAD_METADATA = 'UPLOAD_METADATA',\r\n    ACCESS_CONTROL = 'ACCESS_CONTROL',\r\n    RENAME = 'RENAME',\r\n    MOVE = 'MOVE',\r\n    COPY = 'COPY',\r\n    CONTENT = 'CONTENT',\r\n    MEDIA = 'MEDIA',\r\n    EDIT = 'EDIT',\r\n    CONTEXT_MENU = 'CONTEXT_MENU',\r\n};","let host: string | null = null;\r\n\r\nexport default {\r\n    getHost() {\r\n        return host;\r\n    },\r\n    setHost(newHost: string) {\r\n        host = newHost;\r\n        while (host.endsWith('/'))\r\n            host = host.slice(0, -1);\r\n    }\r\n};\r\n","import { Action, SET_LOGGED_IN, SET_LOGGED_OUT, SET_HOST, SET_WEB_ID, RESET_HOST, RESET_WEB_ID } from \"../Actions/actionTypes\";\r\nimport config from \"../config\";\r\n\r\ninterface AccountState {\r\n    loggedIn: boolean;\r\n    host: string | null;\r\n    webId: string | null;\r\n}\r\n\r\nconst initialState: AccountState = {\r\n    loggedIn: false,\r\n    host: null,\r\n    webId: null\r\n};\r\n\r\nexport const account = (state = initialState, action: Action<string|null|void>): AccountState => {\r\n    switch(action.type) {\r\n        case SET_LOGGED_IN:\r\n            return { ...state, loggedIn: true };\r\n        case SET_LOGGED_OUT:\r\n            return { ...state, loggedIn: false };\r\n        case SET_HOST:\r\n            config.setHost(action.value as string); // TODO\r\n            return { ...state, host: action.value as string };\r\n        case RESET_HOST:\r\n            return { ...state, host: null };\r\n        case SET_WEB_ID:\r\n            return { ...state, webId: action.value as string|null };\r\n        case RESET_WEB_ID:\r\n            return { ...state, webId: null };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { DIALOGS, Action, OPEN_DIALOG, CLOSE_DIALOG, OPEN_CONTEXT_MENU, CLOSE_CONTEXT_MENU } from \"../Actions/actionTypes\";\r\n\r\n// Initialize state with values of DIALOGS as keys and false (closed) as value\r\nconst initialVisibleDialogs: Record<DIALOGS, boolean> = Object.values(DIALOGS)\r\n    .map((name: DIALOGS) => ({ [name]: false } as Record<DIALOGS, boolean>))\r\n    .reduce((prev, cur) => ({ ...prev, ...cur })) as Record<DIALOGS, boolean>;\r\n\r\nexport const visibleDialogs = (state = initialVisibleDialogs, action: Action<DIALOGS>): typeof initialVisibleDialogs => {\r\n    switch (action.type) {\r\n        case OPEN_DIALOG:\r\n            return { ...state, [action.value]: true };\r\n        case CLOSE_DIALOG:\r\n            return { ...state, [action.value]: false };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialContextMenuState = {\r\n    open: false,\r\n    x: 0,\r\n    y: 0,\r\n};\r\n\r\nexport const contextMenu = (state = initialContextMenuState, action: Action<any>): typeof initialContextMenuState => {\r\n    switch (action.type) {\r\n        case OPEN_CONTEXT_MENU:\r\n            return {\r\n                ...state,\r\n                open: true,\r\n                x: action.value.x,\r\n                y: action.value.y\r\n            };\r\n        case CLOSE_CONTEXT_MENU:\r\n            return { ...state, open: false };\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Item } from \"../Api/Item\";\r\nimport { Action, SET_ITEMS, SELECT_ITEMS, DESELECT_ITEM, FILTER_ITEMS, RESET_FILTER, TOGGLE_SELECTED_ITEM } from \"../Actions/actionTypes\";\r\n\r\ninterface ItemsState {\r\n    inCurFolder: Item[];\r\n    filter: string;\r\n    selected: Item[];\r\n}\r\n\r\nconst initialItemsState: ItemsState = {\r\n    inCurFolder: [],\r\n    filter: '',\r\n    selected: [],\r\n};\r\n\r\nexport const items = (state = initialItemsState, action: Action<any>): ItemsState => {\r\n    switch(action.type) {\r\n        case SET_ITEMS:\r\n            return { ...state, inCurFolder: action.value as Item[] };\r\n        case SELECT_ITEMS:\r\n            return { ...state, selected: action.value as Item[] };\r\n        case DESELECT_ITEM:\r\n            return { ...state, selected: removeItem(state.selected, action.value as Item) };\r\n        case TOGGLE_SELECTED_ITEM:\r\n            return { \r\n                ...state,\r\n                selected: state.selected.includes(action.value) ?\r\n                    removeItem(state.selected, action.value as Item)\r\n                    : addItem(state.selected, action.value as Item)\r\n            };\r\n        case FILTER_ITEMS:\r\n            return { ...state, filter: action.value as string };\r\n        case RESET_FILTER:\r\n            return { ...state, filter: '' };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst removeItem = (items: Item[], item: Item) => {\r\n    return items.filter(selectedItem => !selectedItem.equals(item));\r\n}\r\n\r\nconst addItem = (items: Item[], item: Item) => {\r\n    return [...items, item];\r\n}","import { Action, ENTER_FOLDER, SET_PATH, MOVE_FOLDER_UPWARDS } from \"../Actions/actionTypes\";\r\n\r\n\r\nconst initialPath: string[] = [];\r\n\r\nexport const path = (state = initialPath, action: Action<any>): typeof initialPath => {\r\n    switch(action.type) {\r\n        case ENTER_FOLDER:\r\n            return [...state, action.value];\r\n        case MOVE_FOLDER_UPWARDS:\r\n            return action.value > 0 ?\r\n                state.slice(0, -action.value)\r\n                : state;\r\n        case SET_PATH:\r\n            return [...action.value];\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Action, SET_UPLOAD_FILE_LIST, SET_UPLOAD_FILE_PROGRESS } from \"../Actions/actionTypes\";\r\n\r\nconst initialUploadState = {\r\n    fileList: null as FileList|null,\r\n    progress: 0,\r\n};\r\n\r\nexport const upload = (state = initialUploadState, action: Action<FileList|number>): typeof initialUploadState => {\r\n    switch(action.type) {\r\n        case SET_UPLOAD_FILE_LIST:\r\n            return { ...state, fileList: action.value as FileList };\r\n        case SET_UPLOAD_FILE_PROGRESS:\r\n            return { ...state, progress: action.value as number };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { account } from './accountReducer';\r\nimport { blob } from './currentBlobReducer';\r\nimport { visibleDialogs, contextMenu } from './dialogsReducer';\r\nimport { errorMessage } from './errorReducer';\r\nimport { items } from './itemsReducer';\r\nimport { loading } from './loadingReducer';\r\nimport { path } from './pathReducer';\r\nimport { upload } from './uploadReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    account,\r\n    blob,\r\n    contextMenu,\r\n    visibleDialogs,\r\n    errorMessage,\r\n    items,\r\n    loading,\r\n    path,\r\n    upload,\r\n});\r\n\r\nexport default rootReducer;\r\nexport type AppState = ReturnType<typeof rootReducer>;","import { Action, SET_LOADED_BLOB, RESET_LOADED_BLOB } from \"../Actions/actionTypes\";\r\n\r\nexport const blob = (state: string|null = null, action: Action<Blob>): typeof state => {\r\n    switch(action.type) {\r\n        case SET_LOADED_BLOB:\r\n            return URL.createObjectURL(action.value);\r\n        case RESET_LOADED_BLOB:\r\n            if (state !== null)\r\n                URL.revokeObjectURL(state);\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Action, SET_ERROR_MESSAGE } from \"../Actions/actionTypes\";\r\n\r\nexport const errorMessage = (state = '', action: Action<string>): typeof state => {\r\n    switch(action.type) {\r\n        case SET_ERROR_MESSAGE:\r\n            return action.value;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Action, DISPLAY_LOADING, STOP_LOADING } from \"../Actions/actionTypes\";\r\n\r\nconst initialLoadingState: boolean = false;\r\n\r\nexport const loading = (state = initialLoadingState, action: Action<void>): boolean => {\r\n    switch(action.type) {\r\n        case DISPLAY_LOADING:\r\n            return true;\r\n        case STOP_LOADING:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config: ServiceWorkerConfig) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config: ServiceWorkerConfig) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config: ServiceWorkerConfig) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n\r\n\r\nexport interface ServiceWorkerConfig {\r\n  onUpdate(registration: ServiceWorkerRegistration): void;\r\n  onSuccess(registration: ServiceWorkerRegistration): void;\r\n}","/**\r\n * Class for an arbitrary item from a solid pod\r\n */\r\nexport class Item {\r\n    _name: string;\r\n    _path: string[];\r\n    _url: string;\r\n    _size?: string\r\n\r\n    constructor(url: string, size?: string) {\r\n        const path = getPathFromUrl(url);\r\n\r\n        this._name = path.pop() || '';\r\n        this._path = path;\r\n        this._url = url;\r\n        this._size = size;\r\n    }\r\n\r\n    // Make properties readonly\r\n    get name() { return this._name; }\r\n    get path() { return this._path; }\r\n    get url() { return this._url; }\r\n    get size() { return this._size; }\r\n\r\n    equals(item: Item) {\r\n        return this.name === item.name\r\n            && this.path.length === item.path.length\r\n            && this.path.every((val, index) => val === item.path[index]);\r\n    }\r\n\r\n    getDisplayName() {\r\n        return decodeURI(this.name);\r\n    }\r\n\r\n    getDisplaySize() {\r\n        return this._size ? getHumanFileSize(this._size) : 'Unknown size';\r\n    }\r\n}\r\n\r\nexport class FileItem extends Item {\r\n    isImage() {\r\n        return patterns.image.test(this.name);\r\n    }\r\n\r\n    isMedia() {\r\n        return patterns.media.test(this.name);\r\n    }\r\n\r\n    isEditable() {\r\n        return patterns.editable.test(this.name);\r\n    }\r\n\r\n    isExtractable() {\r\n        return patterns.extractable.test(this.name);\r\n    }\r\n\r\n    isMetadata() {\r\n        return patterns.metadata.test(this.name);\r\n    }\r\n\r\n    isNotUpdateable(){\r\n        return !patterns.notUpdatable.test(this.name);\r\n    }\r\n\r\n    isVersionFile(){\r\n        return patterns.version.test(this.name);\r\n    }\r\n\r\n    isVideo() {\r\n        return patterns.video.test(this.name);\r\n    }\r\n}\r\n\r\nexport class FolderItem extends Item { }\r\n\r\n\r\n// regex patterns for testing if a file is of a specific type\r\nconst patterns = {\r\n    editable: /\\.(txt|diff?|patch|svg|asc|cnf|cfg|conf|html?|cfm|cgi|aspx?|ini|pl|py|md|css|cs|jsx?|jsp|log|htaccess|htpasswd|gitignore|gitattributes|env|json|atom|eml|rss|markdown|sql|xml|xslt?|sh|rb|as|bat|cmd|cob|for|ftn|frm|frx|inc|lisp|scm|coffee|php[3-6]?|java|c|cbl|go|h|scala|vb|tmpl|lock|go|yml|yaml|tsv|lst|ttl)$/i,\r\n    image: /\\.(jpe?g|gif|bmp|png|svg|tiff?)$/i,\r\n    media: /\\.(mp3|ogg|wav|mp4|webm)$/i,\r\n    video: /\\.(mp4|webm|ogg)$/i,\r\n    extractable: /\\.(zip)$/i,\r\n    metadata: /\\.(ttl|n3)$/i,\r\n    version: /\\.(old)$/i,\r\n    notUpdatable: /\\.(old|ttl|n3)$/i\r\n};\r\n\r\n/**\r\n * Calculate file size by bytes in human readable format\r\n */\r\nexport const getHumanFileSize = (byteString: string|number): string => {\r\n    const bytes = typeof byteString === 'string' ?\r\n        parseInt(byteString)\r\n        : byteString;\r\n    const e = (Math.log(bytes) / Math.log(1e3)) | 0;\r\n    return +(bytes / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';\r\n};\r\n\r\n\r\n/**\r\n * Get path including the last element (e.g. [public, test, index.html])\r\n */\r\nconst getPathFromUrl = (urlString: string): string[] => {\r\n    const url = new URL(urlString);\r\n    return url.pathname.split('/').filter(val => val !== '');\r\n}","// Based on https://github.com/jeff-zucker/solid-file-client/blob/master/src/folderUtils\r\nimport * as rdflib from 'rdflib';\r\nimport { FileItem, FolderItem } from './Item';\r\nimport { FolderItems } from './types';\r\n\r\nexport function getSizeByGraph(graph: rdflib.IndexedFormula, subjectName: string): string | undefined {\r\n    const subjectNode = rdflib.sym(subjectName);\r\n    const nsSize = rdflib.sym('http://www.w3.org/ns/posix/stat#size');\r\n    const size = graph.any(subjectNode, nsSize, undefined, undefined);\r\n\r\n    return (size && 'value' in size) ? size.value : undefined;\r\n}\r\n\r\n/**\r\n * @param {rdflib.IndexedFormula} graph a rdflib.graph() database instance\r\n * @param {string} baseUrl location of the folder\r\n * @returns {boolean}\r\n */\r\nexport function isFolder(graph: rdflib.IndexedFormula, baseUrl: string): boolean {\r\n    const folderNode = rdflib.sym(baseUrl);\r\n    const isAnInstanceOfClass = rdflib.sym('http://www.w3.org/1999/02/22-rdf-syntax-ns#type');\r\n    const types = graph.each(folderNode, isAnInstanceOfClass, undefined, undefined);\r\n    return Object.values(types)\r\n        .some(({ value }) => value.match('ldp#BasicContainer') !== null);\r\n}\r\n\r\nexport function getFolderItems(graph: rdflib.IndexedFormula, subj: string): FolderItems {\r\n    const files: FileItem[] = [];\r\n    const folders: FolderItem[] = [];\r\n\r\n    graph.each(\r\n        rdflib.sym(subj),\r\n        rdflib.sym('http://www.w3.org/ns/ldp#contains'),\r\n        undefined,\r\n        undefined\r\n    ).forEach(item => {\r\n        \r\n        const url = item.value;\r\n        const size = getSizeByGraph(graph, url);\r\n\r\n        if (isFolder(graph, url))\r\n            folders.push(new FolderItem(url, size));\r\n        else\r\n            files.push(new FileItem(url, size));\r\n    });\r\n\r\n    return { files, folders };\r\n}\r\n\r\n/**\r\n * @param {string} text RDF text that can be passed to $rdf.parse()\r\n * @param {string} baseUrl the base url of the item\r\n * @param {string} contentType Content-Type of the request\r\n * @returns {Promise<rdflib.IndexedFormula>} a rdfilb.graph() database instance with parsed RDF\r\n */\r\nexport async function text2graph(text: string, baseUrl: string, contentType: string = ''): Promise<rdflib.IndexedFormula> {\r\n    contentType = contentType || guessFileType(baseUrl);\r\n    const graph = rdflib.graph();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        rdflib.parse(text, graph, baseUrl, contentType, () => {});\r\n        resolve(graph);\r\n    });\r\n}\r\n\r\nfunction guessFileType(url: string): string {\r\n    const ext = url.replace(/.*\\./, '');\r\n    if (ext.match(/\\/$/)) return 'dir';\r\n    if (ext.match(/(md|markdown)/)) return 'text/markdown';\r\n    if (ext.match(/html/)) return 'text/html';\r\n    if (ext.match(/xml/)) return 'text/xml';\r\n    if (ext.match(/ttl/)) return 'text/turtle';\r\n    if (ext.match(/n3/)) return 'text/n3';\r\n    if (ext.match(/rq/)) return 'application/sparql';\r\n    if (ext.match(/css/)) return 'text/css';\r\n    if (ext.match(/txt/)) return 'text/plain';\r\n    if (ext.match(/json/)) return 'application/json';\r\n    if (ext.match(/js/)) return 'application/javascript';\r\n    if (ext.match(/(png|gif|jpeg|tif)/)) return 'image';\r\n    if (ext.match(/(mp3|aif|ogg)/)) return 'audio';\r\n    if (ext.match(/(avi|mp4|mpeg)/)) return 'video';\r\n    /* default */ return 'text/turtle';\r\n}\r\n","/**\r\n * Class for an ACL item in solid pod\r\n */\r\nexport class AclItem {\r\n    _key: number;\r\n    _agent: string;\r\n    _accessTo: string;\r\n    _read: boolean;\r\n    _write: boolean;\r\n    _append: boolean;\r\n    _control: boolean;\r\n    _isGroup: boolean;\r\n\r\n    constructor(key: number, agent: string, accessTo: string, read: boolean, write: boolean, append: boolean, control: boolean, isGroup: boolean) {\r\n        this._key = key;\r\n        this._agent = agent;\r\n        this._accessTo = accessTo;\r\n        this._read = read;\r\n        this._write = write;\r\n        this._append = append;\r\n        this._control = control;\r\n        this._isGroup = isGroup;\r\n    }\r\n\r\n    // Make properties readonly\r\n    get agent() { return this._agent; }\r\n    get accessTo() { return this._accessTo; }\r\n    get isGroup() { return this._isGroup; }\r\n    get read() { return this._read; }\r\n    get write() { return this._write; }\r\n    get append() { return this._append; }\r\n    get control() { return this._control; }\r\n}\r\n\r\n","import * as rdflib from 'rdflib';\r\nimport { AclItem } from './AclItem';\r\nimport { AclList } from './types';\r\n\r\nconst aclNamespace = \"http://www.w3.org/ns/auth/acl#\";\r\nconst pavOntology = \"http://purl.org/pav/\";\r\nconst dublinCoreOntology = \"http://purl.org/dc/terms/\";\r\nconst schemaOntology = \"http://schema.org/\"\r\n\r\nexport function parseACl(text: string, subj: string): AclItem[] {\r\n    const graph = rdflib.graph();\r\n    const acls: AclItem[] = [];\r\n\r\n    rdflib.parse(text, graph, subj, \"text/turtle\", () => {\r\n        let i = 0;\r\n        graph.each(\r\n            undefined, undefined, rdflib.sym(aclNamespace + 'Authorization'), rdflib.sym(subj)\r\n        ).forEach(item => {\r\n\r\n            const subject = item.value;\r\n            const isGroup = checkIsGroup(graph, subject);\r\n            const agentType = isGroup ? 'agentClass' : 'agent';\r\n            const agent = getAgentName(graph, subject, agentType);\r\n            const accessTo = getAccessToByGraph(graph, subject);\r\n            const read = getMode(graph, subject, \"Read\");\r\n            const write = getMode(graph, subject, \"Write\");\r\n            const append = getMode(graph, subject, \"Append\");\r\n            const control = getMode(graph, subject, \"Control\");\r\n            acls.push(new AclItem(i++, agent, accessTo, read, write, append, control, isGroup));\r\n        });\r\n    });\r\n    return acls;\r\n};\r\n\r\nexport function integrateInfo(content: string,dataURL: string, ttlURL: string){\r\n    const graph = rdflib.graph()\r\n    const updater = new rdflib.UpdateManager(graph);\r\n    const creatorTerm = \"creator\";\r\n    const contentURL = \"contentURL\";\r\n    const identifierTerm = \"url\";\r\n\r\n    \r\n    rdflib.parse(content, graph, ttlURL, \"text/turtle\", () => {\r\n        let metadata = graph.any(undefined, rdflib.sym(dublinCoreOntology + creatorTerm), undefined, rdflib.sym(ttlURL));\r\n        \r\n        let newStatement = [];\r\n        const wholeTtlNode = rdflib.sym(ttlURL);\r\n        const metadataNode = rdflib.sym(metadata.value);\r\n        newStatement.push(rdflib.st(metadataNode, rdflib.sym(schemaOntology + identifierTerm), ttlURL, wholeTtlNode));\r\n        newStatement.push(rdflib.st(metadataNode, rdflib.sym(schemaOntology + contentURL), dataURL, wholeTtlNode));\r\n        //call update to file\r\n        updater.update([], newStatement, (uri, ok, message) => {\r\n            if (!ok)\r\n                console.log('err:' + message)\r\n        })\r\n    });\r\n}\r\n\r\nexport function saveNewVersion(content: string, fileName: string, folderPath: string, newVersion: string, oldVersion: string): void {\r\n    const graph = rdflib.graph()\r\n    const updater = new rdflib.UpdateManager(graph);\r\n    const versionTerm = \"version\";\r\n    const creatorTerm = \"creator\";\r\n    const hasEarlierVersionTerm = \"hasEarlierVersion\";\r\n    const hasVersionTerm = \"hasVersion\";\r\n    const identifierTerm = \"url\";\r\n    const url = folderPath + \"/\" + fileName + \".ttl\";\r\n\r\n    rdflib.parse(content, graph, url, \"text/turtle\", () => {\r\n        let metadata = graph.any(undefined, rdflib.sym(dublinCoreOntology + creatorTerm), undefined, rdflib.sym(url));\r\n        //remove old version\r\n        let oldStatement = graph.match(rdflib.sym(metadata.value), rdflib.sym(pavOntology + versionTerm), undefined, undefined);\r\n        \r\n        let newStatement = [];\r\n        const wholeTtlNode = rdflib.sym(url);\r\n        const metadataNode = rdflib.sym(metadata.value);\r\n        const oldFileUrl = folderPath + \"/\"+ versionTerm +\"/\" + oldVersion + \"/\" + fileName + \".old\";\r\n        const newNodePrevVer = rdflib.sym(oldFileUrl);\r\n        //update new version \r\n        newStatement.push(rdflib.st(metadataNode, rdflib.sym(pavOntology + versionTerm), newVersion, wholeTtlNode));\r\n        //update hasEarlierVersion\r\n        newStatement.push(rdflib.st(metadataNode, rdflib.sym(pavOntology + hasEarlierVersionTerm), newNodePrevVer, wholeTtlNode));\r\n        //define new statement for previous version\r\n        newStatement.push(rdflib.st(newNodePrevVer, rdflib.sym(pavOntology + hasVersionTerm), oldVersion, wholeTtlNode));\r\n        newStatement.push(rdflib.st(newNodePrevVer, rdflib.sym(schemaOntology + identifierTerm), oldFileUrl, wholeTtlNode));\r\n\r\n        //call update to file\r\n        updater.update(oldStatement, newStatement, (uri, ok, message) => {\r\n            if (!ok)\r\n                console.log('err:' + message)\r\n        })\r\n    });\r\n};\r\n\r\nexport function exposeMetadata(remoteRegistryUrl: string, content: string, ttlURL: string, newContent: {keyword:string, discipline:string}): void {\r\n    const graph = rdflib.graph();\r\n    const updater = new rdflib.UpdateManager(graph);\r\n\r\n    const updatedSubj = rdflib.sym(ttlURL);\r\n    const remotedGraph = rdflib.sym(remoteRegistryUrl);\r\n    const keywordTerm = \"keyword\";\r\n    const typeTerm = \"type\";\r\n    const subjectTerm = \"subject\";\r\n    const identifierTerm = \"url\";\r\n\r\n    rdflib.parse(content, graph, remoteRegistryUrl, \"text/turtle\", () => {\r\n        //old statements \r\n        let oldStatement = []\r\n        oldStatement= graph.match(updatedSubj, rdflib.sym(schemaOntology + keywordTerm), undefined,  remotedGraph);\r\n        //new statements\r\n        let newStatement = [];\r\n        newStatement.push(rdflib.st(updatedSubj, rdflib.sym(dublinCoreOntology + typeTerm), \"Metadata\", remotedGraph));\r\n        newStatement.push(rdflib.st(updatedSubj, rdflib.sym(schemaOntology + keywordTerm), newContent.keyword, remotedGraph));\r\n        newStatement.push(rdflib.st(updatedSubj, rdflib.sym(dublinCoreOntology + subjectTerm), newContent.discipline, remotedGraph));\r\n        newStatement.push(rdflib.st(updatedSubj, rdflib.sym(schemaOntology + identifierTerm), updatedSubj, remotedGraph));\r\n\r\n        updater.update(oldStatement, newStatement, (uri, ok, message) => {\r\n            if (!ok)\r\n                console.log('err:' + message)\r\n        })\r\n    });\r\n}\r\n\r\nexport function getVersion(text: string, subj: string): string {\r\n    const graph = rdflib.graph();\r\n    let versionNum = \"\";\r\n    rdflib.parse(text, graph, subj, \"text/turtle\", () => {\r\n        let version = graph.match(\r\n            undefined, rdflib.sym(pavOntology + \"version\"), undefined, rdflib.sym(subj)\r\n        )\r\n        if (version.length)\r\n            versionNum = version[0]['object']['value']\r\n    });\r\n    return versionNum;\r\n};\r\n\r\nexport function getContent(text: string, subj: string): {} {\r\n    const graph = rdflib.graph();\r\n    let content = { keyword: \"\", discipline: \"\" };\r\n    rdflib.parse(text, graph, subj, \"text/turtle\", () => {\r\n        let root = graph.any(\r\n            undefined, rdflib.sym(schemaOntology + \"keyword\"), undefined, rdflib.sym(subj)\r\n        );\r\n        if (root && root.value) {\r\n            let keyword = graph.any(\r\n                rdflib.sym(root.value), rdflib.sym(schemaOntology + \"keyword\"), undefined, undefined\r\n            )\r\n            if (keyword) content.keyword = keyword.value;\r\n            let discipline = graph.any(\r\n                rdflib.sym(root.value), rdflib.sym(dublinCoreOntology + \"subject\"), undefined, undefined\r\n            )\r\n            if (discipline) content.discipline = discipline.value;\r\n        }\r\n    });\r\n    return content;\r\n};\r\n\r\n\r\n/**\r\n * @param {string} text RDF text that can be passed to $rdf.parse()\r\n * @param {string} baseUrl the base url of the item\r\n * @returns {Promise<rdflib.IndexedFormula>} a rdfilb.graph() database instance with parsed RDF\r\n */\r\nexport async function aclText2graph(text: string, baseUrl: string): Promise<rdflib.IndexedFormula> {\r\n    const contentType = 'text/turtle';\r\n    const graph = rdflib.graph();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        rdflib.parse(text, graph, baseUrl, contentType, () => { });\r\n        resolve(graph);\r\n    });\r\n}\r\n\r\n\r\nexport function buildACLContent(aclList: AclItem[]): string {\r\n    let arrAuth: String[] = [];\r\n    aclList.forEach(item => {\r\n        if (!item._agent)\r\n            return;\r\n        if (!item._read && !item._write && !item._control && !item._append)\r\n            return;\r\n        arrAuth.push(``);\r\n        arrAuth.push(`<#authorization${item._key}> a  acl:Authorization;`);\r\n        arrAuth.push(`acl:${item._isGroup ? 'agentClass' : 'agent'} <${item._agent}>;`);\r\n        arrAuth.push(`acl:defaultForNew <./>;`);\r\n        arrAuth.push(`acl:accessTo <${item._accessTo}>;`);\r\n        let arrMode = [];\r\n        if (item._read)\r\n            arrMode.push('acl:Read');\r\n        if (item._write)\r\n            arrMode.push('acl:Write');\r\n        if (item._append)\r\n            arrMode.push('acl:Append');\r\n        if (item._control)\r\n            arrMode.push('acl:Control');\r\n        arrAuth.push(`acl:mode  ${arrMode.join(\", \")}.`);\r\n    });\r\n    return '@prefix  acl:  <http://www.w3.org/ns/auth/acl#> . \\n' + arrAuth.join(\"\\n\");\r\n}\r\n\r\nexport function getAclList(graph: rdflib.IndexedFormula, subj: string): AclList {\r\n    const acls: AclItem[] = [];\r\n    let i = 1;\r\n    graph.each(\r\n        undefined, undefined, rdflib.sym(aclNamespace + 'Authorization'), rdflib.sym(subj)\r\n    ).forEach(item => {\r\n\r\n        const subject = item.value;\r\n        const isGroup = checkIsGroup(graph, subject);\r\n        const agentType = isGroup ? 'agentClass' : 'agent';\r\n        const agent = getAgentName(graph, subject, agentType);\r\n        const accessTo = getAccessToByGraph(graph, subject);\r\n        const read = getMode(graph, subject, \"Read\");\r\n        const write = getMode(graph, subject, \"Write\");\r\n        const append = getMode(graph, subject, \"Append\");\r\n        const control = getMode(graph, subject, \"Control\");\r\n        acls.push(new AclItem(i++, agent, accessTo, read, write, append, control, isGroup));\r\n    });\r\n    return { acls };\r\n}\r\n\r\nexport function getAccessToByGraph(graph: rdflib.IndexedFormula, subjectName: string): string {\r\n    const subjectNode = rdflib.sym(subjectName);\r\n    const accessTo = graph.any(subjectNode, rdflib.sym(aclNamespace + 'accessTo'), undefined, undefined);\r\n    return (accessTo && 'value' in accessTo) ? accessTo.value : \"\";\r\n}\r\n\r\nexport function getAgentName(graph: rdflib.IndexedFormula, subjectName: string, agentType: string): string {\r\n    const subjectNode = rdflib.sym(subjectName);\r\n    const agent = graph.any(subjectNode, rdflib.sym(aclNamespace + agentType), undefined, undefined);\r\n    return (agent && 'value' in agent) ? agent.value : \"\";\r\n}\r\n\r\nexport function getMode(graph: rdflib.IndexedFormula, subjectName: string, modeName: string): boolean {\r\n    const subjectNode = rdflib.sym(subjectName);\r\n    const mode = graph.match(subjectNode, rdflib.sym(aclNamespace + 'mode'), rdflib.sym(aclNamespace + modeName), undefined);\r\n    return (mode && mode.length == 1) ? true : false;\r\n}\r\n\r\nexport function checkIsGroup(graph: rdflib.IndexedFormula, subjectName: string): boolean {\r\n    const subjectNode = rdflib.sym(subjectName);\r\n    const agentClass = graph.match(subjectNode, rdflib.sym(aclNamespace + 'agentClass'), undefined, undefined);\r\n    return (agentClass && agentClass.length == 1) ? true : false;\r\n}","import config from './../config';\r\nimport * as folderUtils from './folderUtils';\r\nimport * as aclUtils from './aclUtils';\r\nimport * as solidAuth from 'solid-auth-client';\r\nimport { FolderItems, AclList } from './types';\r\nimport { AclItem } from './AclItem';\r\nimport { promises } from 'fs';\r\nconst fileClient = require('solid-file-client');\r\n\r\nexport async function createACL(path: string, fileName: string, content: Blob | string): Promise<boolean> {\r\n    const baseUrl = `${config.getHost()}${path}`;\r\n    const filePath = baseUrl + \"/\" + fileName;\r\n    return fileClient.createFile(filePath, content).then((fileCreated: any) => {\r\n        console.log(`Created acl file ${fileCreated}.`);\r\n        return true;\r\n    }, (err: any) => {\r\n        console.log(err);\r\n        return false;\r\n    });\r\n}\r\n/**\r\n * Fetch API to get item\r\n */\r\nexport async function fetchFile(path: string, fileName?: string): Promise<Response> {\r\n    const url = buildFileUrl(path, fileName);\r\n\r\n    return solidAuth.fetch(url)\r\n        .then(assertSuccessfulResponse);\r\n};\r\n\r\n/**\r\n * Fetch API to get item\r\n */\r\nexport async function fetchRemoteFile(url: string): Promise<Response> {\r\n    return solidAuth.fetch(url)\r\n        .then(assertSuccessfulResponse);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to get folder\r\n */\r\nexport async function fetchFolder(path: string, folderName?: string): Promise<Response> {\r\n    const url = buildFolderUrl(path, folderName);\r\n    return solidAuth.fetch(url, { headers: { \"Accept\": \"text/turtle\" } })\r\n        .then(assertSuccessfulResponse);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to retrieve object containing a files and folders array\r\n */\r\nexport async function readFolder(path: string, folderName?: string): Promise<FolderItems> {\r\n    const url = buildFolderUrl(path, folderName);\r\n\r\n    const response = await fetchFolder(path, folderName);\r\n    const folderRDF = await response.text();\r\n    const graph = await folderUtils.text2graph(folderRDF, url, 'text/turtle');\r\n    const folderItems = folderUtils.getFolderItems(graph, url);\r\n\r\n    return folderItems;\r\n}\r\n\r\n/**\r\n * Fetch API to retrieve acl triple\r\n */\r\nexport async function readAcl(path: string, aclFileName?: string): Promise<AclList> {\r\n    const url = buildFileUrl(path, aclFileName);\r\n\r\n    const response = await fetchFile(path, aclFileName);\r\n    const responseRDF = await response.text();\r\n    const graph = await aclUtils.aclText2graph(responseRDF, url);\r\n    const aclList = aclUtils.getAclList(graph, url);\r\n\r\n    return aclList;\r\n}\r\n\r\nexport async function updateVersion(path: string, fileName: string, newVersion: string, oldVersion: string) {\r\n    const folderPath = buildFileUrl(path, \"\");\r\n    const response = await fetchFile(path, fileName + \".ttl\");\r\n    const responseRDF = await response.text();\r\n    aclUtils.saveNewVersion(responseRDF, fileName, folderPath, newVersion, oldVersion);\r\n}\r\n\r\nexport async function integrateInfo(path: string, fileName: string, metadataFileName: string){\r\n    const dataURL = buildFileUrl(path, fileName);\r\n    const ttlURL = buildFileUrl(path, metadataFileName);\r\n    const response = await fetchFile(path, metadataFileName);\r\n    const responseRDF = await response.text();\r\n    aclUtils.integrateInfo(responseRDF, dataURL, ttlURL);\r\n}\r\n\r\nexport async function exposeMetadata(path: string, fileName: string, newContent: { keyword: string, discipline: string }) {\r\n    const ttlURL = buildFileUrl(\"/\" + path, fileName);\r\n    const remoteRegistryURL = \"https://davu.solid.community/public/registry/index.ttl\";\r\n    const response = await fetchRemoteFile(remoteRegistryURL);\r\n    const registryRDF = await response.text();\r\n    aclUtils.exposeMetadata(remoteRegistryURL , registryRDF, ttlURL, newContent);\r\n}\r\n\r\n\r\n\r\n/**\r\n * Fetch API to move items\r\n */\r\nexport async function moveItems(path: string, destination: string, itemNames: string[]): Promise<Response> {\r\n    await copyItems(path, destination, itemNames);\r\n    return removeItems(path, itemNames);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to rename a file\r\n */\r\nexport async function renameFile(path: string, oldName: string, newName: string): Promise<Response> {\r\n    await copyFile(path, oldName, path, newName);\r\n    return removeItem(path, oldName);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to rename a folder\r\n */\r\nexport async function renameFolder(path: string, oldFolderName: string, newFolderName: string): Promise<Response> {\r\n    await copyFolder(path, oldFolderName, path, newFolderName);\r\n    return removeFolderRecursively(path, oldFolderName);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to copy files\r\n */\r\nexport async function copyItems(path: string, destination: string, itemNames: string[]): Promise<Response> {\r\n    let { files, folders } = await readFolder(path);\r\n\r\n    files = files.filter(({ name }) => itemNames.includes(name));\r\n    folders = folders.filter(({ name }) => itemNames.includes(name));\r\n\r\n    const promises = [\r\n        ...files.map(({ name }) => copyFile(path, name, destination, name)),\r\n        ...folders.map(({ name }) => copyFolder(path, name, destination, name))\r\n    ];\r\n\r\n    await Promise.all(promises);\r\n    return new Response();\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to copy a file\r\n */\r\nexport async function copyFile(originPath: string, originName: string, destinationPath: string, destinationName: string): Promise<Response> {\r\n    const fileResponse = await fetchFile(originPath, originName);\r\n    const content = await fileResponse.blob();\r\n\r\n    return createFile(destinationPath, destinationName, content);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to copy a folder recursively\r\n */\r\nexport async function copyFolder(originPath: string, originName: string, destinationPath: string, destinationName: string): Promise<Response> {\r\n    // TODO: Combine these two promises for better performance\r\n    await createFolder(destinationPath, destinationName);\r\n    const { files, folders } = await readFolder(originPath, originName);\r\n\r\n    const promises = [\r\n        ...files.map(({ name }) => copyFile(`${originPath}/${originName}`, name, `${destinationPath}/${destinationName}`, name)),\r\n        ...folders.map(({ name }) => copyFolder(`${originPath}/${originName}`, name, `${destinationPath}/${destinationName}`, name))\r\n    ];\r\n\r\n    await Promise.all(promises);\r\n    return new Response();\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to upload files\r\n */\r\nexport async function upload(path: string, fileList: FileList): Promise<Response> {\r\n    const promises = Array.from(fileList).map(file => updateFile(path, file.name, file));\r\n    await Promise.all(promises);\r\n    return new Response();\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to create a folder\r\n */\r\nexport async function createFolder(path: string, folderName: string): Promise<Response> {\r\n    if (await folderExists(path, folderName))\r\n        return new Response();\r\n\r\n    return createItem(path, folderName, new Blob(), '<http://www.w3.org/ns/ldp#BasicContainer>; rel=\"type\"');\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to replace or create a new file\r\n */\r\nexport async function updateFile(path: string, fileName: string, content: Blob | string): Promise<Response> {\r\n    await removeItem(path, fileName);\r\n    return createFile(path, fileName, content);\r\n}\r\n\r\n/**\r\n * Fetch API to replace or create a new ACL file\r\n */\r\nexport async function updateACLFile(path: string, fileName: string, aclItem: AclItem[]): Promise<boolean> {\r\n    await removeItem(path, fileName);\r\n    console.log(\"Remove ACL file\");\r\n    const content = await aclUtils.buildACLContent(aclItem);\r\n    return createACL(path, fileName, content);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to create a new file\r\n */\r\nexport async function createFile(path: string, fileName: string, content: Blob | string): Promise<Response> {\r\n    return createItem(path, fileName, content, '<http://www.w3.org/ns/ldp#Resource>; rel=\"type\"');\r\n}\r\n\r\n\r\nexport function getBasedUrl(path: string) {\r\n    return `${config.getHost()}${path}`;\r\n}\r\n\r\nasync function createItem(path: string, itemName: string, content: Blob | string, link: string): Promise<Response> {\r\n    const baseUrl = `${config.getHost()}${path}`;\r\n    const request = {\r\n        method: 'POST',\r\n        headers: {\r\n            link,\r\n            slug: itemName,\r\n            'Content-Type': <any>undefined // TODO: This hack can be removed if this issue is fixed: https://github.com/solid/node-solid-server/issues/1165\r\n        },\r\n        body: content\r\n    };\r\n    return solidAuth.fetch(baseUrl, request)\r\n        .then(assertSuccessfulResponse);\r\n}\r\n\r\n/**\r\n * Fetch API to remove multiple items\r\n */\r\nexport async function removeItems(path: string, itemNames: string[]): Promise<Response> {\r\n    return Promise.all(itemNames.map(itemName => removeItem(path, itemName)))\r\n        .then(() => new Response());\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to remove one item\r\n */\r\nexport async function removeItem(path: string, itemName: string): Promise<Response> {\r\n    const url = buildFileUrl(path, itemName);\r\n\r\n    const response = await solidAuth.fetch(url, { method: 'DELETE' });\r\n    if (response.status === 409 || response.status === 301) {\r\n        // Solid pod returns 409 if the item is a folder and is not empty\r\n        // Solid pod returns 301 if is attempted to read a folder url without '/' at the end (from buildFileUrl)\r\n        return removeFolderRecursively(path, itemName);\r\n    }\r\n    else if (response.status === 404) {\r\n        // Don't throw if the item didn't exist\r\n        return response;\r\n    }\r\n    else {\r\n        assertSuccessfulResponse(response);\r\n        return response;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to remove contents and folder itself recursively\r\n */\r\nexport async function removeFolderRecursively(path: string, folderName: string): Promise<Response> {\r\n    await removeFolderContents(path, folderName);\r\n    return removeItem(path, folderName);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to remove contents of one folder recursively\r\n */\r\nexport async function removeFolderContents(path: string, folderName: string): Promise<Response> {\r\n    const folderPath = `${path}/${folderName}`;\r\n\r\n    const { files, folders } = await readFolder(path, folderName);\r\n    const promises = [\r\n        ...files.map(({ name }) => removeItem(folderPath, name)),\r\n        ...folders.map(({ name }) => removeFolderRecursively(folderPath, name))\r\n    ];\r\n    await Promise.all(promises);\r\n    return new Response();\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to check if a folder exists\r\n */\r\nexport async function folderExists(path: string, folderName: string): Promise<boolean> {\r\n    try {\r\n        await fetchFolder(path, folderName);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        if (error instanceof Response && error.status === 404)\r\n            return false;\r\n\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Build up an url from a path relative to the storage location and a folder name\r\n */\r\nfunction buildFolderUrl(path: string, folderName?: string): string {\r\n    return buildFileUrl(path, folderName) + '/';\r\n}\r\n\r\n\r\n/**\r\n * Build up an url from a path relative to the storage location and a fileName\r\n */\r\nfunction buildFileUrl(path: string, fileName?: string): string {\r\n    let url = `${config.getHost()}${path}/${fileName || ''}`;\r\n    while (url.slice(-1) === '/')\r\n        url = url.slice(0, -1);\r\n\r\n    return url;\r\n}\r\n\r\n\r\n/**\r\n * Throw response if fetch response was unsuccessful\r\n * @param {Response} response\r\n * @returns {Response}\r\n */\r\nfunction assertSuccessfulResponse(response: Response): Response {\r\n    if (!response.ok)\r\n        throw response;\r\n    return response;\r\n}\r\n","import * as API from './Api';\r\nimport JSZip from 'jszip';\r\nimport { FileItem, FolderItem, Item } from './Item';\r\nimport ApiCache from './ApiCache';\r\nimport { AclItem } from './AclItem';\r\n\r\nconst cache = new ApiCache();\r\n\r\n\r\n/**\r\n * Log a fetch response error and throw it again\r\n * @param {*} error \r\n */\r\nconst handleFetchError = async (error: Error | Response | string) => {\r\n    let detailedErrorMessage = '';\r\n    let displayErrorMessage: string | undefined;\r\n\r\n    console.group('handleFetchError');\r\n    if (error instanceof Response) {\r\n        detailedErrorMessage = await error.text();\r\n\r\n        console.error(`url: ${error.url}`);\r\n        console.error(`status: ${error.status}`);\r\n\r\n        const displayMessages: Record<string, string> = {\r\n            '401': `The ressource at ${error.url} requires you to login.`,\r\n            '403': `You don't have permission to access the ressource at ${error.url}.\r\n            Please make sure that you are logged in with the correct account.\r\n            If the server runs with version 5.0.0 or higher, make sure you gave this app read/write permission`,\r\n            '404': `The ressource at ${error.url} was not found`,\r\n            '500': `An internal server error occured...\r\n            ${detailedErrorMessage}`,\r\n        };\r\n        if (error.status in displayMessages)\r\n            displayErrorMessage = displayMessages[error.status];\r\n    }\r\n    else if (error instanceof Error) {\r\n        detailedErrorMessage = error.message;\r\n        console.error(error.stack);\r\n    }\r\n    else if (typeof error === 'string') {\r\n        detailedErrorMessage = error;\r\n    }\r\n    else {\r\n        detailedErrorMessage = JSON.stringify(error);\r\n    }\r\n    console.error(`errorMessage: ${detailedErrorMessage}`);\r\n    console.error(`error: ${error}`);\r\n    console.groupEnd();\r\n\r\n    throw new Error((displayErrorMessage) ? displayErrorMessage : detailedErrorMessage);\r\n}\r\n\r\n/**\r\n * Clean path string removing double slashes and prepending a slash if non-empty\r\n */\r\nconst fixPath = (path: string): string => {\r\n    if (path === \"\")\r\n        return path;\r\n    return ('/' + path).replace(/\\/\\//g, '/');\r\n};\r\n\r\n/**\r\n * Wrap API response for retrieving item list\r\n * itemList is cached automatically\r\n * @param {String} path\r\n * @returns {Promise<API.FolderItems>}\r\n */\r\nexport const getItemList = (path: string): Promise<Item[]> => {\r\n    path = fixPath(path);\r\n    if (cache.contains(path))\r\n        return Promise.resolve(cache.get(path));\r\n    return API.readFolder(path)\r\n        .then(({ files, folders }) => [...files, ...folders])\r\n        .then(itemList => cache.add(path, itemList))\r\n        .catch(handleFetchError);\r\n};\r\n\r\nexport const clearCacheForFolder = (path: string) => cache.remove(fixPath(path));\r\nexport const clearCache = () => cache.clear();\r\nexport const getBasedURL = (p: string) => {return API.getBasedUrl(fixPath(p))}\r\n/**\r\n * Wrap API response for retrieving file content\r\n */\r\nexport const getFileBlob = (path: string, filename: string): Promise<Blob> => {\r\n    path = fixPath(path);\r\n    return API.fetchFile(path, filename)\r\n        .then(response => response.blob())\r\n        .catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API response for retrieving file content\r\n */\r\nexport const getFileACL = (path: string, filename: string): Promise<AclItem[]> => {\r\n    path = fixPath(path);\r\n    return API.readAcl(path, filename)\r\n        .then(({ acls }) => acls)\r\n        .catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API response for renaming a file\r\n */\r\nexport const renameFile = (path: string, fileName: string, newFileName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.renameFile(path, fileName, newFileName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n\r\n/**\r\n * Wrap API response for renaming a folder\r\n */\r\nexport const renameFolder = (path: string, folderName: string, newFolderName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.renameFolder(path, folderName, newFolderName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for creating a folder\r\n */\r\nexport const createFolder = (path: string, folderName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    if (!(folderName || '').trim()) {\r\n        return Promise.reject('Invalid folder name');\r\n    }\r\n    return API.createFolder(path, folderName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for removing a file or folder\r\n */\r\nexport const removeItems = (path: string, filenames: string[]): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    if (!filenames.length) {\r\n        return Promise.reject('No files to remove');\r\n    }\r\n    return API.removeItems(path, filenames)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for moving a file or folder\r\n */\r\nexport const moveItems = (path: string, destination: string, filenames: string[]): Promise<Response> => {\r\n    path = fixPath(path);\r\n    destination = fixPath(destination);\r\n    cache.remove(path, destination);\r\n    if (!filenames.length) {\r\n        return Promise.reject('No files to move');\r\n    }\r\n    return API.moveItems(path, destination, filenames)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for copying a file or folder\r\n */\r\nexport const copyItems = (path: string, destination: string, filenames: string[]): Promise<Response> => {\r\n    path = fixPath(path);\r\n    destination = fixPath(destination);\r\n    cache.remove(path, destination);\r\n    if (!filenames.length) {\r\n        return Promise.reject('No files to copy');\r\n    }\r\n    return API.copyItems(path, destination, filenames)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for uploading files\r\n */\r\nexport const uploadFiles = (path: string, fileList: FileList): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n\r\n    if (!fileList.length) {\r\n        return Promise.reject('No files to upload');\r\n    }\r\n    return API.upload(path, fileList)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for uploading a file\r\n */\r\nexport const updateFile = (path: string, fileName: string, content: Blob|string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.updateFile(path, fileName, content)\r\n        .catch(handleFetchError);\r\n};\r\n\r\nexport const integrateInfo= (path: string, dataFileName: string, metadataFileName: string) => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.integrateInfo(path, dataFileName, metadataFileName)\r\n        .catch(handleFetchError);\r\n}\r\n\r\n\r\nexport const createACL = (path: string, fileName: string, content: Blob|string): Promise<boolean> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.createACL(path, fileName, content)\r\n        .catch(handleFetchError);\r\n};\r\n\r\nexport const updateACL = (path: string, fileName: string, aclItem: AclItem[]): Promise<boolean> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.updateACLFile(path, fileName, aclItem).catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API response for zipping multiple items\r\n */\r\nexport const getAsZip = (path: string, itemList: Item[]): Promise<JSZip> => {\r\n    path = fixPath(path);\r\n    const zip = new JSZip();\r\n\r\n    return addItemsToZip(zip, path, itemList)\r\n        .then(() => zip);\r\n}\r\n\r\n/**\r\n * Add items to a zip object recursively\r\n */\r\nconst addItemsToZip = (zip: JSZip, path: string, itemList: Item[]): Promise<void[]> => {\r\n    const promises = itemList.map(async item => {\r\n        if (item instanceof FolderItem) {\r\n            const zipFolder = zip.folder(item.name);\r\n            const folderPath = `${path}/${item.name}`;\r\n            const folderItems = await getItemList(folderPath);\r\n            await addItemsToZip(zipFolder, folderPath, folderItems);\r\n        }\r\n        else if (item instanceof FileItem) {\r\n            const blob = await getFileBlob(path, item.name);\r\n            zip.file(item.name, blob, { binary: true });\r\n        }\r\n    });\r\n\r\n    return Promise.all(promises);\r\n}\r\n\r\n/**\r\n * Wrap API response for extracting a zip archive\r\n */\r\nexport const extractZipArchive = async (path: string, destination: string = path, fileName: string) => {\r\n    const blob = await getFileBlob(path, fileName);\r\n    const zip = await JSZip.loadAsync(blob);\r\n\r\n    return uploadExtractedZipArchive(zip, destination);\r\n};\r\n\r\n/**\r\n * Recursively upload all files and folders from an extracted zip archive\r\n */\r\nasync function uploadExtractedZipArchive(zip: JSZip, destination: string, curFolder = ''): Promise<void[]> {\r\n    const promises = getItemsInZipFolder(zip, curFolder)\r\n        .map(async item => {\r\n            const relativePath = item.name;\r\n            const itemName = getItemNameFromPath(relativePath);\r\n            const path = getParentPathFromPath(`${destination}/${relativePath}`);\r\n\r\n            if (item.dir) {\r\n                await createFolder(path, itemName);\r\n                await uploadExtractedZipArchive(zip, destination, relativePath);\r\n            }\r\n            else {\r\n                const blob = await item.async('blob');\r\n                await updateFile(path, itemName, blob);\r\n            }\r\n        });\r\n\r\n    return Promise.all(promises);\r\n};\r\n\r\nfunction getItemsInZipFolder(zip: JSZip, folderPath: string): JSZip.JSZipObject[] {\r\n    return Object.keys(zip.files)\r\n        .filter(fileName => {\r\n            // Only items in the current folder and subfolders\r\n            const relativePath = fileName.slice(folderPath.length, fileName.length);\r\n            if (!relativePath || fileName.slice(0, folderPath.length) !== folderPath)\r\n                return false;\r\n            \r\n            // No items from subfolders\r\n            if (relativePath.includes('/') && relativePath.slice(0, -1).includes('/'))\r\n                return false;\r\n\r\n            return true;\r\n        })\r\n        .map(key => zip.files[key]);\r\n};\r\n\r\nfunction getItemNameFromPath(path: string): string {\r\n    path = path.endsWith('/') ? path.slice(0, -1) : path;\r\n    return path.substr(path.lastIndexOf('/') + 1);\r\n}\r\n\r\nfunction getParentPathFromPath(path: string): string {\r\n    path = path.endsWith('/') ? path.slice(0, -1) : path;\r\n    path = path.substr(0, path.lastIndexOf('/'));\r\n    return path;\r\n}\r\n","// eslint-disable-next-line no-unused-vars\r\nimport { Item } from './Item';\r\n\r\nexport default class ApiCache {\r\n    _data: Record<string, Item[]> = {};\r\n\r\n    /**\r\n     * Add data to the cache\r\n     */\r\n    add(path: string, itemList: Item[]): Item[] {\r\n        this._data[path] = itemList;\r\n        return itemList;\r\n    }\r\n\r\n    /**\r\n     * Return true if the url is already cached\r\n     */\r\n    contains(path: string): boolean {\r\n        return this._data.hasOwnProperty(path);\r\n    }\r\n\r\n    /**\r\n     * Get the cached data\r\n     */\r\n    get(path: string): Item[] {\r\n        return this._data[path];\r\n    }\r\n\r\n    /**\r\n     * Remove paths from the cache\r\n     */\r\n    remove(...paths: string[]) {\r\n        paths.filter(path => this.contains(path))\r\n            .forEach(path => delete this._data[path]);\r\n    }\r\n\r\n    /**\r\n     * Clear the whole cache\r\n     */\r\n    clear() {\r\n        this._data = {};\r\n    }\r\n}\r\n","import * as APIHandler from '../Api/ApiHandler';\r\nimport * as solidAuth from 'solid-auth-client';\r\nimport { createBrowserHistory, History } from 'history';\r\nimport { Item, FileItem, FolderItem } from '../Api/Item';\r\nimport { Action, ENTER_FOLDER, SET_LOGGED_IN, SET_LOGGED_OUT, SET_HOST, SET_ITEMS, SET_ACLITEMS, SET_WEB_ID, SELECT_ITEMS, TOGGLE_SELECTED_ITEM, DESELECT_ITEM, FILTER_ITEMS, RESET_FILTER, DISPLAY_LOADING, STOP_LOADING, DIALOGS, OPEN_DIALOG, CLOSE_DIALOG, SET_LOADED_BLOB, SET_UPLOAD_FILE_LIST, SET_UPLOAD_FILE_PROGRESS, SET_PATH, MOVE_FOLDER_UPWARDS, RESET_LOADED_BLOB, RESET_HOST, RESET_WEB_ID, SET_ERROR_MESSAGE, OPEN_CONTEXT_MENU, CLOSE_CONTEXT_MENU } from './actionTypes';\r\nimport { AppState } from '../Reducers/reducer';\r\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\r\nimport { AclItem } from '../Api/AclItem';\r\nimport { saveNewVersion } from '../Api/aclUtils';\r\nimport { updateVersion, exposeMetadata } from '../Api/Api';\r\nimport ApiCache from '../Api/ApiCache';\r\n\r\nexport type MyThunk = ThunkAction<void, AppState, null, Action<any>>;\r\nexport type MyDispatch = ThunkDispatch<AppState, null, Action<any>>;\r\n\r\nexport const initApp = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(updateLoginStatus());\r\n  dispatch(openDialog(DIALOGS.CHOOSE_LOCATION));\r\n};\r\n\r\n\r\nexport const solidLogin = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(displayLoading());\r\n\r\n  solidPopupLogin()\r\n    .then(session => dispatch(updateLoginStatus(session)))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const updateLoginStatus = (session?: Session | null): MyThunk => async (dispatch, getState) => {\r\n  session = session || await solidAuth.currentSession();\r\n  if (!session) {\r\n    dispatch(setLoggedOut());\r\n    dispatch(resetWebId());\r\n  }\r\n  else {\r\n    dispatch(setWebId(session.webId));\r\n    dispatch(setLoggedIn());\r\n  }\r\n}\r\n\r\nasync function solidPopupLogin() {\r\n  return solidAuth.popupLogin({ popupUri: './vendor/solid-auth-client/popup.html' });\r\n}\r\n\r\n\r\nexport const solidLogout = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(displayLoading());\r\n\r\n  solidAuth.logout()\r\n    .then(() => {\r\n      dispatch(resetPath());\r\n      dispatch(resetItems());\r\n      dispatch(resetSelectedItems());\r\n      dispatch(setLoggedOut());\r\n      dispatch(resetWebId());\r\n\r\n      dispatch(openDialog(DIALOGS.CHOOSE_LOCATION));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const clearCache = (): MyThunk => (dispatch, getState) => APIHandler.clearCache();\r\n\r\n\r\n/**\r\n * Request API to get file list for the selected path then refresh UI\r\n */\r\nexport const uploadFiles = (): MyThunk => (dispatch, getState) => {\r\n  const { path, upload: { fileList } } = getState();\r\n\r\n  if (fileList === null)\r\n    return dispatch(setErrorMessage(\"Couldn't find files to upload\"));\r\n\r\n  dispatch(displayLoading());\r\n  dispatch(resetSelectedItems());\r\n  dispatch(setFileUploadProgress(50));\r\n\r\n  APIHandler.uploadFiles(path.join('/'), fileList)\r\n    .then(r => {\r\n      dispatch(setFileUploadProgress(100));\r\n      setTimeout(f => {\r\n        dispatch(resetFileUploader());\r\n      }, 300);\r\n      dispatch(displayCurrentItemList());\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const handleExposeData = (item: Item, newContent: { keyword: string, discipline: string }): MyThunk => (dispatch, getState) => {\r\n  const { path, upload: { fileList } } = getState();\r\n\r\n  dispatch(displayLoading());\r\n  dispatch(resetSelectedItems());\r\n\r\n  let folderPath = path.join('/');\r\n  exposeMetadata(folderPath, item.name, newContent);\r\n  dispatch(closeDialog(DIALOGS.EXPOSE_METADATA))\r\n  dispatch(displayCurrentItemList());\r\n};\r\n\r\nexport const handleAddNewVersion = (item: Item, preVersion: string, currentVersion: string): MyThunk => (dispatch, getState) => {\r\n  const { path, upload: { fileList } } = getState();\r\n\r\n  dispatch(displayLoading());\r\n  dispatch(resetSelectedItems());\r\n  dispatch(setFileUploadProgress(50));\r\n  const versionFolderName = \"version\";\r\n  let folderPath = path.join('/');\r\n  const destination = folderPath + \"/\" + versionFolderName + \"/\" + preVersion;\r\n  const itemNames = [item.name];\r\n\r\n  if (fileList === null) {\r\n    dispatch(resetNewVersionUploader());\r\n    dispatch(displayCurrentItemList());\r\n    return dispatch(setErrorMessage(\"Couldn't find files to upload\"));\r\n  }\r\n  if (fileList[0].name != item.name) {\r\n    dispatch(resetNewVersionUploader());\r\n    dispatch(displayCurrentItemList());\r\n    return dispatch(setErrorMessage(\"The new version need to has same file name\"));\r\n  }\r\n\r\n  updateVersion('/' + folderPath, fileList[0].name, currentVersion, preVersion);\r\n\r\n  APIHandler.createFolder(folderPath, versionFolderName)\r\n    .then(r => {\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(setFileUploadProgress(100));\r\n      setTimeout(f => {\r\n        dispatch(resetNewVersionUploader());\r\n      }, 300);\r\n      folderPath += \"/\" + versionFolderName + \"/\";\r\n      APIHandler.createFolder(folderPath, preVersion)\r\n        .then(r => {\r\n          folderPath += \"/\" + preVersion + \"/\";\r\n          APIHandler.moveItems(path.join('/'), destination, itemNames)\r\n            .then(r => {\r\n              APIHandler.renameFile(destination, item.name, item.name + \".old\")\r\n                .catch(r => dispatch(setErrorMessage(String(r))))\r\n                .finally(() => dispatch(stopLoading()));\r\n              APIHandler.uploadFiles(path.join('/'), fileList)\r\n                .then(r => {\r\n                  dispatch(displayCurrentItemList());\r\n                })\r\n                .catch(r => dispatch(setErrorMessage(String(r))))\r\n                .finally(() => {\r\n                  dispatch(stopLoading());\r\n                });\r\n            })\r\n            .catch(r => dispatch(setErrorMessage(String(r))))\r\n            .finally(() => dispatch(stopLoading()));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const uploadReseachData = (): MyThunk => (dispatch, getState) => {\r\n  const { path, upload: { fileList } } = getState();\r\n\r\n  if (fileList === null)\r\n    return dispatch(setErrorMessage(\"Couldn't find files to upload\"));\r\n\r\n  dispatch(displayLoading());\r\n  dispatch(resetSelectedItems());\r\n  dispatch(setFileUploadProgress(50));\r\n\r\n  APIHandler.uploadFiles(path.join('/'), fileList)\r\n    .then(r => {\r\n      dispatch(setFileUploadProgress(100));\r\n      setTimeout(f => {\r\n        dispatch(resetFileUploader());\r\n      }, 300);\r\n      dispatch(displayCurrentItemList());\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => {\r\n      dispatch(createResearchDataACL(fileList[0].name, 'b'));\r\n      dispatch(stopLoading());\r\n    });\r\n};\r\n\r\nconst getFilePathUrl = (path: string[], fileName: string): string => {\r\n  return APIHandler.getBasedURL(path.join('/')) + '/' + fileName;\r\n}\r\n\r\nconst getProfileUrl = (): string => {\r\n  return APIHandler.getBasedURL(\"profile/card#me\");\r\n}\r\n\r\nexport const createResearchDataACL = (fileName: string, content: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  let filepath = getFilePathUrl(path, fileName);\r\n  let profilePath = getProfileUrl();\r\n\r\n  content = `@prefix  acl:  <http://www.w3.org/ns/auth/acl#> .\r\n    <#authorization0> a  acl:Authorization;\r\n    acl:agent <${profilePath}>;\r\n    acl:accessTo <${filepath}>;\r\n    acl:defaultForNew <./>;\r\n    acl:mode  acl:Read, acl:Write, acl:Control, acl:Append.`\r\n\r\n  fileName += \".acl\";\r\n\r\n  dispatch(displayLoading());\r\n  APIHandler.createACL(path.join('/'), fileName, content)\r\n    .then(r => {\r\n      dispatch(displayCurrentItemList());\r\n      return APIHandler.getItemList(path.join('/'));\r\n    })\r\n    .then(itemList => itemList.find(item => item.getDisplayName() === fileName))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const uploadMetadata = (item: Item): MyThunk => (dispatch, getState) => {\r\n  const { path, upload: { fileList } } = getState();\r\n\r\n  if (fileList === null)\r\n    return dispatch(setErrorMessage(\"Couldn't find files to upload\"));\r\n\r\n  dispatch(displayLoading());\r\n  dispatch(resetSelectedItems());\r\n  dispatch(setFileUploadProgress(50));\r\n\r\n  APIHandler.uploadFiles(path.join('/'), fileList)\r\n    .then(r => {\r\n      dispatch(setFileUploadProgress(100));\r\n      setTimeout(f => {\r\n        dispatch(resetMetadataUploader());\r\n      }, 300);\r\n      dispatch(displayCurrentItemList());\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => {\r\n      dispatch(integrateInfo(fileList[0].name, item.name));\r\n      dispatch(createMetadataACL(fileList[0].name));\r\n      dispatch(stopLoading());\r\n    });\r\n};\r\n\r\nexport const integrateInfo = (metadataFileName: string, dataFileName: string):MyThunk => (dispatch, getState) => {\r\n  const {path} = getState();\r\n  APIHandler.integrateInfo(path.join('/'), dataFileName, metadataFileName);\r\n\r\n}\r\n\r\n\r\nexport const createMetadataACL = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  let filepath = getFilePathUrl(path, fileName);\r\n  let profilePath = getProfileUrl();\r\n\r\n  let content = `@prefix  acl:  <http://www.w3.org/ns/auth/acl#> .\r\n    <#authorization0> a  acl:Authorization;\r\n    acl:agent <${profilePath}>;\r\n    acl:accessTo <${filepath}>;\r\n    acl:defaultForNew <./>;\r\n    acl:mode  acl:Read, acl:Write, acl:Control, acl:Append.\r\n\r\n    <#authorization1> a  acl:Authorization;\r\n    acl:defaultForNew  <./>;\r\n    acl:accessTo   <${filepath}>; \r\n    acl:mode   acl:Read;\r\n    acl:agentClass <http://xmlns.com/foaf/0.1/Agent>.`\r\n\r\n  fileName += \".acl\";\r\n\r\n  dispatch(displayLoading());\r\n  APIHandler.createACL(path.join('/'), fileName, content)\r\n    .then(r => {\r\n      dispatch(displayCurrentItemList());\r\n      return APIHandler.getItemList(path.join('/'));\r\n    })\r\n    .then(itemList => itemList.find(item => item.getDisplayName() === fileName))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const createFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  APIHandler.updateFile(path.join('/'), fileName, new Blob())\r\n    .then(r => {\r\n      dispatch(closeDialog(DIALOGS.CREATE_FILE));\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(loadAndEditFile(fileName));\r\n      return APIHandler.getItemList(path.join('/'));\r\n    })\r\n    .then(itemList => itemList.find(item => item.getDisplayName() === fileName))\r\n    .then(item => {\r\n      if (!item)\r\n        throw new Error(\"Couldn't load created file for editing\");\r\n      dispatch(selectItem(item));\r\n      dispatch(getFileContent(item.name));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\nexport const updateAccessControl = (fileName: string, aclItem: AclItem[]): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  //change name to point to .acl file\r\n  fileName += \".acl\";\r\n\r\n  APIHandler.updateACL(path.join('/'), fileName, aclItem)\r\n    .then(r => {\r\n      dispatch(closeDialog(DIALOGS.ACCESS_CONTROL));\r\n      dispatch(displayCurrentItemList());\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n}\r\n\r\nexport const updateTextFile = (fileName: string, content: Blob | string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  APIHandler.updateFile(path.join('/'), fileName, content)\r\n    .then(r => {\r\n      dispatch(closeDialog(DIALOGS.EDIT));\r\n      dispatch(displayCurrentItemList());\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n}\r\n\r\n/**\r\n * Request API to display file list for the selected path\r\n */\r\nexport const displayCurrentItemList = (): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n  dispatch(resetSelectedItems());\r\n  APIHandler.getItemList(path.join('/'))\r\n    .then(items => dispatch(setItems(items)))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to reload the file list and then refresh UI\r\n */\r\nexport const refreshItemList = (): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  APIHandler.clearCacheForFolder(path.join('/'));\r\n  return dispatch(displayCurrentItemList());\r\n};\r\n\r\n\r\n/**\r\n * Request API to rename file then dispatch defined events\r\n */\r\nexport const renameFile = (fileName: string, newFileName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  APIHandler.renameFile(path.join('/'), fileName, newFileName)\r\n    .then(() => {\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(closeDialog(DIALOGS.RENAME));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to rename file then dispatch defined events\r\n */\r\nexport const renameFolder = (folderName: string, newFolderName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  APIHandler.renameFolder(path.join('/'), folderName, newFolderName)\r\n    .then(() => {\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(closeDialog(DIALOGS.RENAME));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to download the specified items\r\n */\r\nexport const downloadItems = (items: Item[]): MyThunk => async (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  try {\r\n    let blob;\r\n    let downloadName = items[0].name;\r\n    if (items.length === 1 && items[0] instanceof FileItem) {\r\n      blob = await APIHandler.getFileBlob(path.join('/'), items[0].name);\r\n    }\r\n    else {\r\n      const zip = await APIHandler.getAsZip(path.join('/'), items);\r\n      blob = await zip.generateAsync({ type: 'blob' });\r\n\r\n      if (items.length > 1)\r\n        downloadName = 'Archive';\r\n      downloadName = `${downloadName}.zip`;\r\n    }\r\n\r\n    promptDownload(blob, downloadName);\r\n  }\r\n  catch (e) {\r\n    dispatch(setErrorMessage(String(e)));\r\n  }\r\n  dispatch(stopLoading());\r\n};\r\n\r\n/**\r\n * Request API to upload the items as zip archive\r\n */\r\nexport const zipAndUpload = (items: Item[]): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  const archiveName = (items.length === 1 && items[0] instanceof FolderItem) ?\r\n    `${items[0].name}.zip`\r\n    : 'Archive.zip';\r\n\r\n  APIHandler.getAsZip(path.join('/'), items)\r\n    .then(zip => zip.generateAsync({ type: 'blob' }))\r\n    .then(blob => APIHandler.updateFile(path.join('/'), archiveName, blob))\r\n    .then(() => dispatch(displayCurrentItemList()))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API for extracting a zip archive\r\n */\r\nexport const extractZipFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  APIHandler.extractZipArchive(path.join('/'), path.join('/'), fileName)\r\n    .then(r => dispatch(displayCurrentItemList()))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n// code based on https://stackoverflow.com/a/30832210/6548154\r\nfunction promptDownload(file: Blob, fileName: string) {\r\n  if (window.navigator.msSaveOrOpenBlob) // IE10+\r\n    window.navigator.msSaveOrOpenBlob(file, fileName);\r\n  else { // Others\r\n    const a = document.createElement(\"a\");\r\n    const url = URL.createObjectURL(file);\r\n    a.href = url;\r\n    a.download = fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    setTimeout(() => {\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * Opens the item in a new tab\r\n */\r\nexport const openInNewTab = (item: Item): MyThunk => (dispatch, getState) => {\r\n  window.open(item.url, '_blank');\r\n};\r\n\r\n\r\n/**\r\n * Request API to get file content then dispatch defined events\r\n */\r\nexport const getFileContent = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n  dispatch(resetFileContent());\r\n\r\n  APIHandler.getFileBlob(path.join('/'), fileName)\r\n    .then(blob => dispatch(setFileContent(blob)))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to get acl file content then dispatch defined events\r\n */\r\nexport const getACLContent = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n  dispatch(resetFileContent());\r\n\r\n  APIHandler.getFileACL(path.join('/'), fileName)\r\n    .then(items => dispatch(setAclItems(items)))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to get file content and open the edit dialogue\r\n */\r\nexport const loadAndEditFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  dispatch(getFileContent(fileName));\r\n  dispatch(openDialog(DIALOGS.EDIT));\r\n};\r\n\r\nexport const loadExposeMetadata = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  dispatch(getFileContent(fileName));\r\n  dispatch(openDialog(DIALOGS.EXPOSE_METADATA));\r\n};\r\n\r\nexport const loadMetadataFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  dispatch(getFileContent(fileName + '.ttl'));\r\n  dispatch(openDialog(DIALOGS.ADD_NEW_VERSION));\r\n};\r\n\r\n/**\r\n * Request API to get file content and open the edit dialogue\r\n */\r\nexport const loadAndOpenAccessControl = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  dispatch(getFileContent(fileName + \".acl\"));\r\n  dispatch(openDialog(DIALOGS.ACCESS_CONTROL));\r\n};\r\n\r\n\r\n/**\r\n * Request API to get file content and display it\r\n */\r\nexport const loadAndDisplayFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n  dispatch(getFileContent(fileName));\r\n  dispatch(openDialog(DIALOGS.CONTENT));\r\n};\r\n\r\n\r\n/**\r\n * Request API to display an audio or video file\r\n */\r\nexport const displaySelectedMediaFile = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(openDialog(DIALOGS.MEDIA));\r\n};\r\n\r\n\r\n/**\r\n * Request API to create a folder then dispatch defined events\r\n */\r\nexport const createNewFolder = (folderName: string): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  APIHandler.createFolder(path.join('/'), folderName)\r\n    .then(r => {\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(closeDialog(DIALOGS.CREATE_FOLDER));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to remove multiple items\r\n */\r\nexport const removeItems = (items: Item[]): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  const itemNames = items.map(f => f.name);\r\n\r\n  APIHandler.removeItems(path.join('/'), itemNames)\r\n    .then(r => dispatch(displayCurrentItemList()))\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to move multiple items\r\n */\r\nexport const moveItems = (items: Item[], { host, path: targetPath }: { host: string, path: string[] }): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n\r\n  const destination = targetPath.join('/');\r\n  const itemNames = items.map(f => f.name);\r\n\r\n  APIHandler.moveItems(path.join('/'), destination, itemNames)\r\n    .then(r => {\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(closeDialog(DIALOGS.MOVE));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to copy an item then dispatch defined events\r\n */\r\nexport const copyItems = (items: Item[], { host, path: targetPath }: { host: string, path: string[] }): MyThunk => (dispatch, getState) => {\r\n  const { path } = getState();\r\n  dispatch(displayLoading());\r\n\r\n  const destination = targetPath.join('/');\r\n  const itemNames = items.map(f => f.name);\r\n\r\n  APIHandler.copyItems(path.join('/'), destination, itemNames)\r\n    .then(r => {\r\n      dispatch(displayCurrentItemList());\r\n      dispatch(closeDialog(DIALOGS.COPY));\r\n    })\r\n    .catch(r => dispatch(setErrorMessage(String(r))))\r\n    .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * This handles multiple selection by using shift key\r\n */\r\nexport const setSelectedItemsFromLastTo = (lastFile: Item): MyThunk => (dispatch, getState) => {\r\n  const { items: { inCurFolder: items, selected: selectedItems } } = getState();\r\n\r\n  const lastPreviouslySelected = [...selectedItems].pop();\r\n  if (!lastPreviouslySelected)\r\n    return dispatch(setErrorMessage(\"Couldn't enlarge selection because no items were previously selected\"));\r\n\r\n  const lastPreviouslySelectedIndex = items.indexOf(lastPreviouslySelected);\r\n  const lastSelectedIndex = items.indexOf(lastFile);\r\n\r\n  const isInRange = (num: number, start: number, end: number) => start <= num && num <= end;\r\n  const toAdd = lastSelectedIndex > lastPreviouslySelectedIndex ?\r\n    items.filter((item, index) => isInRange(index, lastPreviouslySelectedIndex, lastSelectedIndex))\r\n    : items.filter((item, index) => isInRange(index, lastSelectedIndex, lastPreviouslySelectedIndex));\r\n\r\n  dispatch(selectItems([...selectedItems, ...toAdd]));\r\n};\r\n\r\n\r\nexport const resetFileUploader = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(setFileUploadProgress(0));\r\n  dispatch(closeDialog(DIALOGS.UPLOAD_FILE));\r\n  dispatch(resetFileUploadList());\r\n};\r\n\r\nexport const resetNewVersionUploader = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(setFileUploadProgress(0));\r\n  dispatch(closeDialog(DIALOGS.ADD_NEW_VERSION));\r\n  dispatch(resetFileUploadList());\r\n};\r\n\r\nexport const resetAccessControl = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(setFileUploadProgress(0));\r\n  dispatch(closeDialog(DIALOGS.ACCESS_CONTROL));\r\n  dispatch(resetFileUploadList());\r\n};\r\n\r\n\r\nexport const resetMetadataUploader = (): MyThunk => (dispatch, getState) => {\r\n  dispatch(setFileUploadProgress(0));\r\n  dispatch(closeDialog(DIALOGS.UPLOAD_METADATA));\r\n  dispatch(resetFileUploadList());\r\n};\r\n\r\n\r\nexport const enterFolder = (path: string[]): MyThunk => (dispatch, getState) => {\r\n  dispatch(setPath(path));\r\n  dispatch(resetFilter());\r\n  dispatch(displayCurrentItemList());\r\n};\r\n\r\nexport const enterFolderByItem = (item: Item): MyThunk => (dispatch, getState) => {\r\n  const path = item.path;\r\n  // Open containing folder if it is a file\r\n  dispatch(enterFolder(item instanceof FileItem ? path : [...path, item.name]));\r\n};\r\n\r\nexport const moveFolderUpwardsAndRefresh = (n: number): MyThunk => (dispatch, getState) => {\r\n  dispatch(moveFolderUpwards(n));\r\n  dispatch(refreshItemList());\r\n};\r\n\r\nexport const rightClickOnFile = (item: Item): MyThunk => (dispatch, getState) => {\r\n  const { items: { selected } } = getState();\r\n  const isSelected = selected.includes(item);\r\n\r\n  !isSelected && dispatch(selectItem(item));\r\n};\r\n\r\n\r\n// Create action which can be dispatched\r\nconst makeActionCreator: <VALUE = void>(type: string) => (value: VALUE) => Action<VALUE> = <VALUE = void>(type: string) => (value: VALUE) => {\r\n  return {\r\n    type,\r\n    value\r\n  };\r\n};\r\n\r\nexport const moveFolderUpwards = makeActionCreator<number>(MOVE_FOLDER_UPWARDS);\r\nexport const setPath = makeActionCreator<string[]>(SET_PATH);\r\nexport const resetPath = () => setPath([]);\r\n\r\nexport const setLoggedIn = makeActionCreator(SET_LOGGED_IN);\r\nexport const setLoggedOut = makeActionCreator(SET_LOGGED_OUT);\r\nexport const setHost = makeActionCreator<string>(SET_HOST);\r\nexport const resetHost = makeActionCreator(RESET_HOST);\r\nexport const setWebId = makeActionCreator<string>(SET_WEB_ID);\r\nexport const resetWebId = makeActionCreator(RESET_WEB_ID);\r\n\r\nexport const setItems = makeActionCreator<Item[]>(SET_ITEMS);\r\nexport const resetItems = () => setItems([]);\r\n\r\nexport const setAclItems = makeActionCreator<AclItem[]>(SET_ACLITEMS);\r\nexport const resetAclItems = () => setAclItems([]);\r\n\r\nexport const selectItems = makeActionCreator<Item[]>(SELECT_ITEMS);\r\nexport const selectItem = (item: Item) => selectItems([item]);\r\nexport const resetSelectedItems = () => selectItems([]);\r\nexport const toggleSelectedItem = makeActionCreator<Item>(TOGGLE_SELECTED_ITEM);\r\nexport const deselectItem = makeActionCreator<Item>(DESELECT_ITEM);\r\n\r\nexport const filterItems = makeActionCreator<string>(FILTER_ITEMS);\r\nexport const resetFilter = makeActionCreator(RESET_FILTER);\r\n\r\n\r\nexport const displayLoading = makeActionCreator(DISPLAY_LOADING);\r\nexport const stopLoading = makeActionCreator(STOP_LOADING);\r\n\r\nexport const resetFileContent = makeActionCreator(RESET_LOADED_BLOB);\r\nexport const setFileContent = makeActionCreator<Blob>(SET_LOADED_BLOB);\r\nexport const setFileUploadList = makeActionCreator<FileList | null>(SET_UPLOAD_FILE_LIST);\r\nexport const resetFileUploadList = () => setFileUploadList(null);\r\nexport const setFileUploadProgress = makeActionCreator<number>(SET_UPLOAD_FILE_PROGRESS);\r\n\r\nexport const openDialog = makeActionCreator<DIALOGS>(OPEN_DIALOG);\r\nexport const closeDialog = makeActionCreator<DIALOGS>(CLOSE_DIALOG);\r\nexport const openContextMenu = makeActionCreator<{ x: number, y: number }>(OPEN_CONTEXT_MENU);\r\nexport const closeContextMenu = makeActionCreator(CLOSE_CONTEXT_MENU);\r\n\r\nexport const setErrorMessage = makeActionCreator<string>(SET_ERROR_MESSAGE);\r\nexport const resetErrorMessage = () => setErrorMessage('');\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    setSelectedItemsFromLastTo, loadAndEditFile, loadAndDisplayFile, displaySelectedMediaFile,\r\n    rightClickOnFile, enterFolderByItem, MyDispatch, openContextMenu, toggleSelectedItem, selectItems\r\n} from '../../Actions/Actions';\r\nimport './File.css';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport { FileItem, Item } from '../../Api/Item';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nclass File extends Component<FileProps> {\r\n    render() {\r\n        const { isSelected, item, handleClick, handleDoubleClick, handleContextMenu } = this.props;\r\n        const avatarStyle = {\r\n            backgroundColor: isSelected ? blue['A200'] : undefined\r\n        };\r\n        const realSize = (item instanceof FileItem) ? item.getDisplaySize() : null;\r\n        return (\r\n            <div className=\"File\" onClick={handleClick} onDoubleClick={handleDoubleClick} onContextMenu={handleContextMenu} data-selected={isSelected}>\r\n                <ListItem>\r\n                    <ListItemAvatar>\r\n                        <Avatar style={avatarStyle}>\r\n                            { (item instanceof FileItem) ? <FileIcon /> : <FolderIcon />}\r\n                        </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText className=\"filename\" primary={item.getDisplayName()} secondary={realSize} />\r\n                </ListItem>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\ninterface FileOwnProps {\r\n    item: Item;\r\n}\r\ninterface StateProps {\r\n    isSelected: boolean;\r\n}\r\ninterface DispatchProps {\r\n    handleClick(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n    handleDoubleClick(): void;\r\n    handleContextMenu(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n}\r\ninterface FileProps extends FileOwnProps, StateProps, DispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: FileOwnProps): StateProps => {\r\n    return {\r\n        isSelected: state.items.selected.includes(ownProps.item)\r\n    };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch, ownProps: FileOwnProps): DispatchProps => {\r\n    return {\r\n        handleDoubleClick: () => {\r\n            const item = ownProps.item;\r\n\r\n            if (item instanceof FileItem) {\r\n                if (item.isEditable())\r\n                    dispatch(loadAndEditFile(item.name));\r\n                else if (item.isImage())\r\n                    dispatch(loadAndDisplayFile(item.name));\r\n                else if (item.isMedia())\r\n                    dispatch(displaySelectedMediaFile());\r\n            }\r\n            else\r\n                dispatch(enterFolderByItem(item));\r\n        },\r\n\r\n        handleContextMenu: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            let x = 0;\r\n            let y = 0;\r\n\r\n            if (event.nativeEvent instanceof MouseEvent) {\r\n                x = event.nativeEvent.clientX;\r\n                y = event.nativeEvent.clientY;\r\n            }\r\n            else if (event.nativeEvent instanceof TouchEvent) {\r\n                x = event.nativeEvent.touches[0].pageX;\r\n                y = event.nativeEvent.touches[0].pageY;\r\n            }\r\n            else {\r\n                console.warn(\"Unknown click event\", event);\r\n            }\r\n\r\n            if (event.shiftKey) {\r\n                dispatch(setSelectedItemsFromLastTo(ownProps.item));\r\n            } else {\r\n                dispatch(rightClickOnFile(ownProps.item));\r\n            }\r\n            \r\n            dispatch(openContextMenu({ x, y }));\r\n        },\r\n\r\n        handleClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\r\n            event.stopPropagation();\r\n\r\n            if (event.ctrlKey) {\r\n                dispatch(toggleSelectedItem(ownProps.item));\r\n            } else if (event.shiftKey) {\r\n                dispatch(setSelectedItemsFromLastTo(ownProps.item));\r\n            } else {\r\n                dispatch(selectItems([ownProps.item]));\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(File);\r\n","import React from 'react';\r\nimport './FileListEmptyMessage.css';\r\n\r\nexport default function FileListEmptyMessage() {\r\n    return (\r\n        <div className=\"FileListEmptyMessage\">\r\n            No files in this folder\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, createStyles, Theme, WithStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  progress: {\r\n    margin: theme.spacing.unit * 10,\r\n  },\r\n});\r\n\r\nfunction Loader(props: LoaderProps) {\r\n    return (\r\n        <Grid container justify=\"center\">\r\n            <CircularProgress className={props.classes.progress} color=\"secondary\" />\r\n        </Grid>\r\n    );\r\n}\r\n\r\ninterface LoaderProps extends WithStyles<typeof styles> {};\r\n\r\nexport default withStyles(styles)(Loader);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport File from '../File/File'; \r\nimport FileListEmptyMessage from './FileListEmptyMessage';\r\nimport Loader from '../Loader/Loader'; \r\nimport './FileList.css';\r\nimport { Item } from '../../Api/Item';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nclass FileList extends Component<FileListProps> {\r\n    render() {\r\n        const { items, isLoading } = this.props;\r\n        const itemComponents = items.map((item, key) => {\r\n            return <File item={item} key={key} />;\r\n        });\r\n\r\n        return <div className=\"FileList\">\r\n            { isLoading ? \r\n                <Loader /> : \r\n                itemComponents.length ? itemComponents : <FileListEmptyMessage />\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\ninterface StateProps {\r\n    items: Item[];\r\n    isLoading: boolean;\r\n}\r\ninterface FileListProps extends StateProps {};\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    const items = state.items.inCurFolder\r\n        .filter(item => filterMatch(item.getDisplayName(), state.items.filter));\r\n\r\n    return {\r\n        items,\r\n        isLoading: state.loading,\r\n    };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nconst filterMatch = (first: string, second: string) => {\r\n    return first.toLocaleLowerCase().match(second.toLocaleLowerCase());\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FileList);\r\n\r\n\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CreateNewFolderIcon from '@material-ui/icons/CreateNewFolder';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction CreateFolderAction(props: CreateFolderActionProps) {\r\n    const {handleClick, handleClose} = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <CreateNewFolderIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Add new folder\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface CreateFolderActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.CREATE_FOLDER));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateFolderAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction CreateFileAction(props: CreateFileActionProps) {\r\n    const {handleClick, handleClose} = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <InsertDriveFileIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Create file\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface CreateFileActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.CREATE_FILE));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateFileAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction UploadFileAction(props: UploadFileActionProps) {\r\n    const { handleClick, handleClose } = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <CloudUploadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Upload Research Data\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface UploadFileActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.UPLOAD_FILE));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadFileAction);\r\n","import React from 'react';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { connect } from 'react-redux';\r\nimport CreateFolderAction from '../ContextMenu/ContextMenuActions/CreateFolderAction';\r\nimport CreateFileAction from '../ContextMenu/ContextMenuActions/CreateFileAction';\r\nimport UploadFileAction from '../ContextMenu/ContextMenuActions/UploadFileAction';\r\nimport ChooseLocationAction from '../ContextMenu/ContextMenuActions/ChooseLocationAction';\r\n\r\nconst style = {\r\n  color: 'white'\r\n};\r\n\r\nclass ThreeDotsMenu extends React.Component {\r\n  state = {\r\n    anchorEl: null as HTMLElement|null,\r\n  };\r\n\r\n  handleClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n    this.setState({ anchorEl: event.currentTarget });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ anchorEl: null });\r\n  };\r\n\r\n  render() {\r\n    const { anchorEl } = this.state;\r\n\r\n    return (\r\n      <div style={{marginLeft:'1em'}}>\r\n        <IconButton color=\"inherit\" \r\n          style={style}\r\n          aria-label=\"More\"\r\n          aria-owns={Boolean(anchorEl) ? 'long-menu' : undefined}\r\n          aria-haspopup=\"true\"\r\n          onClick={this.handleClick}>\r\n          <MoreVertIcon />\r\n        </IconButton>\r\n\r\n        <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={this.handleClose}>\r\n          <CreateFolderAction handleClose={this.handleClose} />\r\n          <CreateFileAction handleClose={this.handleClose} />\r\n          <UploadFileAction handleClose={this.handleClose} />\r\n          {/* <ChooseLocationAction handleClose={this.handleClose} /> */}\r\n        </Menu>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ThreeDotsMenu);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles, createStyles, Theme, WithStyles } from '@material-ui/core/styles';\r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport './BreadcrumbText.css';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  lastPath: {\r\n    display: 'block',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none'\r\n    }\r\n  },\r\n  paths: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    }\r\n  }\r\n});\r\n\r\nclass BreadcrumbText extends Component<BreadcrumbTextProps> {\r\n\r\n    render() {\r\n        const { classes, handleClickPath, path, rootTitle, handleGoBack, canGoBack } = this.props;\r\n\r\n        const separator = <span>&gt;</span>;\r\n        const rootPath = <span onClick={() => handleClickPath(-1)} data-index={0}>\r\n            { rootTitle } { path.length ? separator : '' }\r\n        </span>;\r\n        const lastPath = [...path].pop() || rootTitle;\r\n\r\n        const directories = path.map((dir, index) => {\r\n            return <span key={index} data-index={index} onClick={(e) => handleClickPath(index)}>\r\n                <span>{dir}</span> { path.length -1 !== index ? separator : '' }&nbsp;\r\n            </span>\r\n        });\r\n\r\n        return (\r\n            <div className=\"BreadcrumbText\">\r\n                <div className={classes.lastPath}>\r\n                    <Button onClick={handleGoBack} color=\"inherit\" type=\"button\" style={{display: canGoBack ? 'inline-flex' : 'none'}}>\r\n                        <KeyboardArrowLeftIcon />\r\n                    </Button>\r\n                    {lastPath}\r\n                </div>\r\n                <div className={classes.paths}>{rootPath} {directories}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface BreadcrumbTextProps extends WithStyles<typeof styles> {\r\n    handleClickPath(index: number): void;\r\n    handleGoBack(): void;\r\n    canGoBack: boolean;\r\n    path: string[];\r\n    rootTitle: string;\r\n\r\n}\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(BreadcrumbText));\r\n","import React, { ChangeEvent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport { withStyles, Theme, createStyles, WithStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { connect } from 'react-redux';\r\nimport { refreshItemList, moveFolderUpwardsAndRefresh, filterItems, MyDispatch } from '../../Actions/Actions';\r\nimport ThreeDotsMenu from './ThreeDotsMenu';\r\nimport BreadcrumbText from '../Breadcrumb/BreadcrumbText';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  root: {\r\n    width: '100%',\r\n    marginBottom: '4.3em'\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  title: {\r\n    display: 'block', // was none\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing.unit,\r\n      width: 'auto',\r\n      display: 'block'\r\n    },\r\n  },\r\n  searchIcon: {\r\n    width: theme.spacing.unit * 9,\r\n    color: '#efefef',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: '#efefef',\r\n    width: '100%',\r\n  },\r\n  refreshIcon: {\r\n    color: '#efefef'    \r\n  },\r\n  inputInput: {\r\n    paddingTop: theme.spacing.unit,\r\n    paddingRight: theme.spacing.unit,\r\n    paddingBottom: theme.spacing.unit,\r\n    paddingLeft: theme.spacing.unit * 10,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: 100,\r\n      '&:focus': {\r\n        width: 200,\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nfunction SearchAppBar(props: SearchAppBarProps) {\r\n  const { classes, path, filter, moveUpwards, canGoBack, handleChange, handleRefresh } = props;\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\r\n            <BreadcrumbText \r\n                path={path} \r\n                handleClickPath={index => moveUpwards(path.length - index - 1)} \r\n                handleGoBack={() => moveUpwards(1)}\r\n                canGoBack={canGoBack}\r\n                rootTitle=\"SoLiDaM\"\r\n            />\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              value={filter}\r\n              onChange={handleChange}\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n            />\r\n          </div>\r\n          <IconButton color=\"inherit\" className={classes.refreshIcon} aria-label=\"Refresh\" onClick={handleRefresh}>\r\n            <RefreshIcon/>\r\n          </IconButton>\r\n          <ThreeDotsMenu />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface StateProps {\r\n  filter: string;\r\n  path: string[];\r\n  canGoBack: boolean; \r\n}\r\ninterface DispatchProps {\r\n  handleChange(event: ChangeEvent<HTMLInputElement>): void;\r\n  moveUpwards(n: number): void;\r\n  handleRefresh(): void;\r\n}\r\ninterface SearchAppBarProps extends StateProps, DispatchProps, WithStyles<typeof styles> {\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        filter: state.items.filter,\r\n        path: state.path,\r\n        canGoBack: state.path.length > 0,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleChange: (event) => {\r\n            dispatch(filterItems(event.currentTarget.value));\r\n        },\r\n        moveUpwards: (n) => {\r\n          console.log('moveUpwards', n);\r\n          dispatch(moveFolderUpwardsAndRefresh(n));\r\n        },\r\n        handleRefresh: () => dispatch(refreshItemList())\r\n    };\r\n};\r\n\r\n\r\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(SearchAppBar));\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { loadAndDisplayFile, displaySelectedMediaFile, loadAndEditFile, enterFolderByItem, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\r\nimport { FileItem, FolderItem, Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction OpenAction(props: OpenActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <OpenInBrowserIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Open\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface OpenActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            const item = selectedItems[0];\r\n\r\n            if (item instanceof FolderItem)\r\n                dispatch(enterFolderByItem(item));\r\n            else if (item instanceof FileItem) {\r\n                if (item.isEditable())\r\n                    dispatch(loadAndEditFile(item.name));\r\n                else if (item.isImage())\r\n                    dispatch(loadAndDisplayFile(item.name));\r\n                else if (item.isMedia())\r\n                    dispatch(displaySelectedMediaFile());\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { removeItems, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction RemoveAction(props: RemoveActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <DeleteIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Remove\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface RemoveActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(removeItems(selectedItems));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction MoveAction(props: MoveActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick()}>\r\n            <ListItemIcon>\r\n                <HowToVoteIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Move\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface MoveActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.MOVE));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS, Action } from '../../../Actions/actionTypes';\r\n\r\nfunction CopyAction(props: CopyActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={handleClick}>\r\n            <ListItemIcon>\r\n                <FileCopyIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Copy\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface CopyActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.COPY));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CopyAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { loadAndEditFile, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction OpenAction(props: OpenActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <OpenInBrowserIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Edit\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface OpenActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(loadAndEditFile(selectedItems[0].name));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport WrapTextIcon from '@material-ui/icons/WrapText';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction MoveAction(props: MoveActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={handleClick}>\r\n            <ListItemIcon>\r\n                <WrapTextIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Rename\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface MoveActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.RENAME));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ArchiveIcon from '@material-ui/icons/Archive';\r\nimport { zipAndUpload, MyDispatch } from '../../../Actions/Actions';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction ZipAction(props: ZipActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <ArchiveIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Zip here\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface ZipActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(zipAndUpload(selectedItems));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ZipAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport UnarchiveIcon from '@material-ui/icons/Unarchive';\r\nimport { extractZipFile, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nfunction ExtractAction(props: ExtractActionProps) {\r\n    const {handleClick, selectedItems} = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <UnarchiveIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Extract here\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface ExtractActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(extractZipFile(selectedItems[0].name));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExtractAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { downloadItems, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport { FileItem, Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction DownloadAction(props: DownloadActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <CloudDownloadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                {(selectedItems.length === 1 && selectedItems[0] instanceof FileItem) ? \r\n                    'Download'\r\n                    : 'Download Zip'\r\n                }\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface DownloadActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(downloadItems(selectedItems));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DownloadAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { openInNewTab, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction OpenInNewTabAction(props: OpenInNewTabActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <LinkIcon   />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Open in new Tab\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface OpenInNewTabActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(openInNewTab(selectedItems[0]));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenInNewTabAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction UploadMetadataAction(props: UploadMetadataActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={handleClick}>\r\n            <ListItemIcon>\r\n                <CloudUploadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Upload Metadata\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface UploadMetadataActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.UPLOAD_METADATA));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadMetadataAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudUploadIcon from '@material-ui/icons/Settings';\r\nimport { openDialog, MyDispatch, loadAndOpenAccessControl } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nfunction AccessControlAction(props: AccessControlActionProps) {\r\n\r\n    const { handleClick, selectedItems } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <CloudUploadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Access Control\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface AccessControlActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {selectedItems: state.items.selected};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(loadAndOpenAccessControl(selectedItems[0].name));\r\n        }\r\n        // handleClick: () => {\r\n        //     dispatch(openDialog(DIALOGS.ACCESS_CONTROL));\r\n        // }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessControlAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport { openDialog, MyDispatch, loadMetadataFile } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nfunction AddNewVersionAction(props: AddNewVersionActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <CloudUploadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Add new Version\r\n            </Typography>\r\n        </MenuItem>\r\n    );\r\n}\r\n\r\ninterface AddNewVersionActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n    // handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(loadMetadataFile(selectedItems[0].name));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNewVersionAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nimport { openDialog, MyDispatch, loadExposeMetadata } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nfunction ExposeMetadataAction(props: ExposeMetadataActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <HowToVoteIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Expose Metadata\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface ExposeMetadataActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(loadExposeMetadata(selectedItems[0].name));\r\n            // dispatch(openDialog(DIALOGS.EXPOSE_METADATA));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExposeMetadataAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SettingsBackupRestore from '@material-ui/icons/SettingsBackupRestore';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction RevertVersionAction(props: RevertVersionActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick()}>\r\n            <ListItemIcon>\r\n                <SettingsBackupRestore />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Revert Version\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface RevertVersionActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            alert(\"Revert file!\");\r\n            //dispatch(alert(\"Revert file!\"));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RevertVersionAction);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './ContextMenu.css';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport OpenAction from './ContextMenuActions/OpenAction';\r\nimport RemoveAction from './ContextMenuActions/RemoveAction';\r\nimport MoveAction from './ContextMenuActions/MoveAction';\r\nimport CopyAction from './ContextMenuActions/CopyAction';\r\nimport EditAction from './ContextMenuActions/EditAction';\r\nimport RenameAction from './ContextMenuActions/RenameAction';\r\nimport ZipAction from './ContextMenuActions/ZipAction';\r\nimport ExtractAction from './ContextMenuActions/ExtractAction';\r\nimport DownloadAction from './ContextMenuActions/DownloadAction';\r\nimport OpenInNewTabAction from './ContextMenuActions/OpenInNewTabAction';\r\nimport { Item, FileItem, FolderItem } from '../../Api/Item';\r\nimport { AppState } from '../../Reducers/reducer';\r\nimport UploadMetadataAction from './ContextMenuActions/UploadMetadataAction';\r\nimport AccessControlAction from './ContextMenuActions/AccessControlAction';\r\nimport AddNewVersionActions from './ContextMenuActions/AddNewVersionActions';\r\nimport ExposeMetadataAction from './ContextMenuActions/ExposeMetadataAction';\r\nimport RevertVersionAction from './ContextMenuActions/RevertVersionAction';\r\n\r\nclass ContextMenu extends Component<ContextMenuProps> {\r\n\r\n    render() {\r\n        const { acts, open, x, y } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Menu\r\n                    anchorReference=\"anchorPosition\"\r\n                    anchorPosition={{ top: y, left: x }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={open}\r\n                    onClose={() => { }}\r\n                    PaperProps={{ style: { width: 190 } }}>\r\n                    {acts.includes('open') && <OpenAction />}\r\n                    {acts.includes('openInNewTab') && <OpenInNewTabAction />}\r\n                    {acts.includes('uploadMetadata') && <UploadMetadataAction />}\r\n                    {acts.includes('accessControl') && <AccessControlAction/>}\r\n                    {acts.includes('addNewVersion') && <AddNewVersionActions/>}\r\n                    {acts.includes('exposeMetadata') && <ExposeMetadataAction/>}\r\n                    {acts.includes('revertVersion') && <RevertVersionAction/>}\r\n                    {acts.includes('download') && <DownloadAction />}\r\n                    {acts.includes('compress') && <ZipAction />}\r\n                    {acts.includes('extract') && <ExtractAction />}\r\n                    {acts.includes('edit') && <EditAction />}\r\n                    {acts.includes('copy') && <CopyAction />}\r\n                    {acts.includes('move') && <MoveAction />}\r\n                    {acts.includes('rename') && <RenameAction />}\r\n                    {acts.includes('remove') && <RemoveAction />}\r\n                </Menu>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps {\r\n    acts: string[];\r\n    open: boolean;\r\n    x: number;\r\n    y: number;\r\n}\r\ninterface ContextMenuProps extends StateProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        x: state.contextMenu.x,\r\n        y: state.contextMenu.y,\r\n        open: state.contextMenu.open,\r\n        acts: getActionsForMultipleItems(state.items.selected),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\n\r\n/**\r\n * Get available actions for multiple items\r\n */\r\nconst getActionsForMultipleItems = (items: Item[]): string[] => {\r\n    return items.length === 1 ?\r\n        getActionsForItem(items[0])\r\n        : [\r\n            'copy',\r\n            'move',\r\n            'remove',\r\n            'download',\r\n            'compress',\r\n        ];\r\n};\r\n\r\n/**\r\n * Get available actions for an item\r\n */\r\nconst getActionsForItem = (item: Item) => {\r\n    const commonActions = [\r\n        'openInNewTab',\r\n        'copy',\r\n        'move',\r\n        'rename',\r\n        'remove',\r\n        'download',\r\n    ];\r\n    return [\r\n        ...commonActions,\r\n        ...((item instanceof FileItem) ?\r\n            getActionsForFile(item)\r\n            : getActionsForFolder(item))\r\n    ];\r\n};\r\n\r\n/**\r\n * Get available file specific actions\r\n */\r\nconst getActionsForFile = (file: FileItem) => {\r\n    const actions = ['accessControl'];\r\n    (file.isNotUpdateable()) && actions.push('addNewVersion');\r\n    file.isEditable() && actions.push('edit');\r\n    file.isExtractable() && actions.push('extract');\r\n    (file.isImage() || file.isMedia()) && actions.push('open');\r\n    !file.isMetadata() && actions.push('uploadMetadata');\r\n    file.isMetadata() && actions.push('exposeMetadata');\r\n    file.isVersionFile() && actions.push('revertVersion');\r\n\r\n    return actions;\r\n};\r\n\r\n/**\r\n * Get available folder specific actions\r\n */\r\nconst getActionsForFolder = (folder: FolderItem) => {\r\n    return [\r\n        'open',\r\n        'compress'\r\n    ];\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContextMenu);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createBrowserHistory, History, Location } from \"history\";\r\nimport { MyDispatch, setHost, enterFolder } from \"../../Actions/Actions\";\r\nimport { AppState } from \"../../Reducers/reducer\";\r\n\r\nclass HistoryHandler extends Component<HistoryHandlerProps> {\r\n    private history: History<LocationState>;\r\n    private states: LocationState[];\r\n    private stateIndex: number;\r\n\r\n    constructor(props: HistoryHandlerProps) {\r\n        super(props);\r\n\r\n        this.states = [];\r\n        this.stateIndex = -1;\r\n        this.history = createBrowserHistory();\r\n        this.history.listen((location, action) => {\r\n            switch(action) {\r\n                case 'POP':\r\n                    this.handlePop(location);\r\n                    break;\r\n                case 'REPLACE':\r\n                    this.handleReplace(location);\r\n                    break;\r\n                case 'PUSH':\r\n                    this.handlePush(location);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const { host, path } = this.props;\r\n\r\n        // Don't update history when the host is invalid\r\n        if (host === null)\r\n            return;\r\n        if (this.states.length === 0 || this.stateIndex < 0)\r\n            return this.updateBrowserHistory();\r\n        \r\n        const prevState = this.states[this.stateIndex];\r\n\r\n        if (!locationsEqual({ host, path }, prevState))\r\n            this.updateBrowserHistory();\r\n    }\r\n\r\n    updateBrowserHistory() {\r\n        const { host, path } = this.props;\r\n        const url = encodeURI(`${host}/${path.join('/')}`);\r\n        const newState = {\r\n            host: host || '',\r\n            path,\r\n            index: this.stateIndex + 1,\r\n        };\r\n\r\n        this.history.push(`?url=${url}`, newState);\r\n    }\r\n\r\n    handlePop(location: Location<LocationState>) {\r\n        this.stateIndex = location.state.index;\r\n        this.props.handlePop(location);\r\n    }\r\n\r\n    handleReplace(location: Location<LocationState>) {\r\n        this.states[this.stateIndex] = location.state;\r\n    }\r\n\r\n    handlePush(location: Location<LocationState>) {\r\n        this.states = [...this.states.slice(0, ++this.stateIndex), location.state];\r\n    }\r\n\r\n    render() {\r\n        // This Component doesn't provide anything to the DOM\r\n        // The only reason it is a component is to get access to the state and dispatch\r\n        return <></>;\r\n    }\r\n}\r\n\r\ninterface LocationState extends MyLocation {\r\n    index: number;\r\n}\r\ninterface MyLocation {\r\n    host: string;\r\n    path: string[];\r\n}\r\n\r\n\r\ninterface StateProps {\r\n    host: string | null;\r\n    path: string[];\r\n}\r\ninterface DispatchProps {\r\n    handlePop(location: Location<LocationState>): void;\r\n}\r\ninterface HistoryHandlerProps extends StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => ({\r\n    host: state.account.host,\r\n    path: state.path\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handlePop: (location: Location<LocationState>) => {\r\n            let host = '';\r\n            let path: string[] = [];\r\n\r\n            if (location && typeof location.state !== typeof undefined) {\r\n                ({ host, path } = location.state);\r\n            }\r\n            else {\r\n                const params = new URLSearchParams(location.search.substr(1));\r\n                const url = params.get('url');\r\n                if (url !== null) {\r\n                    ({ host, path } = getLocationObjectFromUrl(url));\r\n                }\r\n            }\r\n            dispatch(setHost(host));\r\n            dispatch(enterFolder(path));\r\n        }\r\n    };\r\n};\r\n\r\nexport const getLocationObjectFromUrl = (urlString: string) => {\r\n    const url = new URL(urlString);\r\n    const host = url.origin;\r\n    const path = url.pathname.split('/').filter(val => val !== '');\r\n\r\n    return {\r\n        host,\r\n        path\r\n    };\r\n}\r\n\r\nconst locationsEqual = (first: MyLocation, second: MyLocation) => {\r\n    return first.host === second.host\r\n           && first.path.length === second.path.length\r\n           && first.path.every((val, index) => val === second.path[index]);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HistoryHandler);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { connect } from 'react-redux';\r\nimport { solidLogin, setHost, enterFolder, solidLogout, clearCache, MyDispatch, setErrorMessage, closeDialog } from '../../../Actions/Actions';\r\nimport { getLocationObjectFromUrl } from '../../HistoryHandler/HistoryHandler';\r\nimport { DialogButtonClickEvent, DialogDispatchProps, DialogStateProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<ChooseLocationProps> {\r\n    state = {\r\n        location: '',\r\n    };\r\n\r\n    componentWillReceiveProps(props: ChooseLocationProps) {\r\n        const { isLoggedIn, webId } = props;\r\n        const params = new URLSearchParams(document.location.search.substr(1));\r\n        const encodedUrl = params.get('url');\r\n\r\n        if (encodedUrl !== null) {\r\n            const location = decodeURI(encodedUrl);\r\n            this.setState({ location });\r\n        }\r\n        else if (isLoggedIn && webId) {\r\n            const location = (new URL(webId)).origin;\r\n            this.setState({ location });\r\n        }\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) {\r\n        const targetForm = event.currentTarget.form;\r\n        if (targetForm) {\r\n            const input = targetForm.querySelector('input');\r\n            if (input) {\r\n                const location = input.value;\r\n                this.setState({ location });\r\n                return;\r\n            }\r\n        }\r\n        console.log(\"Couldn't find location input\");\r\n    }\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        this.props.handleSubmit(event, { location: this.state.location });\r\n    }\r\n\r\n    render() {\r\n        let { location } = this.state;\r\n        location = location ? location : '';\r\n        const { handleClose, handleLogin, handleLogout, open, isLoggedIn, webId } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-choose-location\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-choose-location\">Choose the storage location</DialogTitle>\r\n                    <DialogContent>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                            {!isLoggedIn ?\r\n                                \"If you want to access private resources, please login with the button below.\"\r\n                                : \"Logged in as \" + webId + \".\"\r\n                            }\r\n                        </Typography>\r\n                        {!isLoggedIn ?\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={handleLogin}>Login</Button>\r\n                            : <Button variant=\"outlined\" onClick={handleLogout}>Logout</Button>\r\n                        }\r\n\r\n                        <Typography variant=\"body1\">\r\n                            Please enter the directory you want to open below.\r\n                    </Typography>\r\n                        <TextField autoFocus fullWidth\r\n                            margin=\"normal\"\r\n                            label=\"Storage Location\"\r\n                            variant=\"outlined\"\r\n                            onChange={this.handleChange.bind(this)}\r\n                            value={location} />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                            Open directory\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    webId: string | null;\r\n    isLoggedIn: boolean;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleLogin(event: DialogButtonClickEvent): void;\r\n    handleLogout(event: DialogButtonClickEvent): void;\r\n    handleSubmit(event: DialogButtonClickEvent, { location }: { location: string }): void;\r\n}\r\ninterface ChooseLocationProps extends StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CHOOSE_LOCATION,\r\n        webId: state.account.webId,\r\n        isLoggedIn: state.account.loggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CHOOSE_LOCATION));\r\n        },\r\n        handleLogin: event => {\r\n            event.preventDefault();\r\n            dispatch(solidLogin());\r\n        },\r\n        handleLogout: event => {\r\n            event.preventDefault();\r\n            dispatch(solidLogout());\r\n        },\r\n        handleSubmit: (event, { location }) => {\r\n            event.preventDefault();\r\n            if (!location)\r\n                return dispatch(setErrorMessage(\"Please enter the folder which should be opened\"));\r\n\r\n            const { host, path } = getLocationObjectFromUrl(location);\r\n            dispatch(closeDialog(DIALOGS.CHOOSE_LOCATION));\r\n            dispatch(setHost(host));\r\n            dispatch(clearCache());\r\n            dispatch(enterFolder(path));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { closeDialog, MyDispatch, openDialog } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<ContentProps> {\r\n\r\n    state = {\r\n        lastBlobUrl: null,\r\n        content: '...',\r\n        loading: false\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open } = this.props;\r\n        return (\r\n          <div style={{marginLeft:'1em'}}>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-content\" fullWidth={true} maxWidth={'sm'}>\r\n              <DialogTitle id=\"form-dialog-content\">Viewing file </DialogTitle>\r\n              <DialogContent>\r\n                <img src={this.props.blobUrl} alt=\"\" style={{maxWidth: '100%'}}/>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                  Close\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    blobUrl: string | undefined;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {}\r\ninterface ContentProps extends StateProps, DispatchProps {}\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CONTENT,\r\n        blobUrl: state.blob || undefined\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DialogDispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CONTENT));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport Plyr from 'react-plyr';\r\nimport 'plyr/dist/plyr.css';\r\nimport { FileItem } from '../../../Api/Item';\r\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<MediaProps> {\r\n    render() {\r\n        const { file, handleClose, open } = this.props;\r\n\r\n        const fileName = file ? file.name : undefined;\r\n        const url = file ? file.url : undefined;\r\n        const provider = file ? (file.isVideo() ? 'html5' : 'audio') : '';\r\n        const type = file ? (file.isVideo() ? 'video' : 'audio') : undefined;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-display-media\" fullWidth={true} maxWidth={'lg'}>\r\n                <DialogTitle id=\"form-dialog-display-media\">Display Media</DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        file ?\r\n                            (\r\n                                <div>\r\n                                    <p>Playing {file.name}</p>\r\n                                    <Plyr type={type} /*TODO: provider={provider}*/ url={url} iconUrl=\"./vendor/plyr/plyr.svg\" />\r\n                                </div>\r\n                            )\r\n                            : <p>No media file opened</p>\r\n                            \r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    file?: FileItem;\r\n}\r\ninterface MediaProps extends StateProps, DialogDispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    const open = state.visibleDialogs.MEDIA;\r\n\r\n    const file = state.items.selected[0];   \r\n\r\n    if (file instanceof FileItem) {\r\n            return {\r\n                open,\r\n                file,\r\n            };\r\n    }\r\n    return { open };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DialogDispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.MEDIA));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { updateTextFile, MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nclass FormDialog extends Component<EditProps> {\r\n    private textField: React.RefObject<HTMLTextAreaElement> = createRef();\r\n    state = {\r\n        lastBlobUrl: null as string|null,\r\n        content: null as string|null,\r\n        loading: false\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            this.props.blobUrl && fetch(this.props.blobUrl).then(r => {\r\n                return r.text();\r\n            }).then(t => {\r\n                this.setState({\r\n                    content: t\r\n                });\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSave(event: DialogButtonClickEvent) {\r\n        event.preventDefault();\r\n        const textField = this.textField.current;\r\n        const item = this.props.item;\r\n        if (textField && item) {\r\n            const content = textField.value;\r\n            this.props.handleSubmit(event, {\r\n                itemName: item.name,\r\n                content\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open, item } = this.props;\r\n        const itemName = item ? item.getDisplayName() : 'No item selected';\r\n        const textAreaStyle = {\r\n            width: '100%',\r\n            minHeight: '300px'\r\n        };\r\n        const textArea = <textarea style={textAreaStyle} defaultValue={this.state.content || ''} ref={this.textField} />;\r\n\r\n        return (\r\n            <div>\r\n              <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-edit\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                  <DialogTitle id=\"form-dialog-edit\">Editing file: {itemName} </DialogTitle>\r\n                  <DialogContent>\r\n                    <DialogContentText>\r\n                      {this.state.loading ? 'Loading...' : textArea}\r\n                    </DialogContentText>\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                      Close\r\n                    </Button>\r\n                    <Button color=\"primary\" onClick={this.handleSave.bind(this)} type=\"submit\">\r\n                      Update\r\n                    </Button>\r\n                  </DialogActions>\r\n                </form>\r\n              </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    item: Item;\r\n    blobUrl: string;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { itemName, content }: { itemName: string, content: string }): void;\r\n}\r\ninterface EditProps extends StateProps, DispatchProps {}\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.EDIT, // TODO: rename visibleDialogs (e.g. to dialogIsOpen)\r\n        item: state.items.selected[0],\r\n        blobUrl: state.blob || ''\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.EDIT));\r\n        },\r\n        handleSubmit: (event, { itemName, content }) => {\r\n            dispatch(updateTextFile(itemName, content));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { createNewFolder, closeDialog, MyDispatch, setErrorMessage } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<CreateFolderProps> {\r\n    private textField: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const textField = this.textField.current;\r\n        if (textField) {\r\n            const folderName = textField.value;\r\n            this.props.handleSubmit(event, { folderName });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, handleSubmit, open } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-folder\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-create-folder\">Add new folder</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField autoFocus fullWidth margin=\"dense\" label=\"Container name\" type=\"text\" inputRef={this.textField} />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                            Save\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { folderName }: { folderName: string }): void;\r\n}\r\ninterface CreateFolderProps extends DialogStateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState): DialogStateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CREATE_FOLDER\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CREATE_FOLDER));\r\n        },\r\n        handleSubmit: (event, { folderName }) => {\r\n            event.preventDefault();\r\n            dispatch(createNewFolder(folderName));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { createFile, closeDialog, MyDispatch, setErrorMessage } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<CreateFileProps> {\r\n    private textField: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const textField = this.textField.current;\r\n        if (textField) {\r\n            const fileName = textField.value;\r\n            this.props.handleSubmit(event, { fileName });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-file\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-create-file\">Create file</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField autoFocus fullWidth margin=\"dense\" label=\"File name\" type=\"text\" inputRef={this.textField}/>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                            Create\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { fileName }: { fileName: string }): void;\r\n}\r\ninterface CreateFileProps extends DialogStateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState): DialogStateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CREATE_FILE\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CREATE_FILE));\r\n        },\r\n        handleSubmit: (event, { fileName }) => {\r\n            event.preventDefault();\r\n            dispatch(createFile(fileName));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, ChangeEvent, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { renameFile, renameFolder, MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport { FolderItem, Item } from '../../../Api/Item';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nclass FormDialog extends Component<RenameProps> {\r\n    private textField: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const textField = this.textField.current;\r\n        const item = this.props.item;\r\n        if (textField && item) {\r\n            const newName = textField.value;\r\n            this.props.handleSubmit(event, { item, newName });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open, item } = this.props;\r\n        const previousName = item ? item.name : '';\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-folder\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                  <DialogTitle id=\"form-dialog-create-folder\">Rename</DialogTitle>\r\n                  <DialogContent>\r\n                    <TextField autoFocus fullWidth margin=\"dense\" label=\"Item name\" type=\"text\" inputRef={this.textField} defaultValue={previousName} />\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                      Cancel\r\n                    </Button>\r\n                    <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                      Save\r\n                    </Button>\r\n                  </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    item?: Item;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { item, newName }: { item: Item, newName: string }): void;\r\n}\r\ninterface RenameProps extends StateProps, DispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.RENAME,\r\n        item: state.items.selected[0],\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.RENAME));\r\n        },\r\n        handleSubmit: (event, { item, newName }) => {\r\n            event.preventDefault();\r\n            if (item instanceof FolderItem) // TODO: Create renameItem\r\n                dispatch(renameFolder(item.name, newName));\r\n            else\r\n                dispatch(renameFile(item.name, newName));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport '../File.css';\r\nimport { FileItem, Item } from '../../../Api/Item';\r\n\r\n// TODO: Check main differences between normal File.tsx component\r\nfunction FileSublist(props: OwnProps) {\r\n    const { item, isSelected, handleClick, handleDoubleClick } = props;\r\n    const avatarStyle = {\r\n        backgroundColor: isSelected ? blue['A200'] : undefined\r\n    };\r\n    return (\r\n        <div className=\"File\" onClick={handleClick} data-selected={isSelected} onDoubleClick={handleDoubleClick}>\r\n            <ListItem>\r\n                <ListItemAvatar>\r\n                    <Avatar style={avatarStyle}>\r\n                        { (item instanceof FileItem) ? <FileIcon /> : <FolderIcon />}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={item.name} secondary=\"\" />\r\n            </ListItem>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface OwnProps {\r\n    item: Item;\r\n    isSelected: boolean;\r\n    handleClick(): void;\r\n    handleDoubleClick(): void;\r\n}\r\n\r\nexport default FileSublist;\r\n\r\n","import React from 'react';\r\nimport FileSublist from '../../File/FileSublist/FileSublist'; \r\nimport Loader from '../../Loader/Loader'; \r\nimport FileListEmptyMessage from '../FileListEmptyMessage';\r\nimport './FileListSublist.css'; \r\nimport { FolderItem } from '../../../Api/Item';\r\n\r\nfunction FileListSublist(props: OwnProps) {\r\n    const { items, isLoading, handleOpenFolder } = props;\r\n    \r\n    const itemComponents = items.map((item, key) => {\r\n        return <FileSublist\r\n            item={item}\r\n            isSelected={false}\r\n            handleClick={() => handleOpenFolder(item)}\r\n            handleDoubleClick={() => handleOpenFolder(item)}\r\n            key={key} />\r\n    });\r\n\r\n    return <div className=\"FileListSublist\">\r\n        { isLoading ? \r\n            <Loader /> : \r\n            itemComponents.length ? itemComponents : <FileListEmptyMessage />\r\n        }\r\n    </div>\r\n}\r\n\r\ninterface OwnProps {\r\n    items: FolderItem[];\r\n    isLoading: boolean;\r\n    handleOpenFolder(folder: FolderItem): void;\r\n}\r\n\r\nexport default FileListSublist;","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FileListSublist from '../../FileList/FileListSublist/FileListSublist'; \r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\nimport { Item, FolderItem } from '../../../Api/Item';\r\nimport * as ApiHandler from '../../../Api/ApiHandler';\r\n\r\nclass FormDialog extends Component<OwnProps, OwnState> {\r\n    private host: string;\r\n    private path: string[];\r\n\r\n    constructor(props: OwnProps) {\r\n        super(props);\r\n        const { initialPath, initialHost } = props;\r\n        this.host = initialHost;\r\n        this.path = initialPath;\r\n\r\n        this.state = {\r\n            items: [],\r\n            isLoading: true,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps: OwnProps) {\r\n        if (prevProps.initialHost !== this.props.initialHost\r\n            || prevProps.initialPath.join('') !== this.props.initialPath.join('')) {\r\n            this.host = this.props.initialHost;\r\n            this.path = this.props.initialPath;\r\n            this.updateItems();\r\n        }\r\n    }\r\n\r\n    handleGoBack() {\r\n        this.path = this.path.slice(0, -1);\r\n        this.updateItems();\r\n    }\r\n\r\n    handleOpenFolder(folder: FolderItem) {\r\n        this.path = [...folder.path, folder.name];\r\n        this.updateItems();\r\n    }\r\n\r\n    async updateItems() {\r\n        this.setState({ isLoading: true });\r\n        const items = (await ApiHandler.getItemList(this.path.join('/')))\r\n            .filter(item => item instanceof FolderItem);\r\n\r\n        this.setState({ isLoading: false, items });\r\n    }\r\n\r\n    render() {\r\n        const { open, handleClose, handleSubmit, actionName } = this.props;\r\n        const { items, isLoading } = this.state;\r\n        const host = this.host;\r\n        const path = this.path;\r\n        const url = `${host}/${path.join('/')}`;\r\n        const canGoBack = path.length > 0;\r\n        \r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-move\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-move\">\r\n                        {actionName} items to <small style={{color: 'grey'}}>{ url }</small>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <FileListSublist items={items} isLoading={isLoading} handleOpenFolder={this.handleOpenFolder.bind(this)}/>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleGoBack.bind(this)} color=\"primary\" type=\"button\" disabled={!canGoBack}>\r\n                            <KeyboardArrowLeftIcon /> Go back directory\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={(e) => handleSubmit({ host, path })} type=\"submit\">\r\n                            {actionName}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface OwnProps {\r\n    open: boolean;\r\n    actionName: string;\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    handleSubmit({ host, path }: { host: string, path: string[] }): void;\r\n    handleClose(): void;\r\n}\r\n\r\ninterface OwnState {\r\n    items: Item[];\r\n    isLoading: boolean;\r\n}\r\n\r\nexport default FormDialog;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { moveItems, closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { DialogStateProps } from '../dialogTypes';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nimport ChooseLocation from '../ChooseLocation/ChooseLocation';\r\n\r\nfunction MoveDialog(props: MoveProps) {\r\n    const { initialHost, initialPath, selectedItems, open, handleClose, move } = props;\r\n\r\n    return <ChooseLocation\r\n        open={open}\r\n        actionName=\"Move\"\r\n        initialHost={initialHost}\r\n        initialPath={initialPath}\r\n        handleClose={handleClose}\r\n        handleSubmit={(location) => move(selectedItems, location)}\r\n    />\r\n}\r\n\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps {\r\n    handleClose(): void;\r\n    move(selectedItems: Item[], { host, path }: { host: string, path: string[] }): void;\r\n}\r\ninterface MoveProps extends StateProps, DispatchProps {}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.MOVE,\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.MOVE));\r\n        },\r\n        move: (selectedItems, targetLocation) => {\r\n            dispatch(moveItems(selectedItems, targetLocation));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveDialog);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { copyItems, closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { DialogStateProps } from '../dialogTypes';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nimport ChooseLocation from '../ChooseLocation/ChooseLocation';\r\n\r\nfunction CopyDialog(props: CopyProps) {\r\n    const { initialHost, initialPath, selectedItems, open, handleClose, copy } = props;\r\n\r\n    return <ChooseLocation\r\n        open={open}\r\n        actionName=\"Copy\"\r\n        initialHost={initialHost}\r\n        initialPath={initialPath}\r\n        handleClose={handleClose}\r\n        handleSubmit={(location) => copy(selectedItems, location)}\r\n    />\r\n}\r\n\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps {\r\n    handleClose(): void;\r\n    copy(selectedItems: Item[], { host, path }: { host: string, path: string[] }): void;\r\n}\r\ninterface CopyProps extends StateProps, DispatchProps {}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.COPY,\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.COPY));\r\n        },\r\n        copy: (selectedItems, targetLocation) => {\r\n            dispatch(copyItems(selectedItems, targetLocation));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CopyDialog);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport { getHumanFileSize } from '../../Api/Item';\r\n\r\nfunction UploadFileList(props: UploadFileListProps) {\r\n    const { files } = props;\r\n    files[0];\r\n    const list = Array.from(files).map((f, i) =>\r\n        <ListItem dense key={i}>\r\n            <ListItemIcon>\r\n                <FileIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary={`${f.name} (${getHumanFileSize(f.size)})`} />\r\n        </ListItem>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <List component=\"nav\">\r\n                {list}\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface UploadFileListProps {\r\n    files: FileList;\r\n}\r\n\r\nexport default UploadFileList;\r\n","import React, { Component, createRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport UploadFileList from './UploadFileList';\r\n\r\nclass FileUploader extends Component<FileUploadProps> {\r\n    inputRef: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleReset(event: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent): void {\r\n        const inputElement = this.inputRef.current;\r\n        if (inputElement) {\r\n            inputElement.value = '';\r\n            this.props.handleReset(event);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { fileList, handleSelectedFiles } = this.props;\r\n        const styles = {\r\n            inputfile: {\r\n                // TODO: Change this to display none as soon, as the label button works\r\n                // display: 'none'\r\n            }, inputreset: {\r\n                display: (fileList && fileList.length) ? 'inline-flex' : 'none'\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"button-file\">\r\n                    <input style={styles.inputfile} id=\"button-file\" ref={this.inputRef} multiple type=\"file\" onChange={handleSelectedFiles} />\r\n                    {/*<Button component=\"span\" variant=\"contained\" color=\"primary\">\r\n                        Select Files\r\n                    </Button>*/}\r\n                </label>\r\n\r\n                <Button style={styles.inputreset} component=\"span\" type=\"reset\" onClick={this.handleReset.bind(this)}>\r\n                    Clear\r\n                </Button>\r\n\r\n                { fileList && <UploadFileList files={fileList} /> }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface FileUploadProps {\r\n    fileList: FileList|null;\r\n    handleReset(event: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent): void;\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n}\r\n\r\nexport default FileUploader;\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { connect } from 'react-redux';\r\nimport { resetFileUploader, uploadFiles, setFileUploadList, MyDispatch, resetFileUploadList, setErrorMessage, uploadReseachData } from '../../../Actions/Actions';\r\nimport FileUploader from '../../FileUploader/FileUploader';\r\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nclass FormDialog extends Component<UploadFileProps> {\r\n\r\n    render() {\r\n        const { handleClose, handleReset, handleSubmit, open, canUpload, progress, fileList, handleSelectedFiles } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-upload\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-upload\">\r\n                        Upload Research Data\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <FileUploader fileList={fileList} handleSelectedFiles={handleSelectedFiles} handleReset={handleReset}/>\r\n                        {canUpload ? <LinearProgress variant=\"determinate\" value={progress} /> : null }\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={handleSubmit} disabled={!canUpload} type=\"submit\">\r\n                            Upload\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    canUpload: boolean;\r\n    fileList: FileList|null;\r\n    progress: number;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n    handleReset(): void;\r\n}\r\ninterface UploadFileProps extends StateProps, DispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.UPLOAD_FILE,\r\n        canUpload: state.upload.fileList ? state.upload.fileList.length > 0 : false,\r\n        fileList: state.upload.fileList,\r\n        progress: state.upload.progress,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: (event) => {\r\n            dispatch(resetFileUploader());\r\n        },\r\n        handleSubmit: (event) => {\r\n            event.preventDefault();\r\n            dispatch(uploadReseachData());\r\n        },\r\n        handleSelectedFiles: (event) => {\r\n            const files = event.target.files;\r\n            dispatch(setFileUploadList(files));\r\n        },\r\n        handleReset: () => {\r\n            dispatch(resetFileUploadList());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\n\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    '&$checked': {\r\n      color: green[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\r\n\r\nexport default function CheckboxLabels() {\r\n  const [state, setState] = React.useState({\r\n    checkedA: false,\r\n    checkedB: false,\r\n    checkedC: false,\r\n    checkedD: false,\r\n    checkedE: false,\r\n    checkedF: false,\r\n    checkedG: false,\r\n  });\r\n\r\n  const handleChange = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  return (\r\n    <FormGroup row>\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedA}\r\n            onChange={handleChange('checkedA')}\r\n            value=\"checkedA\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Mathematics\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedB}\r\n            onChange={handleChange('checkedB')}\r\n            value=\"checkedB\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Computer Science\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedC}\r\n            onChange={handleChange('checkedC')}\r\n            value=\"checkedC\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Web engineering\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedD}\r\n            onChange={handleChange('checkedD')}\r\n            value=\"checkedD\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Physics\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedE}\r\n            onChange={handleChange('checkedE')}\r\n            value=\"checkedE\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Chemistry\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedG}\r\n            onChange={handleChange('checkedG')}\r\n            value=\"checkedG\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Biology\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedF}\r\n            onChange={handleChange('checkedF')}\r\n            value=\"checkedF\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Machine learning\"\r\n      />\r\n     \r\n    </FormGroup>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { connect } from 'react-redux';\r\nimport { resetFileUploader, uploadMetadata, setFileUploadList, MyDispatch, resetFileUploadList, setErrorMessage, resetMetadataUploader, createMetadataACL } from '../../../Actions/Actions';\r\nimport FileUploader from '../../FileUploader/FileUploader';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { withStyles, Tabs, Tab, Typography, FormControl, InputLabel, Input, FormHelperText } from '@material-ui/core';\r\n\r\nimport SimpleListMenu from './Discipline';\r\nimport { Item } from '../../../Api/Item';\r\n\r\n\r\n\r\nclass FormDialog extends Component<UploadFileProps> {\r\n\r\n    state = {\r\n        activeIndex: 0,\r\n        // inputVal: props.inputValue\r\n    }\r\n    updateInput = (val: any) => this.setState({ inputVal: val })\r\n\r\n\r\n    handleChange = (_: any, activeIndex: any) => this.setState({ activeIndex })\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const item = this.props.item;\r\n        if (item) {\r\n            this.props.handleSubmit(event, { item });\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const { handleClose, handleReset, open, canUpload, progress, fileList, handleSelectedFiles } = this.props;\r\n        let activeIndex = this.state.activeIndex;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-upload\" fullWidth={true} maxWidth={'sm'}>\r\n                <div>\r\n                    <VerticalTabs\r\n                        value={activeIndex}\r\n                        onChange={this.handleChange}\r\n                    >\r\n\r\n                        <MyTab label='Upload metadata file' />\r\n                        <MyTab label='Input metadata annotation' />\r\n                    </VerticalTabs>\r\n                    {activeIndex === 0 && <form>\r\n                        <DialogContent>\r\n                            <FileUploader fileList={fileList} handleSelectedFiles={handleSelectedFiles} handleReset={handleReset} />\r\n                            {canUpload ? <LinearProgress variant=\"determinate\" value={progress} /> : null}\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                                Cancel\r\n                        </Button>\r\n                            <Button color=\"primary\" onClick={this.handleSubmit.bind(this)}disabled={!canUpload} type=\"submit\">\r\n                                Upload\r\n                        </Button>\r\n                        </DialogActions>\r\n                    </form>}\r\n                    {activeIndex === 1 && <form>\r\n                        <DialogContent>\r\n                            <FormControl fullWidth={true}>\r\n                                <InputLabel htmlFor=\"my-input\">Title</InputLabel>\r\n                                <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n                            </FormControl>\r\n                            <FormControl fullWidth={true}>\r\n                                <InputLabel htmlFor=\"my-input\">Author</InputLabel>\r\n                                <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n                            </FormControl>\r\n                            <FormControl fullWidth={true} >\r\n                                <InputLabel htmlFor=\"my-input\">Description</InputLabel>\r\n                                <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n                            </FormControl>\r\n                            <FormControl fullWidth={true} >\r\n                                <InputLabel htmlFor=\"my-input\">Version</InputLabel>\r\n                                <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n                            </FormControl>\r\n                            <FormControl fullWidth={true}>\r\n                                <InputLabel htmlFor=\"my-input\">Keyword</InputLabel>\r\n                                <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n                            </FormControl>\r\n                            <FormControl fullWidth={true}>\r\n                                <SimpleListMenu />\r\n                            </FormControl>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                                Cancel\r\n                        </Button>\r\n                            <Button color=\"primary\" onClick={this.handleSubmit.bind(this)} disabled={!canUpload} type=\"submit\">\r\n                                Submit\r\n                        </Button>\r\n                        </DialogActions>\r\n                    </form>}\r\n                </div>\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nconst VerticalTabs = withStyles(theme => ({\r\n    flexContainer: {\r\n        flexDirection: 'row'\r\n    },\r\n    indicator: {\r\n        display: 'none',\r\n    }\r\n}))(Tabs)\r\n\r\nconst MyTab = withStyles(theme => ({\r\n    selected: {\r\n        color: 'tomato',\r\n        borderBottom: '2px solid tomato'\r\n    }\r\n}))(Tab);\r\n\r\nfunction TabContainer(props: { children: React.ReactNode; }) {\r\n    return (\r\n        <Typography component=\"div\" style={{ padding: 24 }}>\r\n            {props.children}\r\n        </Typography>\r\n    );\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    item?: Item;\r\n    canUpload: boolean;\r\n    fileList: FileList | null;\r\n    progress: number;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n    handleReset(): void;\r\n    handleSubmit(event: DialogButtonClickEvent, { item }: { item: Item }): void;\r\n    \r\n}\r\ninterface UploadFileProps extends StateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        item: state.items.selected[0],\r\n        open: state.visibleDialogs.UPLOAD_METADATA,\r\n        canUpload: state.upload.fileList ? state.upload.fileList.length > 0 : false,\r\n        fileList: state.upload.fileList,\r\n        progress: state.upload.progress,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: (event) => {\r\n            dispatch(resetMetadataUploader());\r\n        },\r\n        handleSubmit: (event, { item} ) => {\r\n            event.preventDefault();\r\n            dispatch(uploadMetadata(item));\r\n        },\r\n        handleSelectedFiles: (event) => {\r\n            const files = event.target.files;\r\n            dispatch(setFileUploadList(files));\r\n        },\r\n        handleReset: () => {\r\n            dispatch(resetFileUploadList());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { setFileUploadList, MyDispatch, resetFileUploadList, resetAccessControl, updateAccessControl } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { Item } from '../../../Api/Item';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddIcon from '@material-ui/icons/AddBox';\r\nimport { FormControlLabel, Checkbox, ListItemIcon, MenuItem, DialogContent, DialogContentText, FormControl, Input } from '@material-ui/core';\r\nimport { AclItem } from '../../../Api/AclItem';\r\nimport { parseACl } from '../../../Api/aclUtils';\r\n\r\nclass FormDialog extends Component<AccessControlProps> {\r\n    private textField: React.RefObject<HTMLTextAreaElement> = createRef();\r\n    state = {\r\n        lastBlobUrl: null as string | null,\r\n        content: null as string | null,\r\n        loading: false,\r\n        isLoading: false,\r\n        accessTo: \"\",\r\n        agent: \"\",\r\n        read: false,\r\n        write: false,\r\n        append: false,\r\n        control: false,\r\n        group: false,\r\n        aclList: [] as AclItem[]\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl && this.state.aclList.length == 0) {\r\n\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            this.props.blobUrl && fetch(this.props.blobUrl).then(r => {\r\n                return r.text();\r\n            }).then(async t => {\r\n                let destFile = this.props.initialHost + '/' + this.props.initialPath.join('/') + '/' + this.props.selectedItems[0].name;\r\n                let aclFile = destFile + '.acl';\r\n\r\n                let aclList = parseACl(t, aclFile)\r\n                this.setState({\r\n                    accessTo: destFile,\r\n                    content: t,\r\n                    aclList: aclList\r\n                });\r\n\r\n                // console.log(this.state.aclList)\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSave(event: DialogButtonClickEvent) {\r\n        event.preventDefault();\r\n        const item = this.props.item;\r\n        this.props.handleSubmit(event, {\r\n            itemName: item.name,\r\n            aclList: this.state.aclList\r\n        });\r\n\r\n    }\r\n\r\n    handleChange = (key: number, mode: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (mode == 'group')\r\n            this.state.aclList[key]._isGroup = event.target.checked;\r\n        if (mode == 'read')\r\n            this.state.aclList[key]._read = event.target.checked;\r\n        if (mode == 'write')\r\n            this.state.aclList[key]._write = event.target.checked;\r\n        if (mode == 'append')\r\n            this.state.aclList[key]._append = event.target.checked;\r\n        if (mode == 'control')\r\n            this.state.aclList[key]._control = event.target.checked;\r\n        this.setState({ ...this.state, [name]: event.target.checked });\r\n    };\r\n\r\n    handleTextChange = (key: number) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.state.aclList[key]._agent = event.target.value;\r\n        this.setState({ ...this.state, [name]: event.target.value });\r\n    };\r\n    handleNewTextChange = () => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.state.agent = event.target.value;\r\n        this.setState({ ...this.state, [name]: event.target.value });\r\n    };\r\n\r\n    handleDelete = (key: number) => (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        this.state.aclList.splice(key, 1);\r\n        this.setState({ ...this.state, [name]: event.button.toString });\r\n    };\r\n\r\n    handleNewChange = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ ...this.state, [name]: event.target.checked });\r\n    };\r\n\r\n    handleAdd = () => (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => {\r\n        if (!this.validURL(this.state.agent)) {\r\n            alert(\"Wrong url format!!!!\");\r\n            this.resetState();\r\n            return;\r\n        }\r\n        this.state.aclList.push(new AclItem(this.state.aclList.length,\r\n            this.state.agent,\r\n            this.state.accessTo,\r\n            this.state.read,\r\n            this.state.write,\r\n            this.state.append,\r\n            this.state.control,\r\n            this.state.group));\r\n        this.resetState()\r\n        // this.setState({ ...this.state, [name]: \"btn add click\" });\r\n    };\r\n\r\n    validURL(str: string) {\r\n        var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\r\n            '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\r\n            '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\r\n            '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\r\n            '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\r\n            '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\r\n        return !!pattern.test(str);\r\n    }\r\n\r\n    resetState = () => {\r\n        this.setState({\r\n            agent: \"\",\r\n            read: false,\r\n            write: false,\r\n            append: false,\r\n            control: false,\r\n            group: false\r\n        });\r\n    }\r\n\r\n    handleClose(event: DialogButtonClickEvent) {\r\n        this.state.aclList = [];\r\n        this.props.handleClose(event);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { open } = this.props;\r\n        return (\r\n            <Dialog open={open} onClose={this.handleClose.bind(this)} aria-labelledby=\"form-dialog-upload\" fullWidth={true} maxWidth={'lg'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-upload\">\r\n                        Access Control to {this.state.accessTo}\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <Table>\r\n                            <colgroup>\r\n                                <col />\r\n                                <col style={{ width: '50%', padding: '4px 10px' }} />\r\n                                <col style={{ width: '40%' }} />\r\n                                <col />\r\n                            </colgroup>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell padding=\"checkbox\">Group</TableCell>\r\n                                    <TableCell padding=\"none\">Agent</TableCell>\r\n                                    <TableCell padding=\"none\">Mode</TableCell>\r\n                                    <TableCell padding=\"checkbox\">Action</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {this.state.aclList.map(item => <TableRow key={item._key}>\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <FormControlLabel label=\"\" control={\r\n                                            <Checkbox checked={item.isGroup}\r\n                                                onChange={this.handleChange(item._key, \"group\")}\r\n                                                value=\"group\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"none\">\r\n                                        <Input fullWidth={true} value={item.agent} onChange={this.handleTextChange(item._key)} placeholder=\"Input agent webID\" />\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"none\">\r\n                                        <FormControlLabel label=\"Read\" control={\r\n                                            <Checkbox checked={item.read}\r\n                                                onChange={this.handleChange(item._key, \"read\")}\r\n                                                value=\"read\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                        <FormControlLabel label=\"Write\" control={\r\n                                            <Checkbox checked={item.write}\r\n                                                onChange={this.handleChange(item._key, 'write')}\r\n                                                value=\"write\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                        <FormControlLabel label=\"Append\" control={\r\n                                            <Checkbox checked={item.append}\r\n                                                onChange={this.handleChange(item._key, 'append')}\r\n                                                value=\"append\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                        <FormControlLabel label=\"Control\" control={\r\n                                            <Checkbox checked={item.control}\r\n                                                onChange={this.handleChange(item._key, 'control')}\r\n                                                value=\"control\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <MenuItem onClick={this.handleDelete(item._key)}>\r\n                                            <ListItemIcon>\r\n                                                <DeleteIcon />\r\n                                            </ListItemIcon>\r\n                                        </MenuItem>\r\n                                    </TableCell>\r\n                                </TableRow>)}\r\n                                <TableRow key={this.state.aclList.length}>\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <FormControlLabel label=\"\" control={\r\n                                            <Checkbox checked={this.state.group}\r\n                                                onChange={this.handleNewChange(\"group\")}\r\n                                                value=\"group\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"none\">\r\n                                        <Input fullWidth={true} value={this.state.agent} onChange={this.handleNewTextChange()} id=\"newagent\" placeholder=\"Input agent webID\" />\r\n                                    </TableCell>\r\n                                    <TableCell padding='none'>\r\n                                        <FormControlLabel label=\"Read\" control={\r\n                                            <Checkbox checked={this.state.read}\r\n                                                onChange={this.handleNewChange(\"read\")}\r\n                                                value=\"read\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                        <FormControlLabel label=\"Write\" control={\r\n                                            <Checkbox checked={this.state.write}\r\n                                                onChange={this.handleNewChange(\"write\")}\r\n                                                value=\"write\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                        <FormControlLabel label=\"Append\" control={\r\n                                            <Checkbox checked={this.state.append}\r\n                                                onChange={this.handleNewChange(\"append\")}\r\n                                                value=\"append\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                        <FormControlLabel label=\"Control\" control={\r\n                                            <Checkbox checked={this.state.control}\r\n                                                onChange={this.handleNewChange(\"control\")}\r\n                                                value=\"control\"\r\n                                                color=\"primary\" />\r\n                                        } />\r\n                                    </TableCell>\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <MenuItem onClick={this.handleAdd()}>\r\n                                            <ListItemIcon>\r\n                                                <AddIcon />\r\n                                            </ListItemIcon>\r\n                                        </MenuItem>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose.bind(this)} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={this.handleSave.bind(this)} type=\"submit\">\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    item: Item;\r\n    blobUrl: string;\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { itemName, aclList }:\r\n        { itemName: string, aclList: AclItem[] }): void;\r\n}\r\ninterface AccessControlProps extends StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.ACCESS_CONTROL, // TODO: rename visibleDialogs (e.g. to dialogIsOpen)\r\n        item: state.items.selected[0],\r\n        blobUrl: state.blob || '',\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: (event) => {\r\n            dispatch(resetAccessControl());\r\n        },\r\n        handleSubmit: (event, { itemName, aclList }) => {\r\n            event.preventDefault();\r\n            dispatch(updateAccessControl(itemName, aclList));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { connect } from 'react-redux';\r\nimport { resetFileUploader, uploadFiles, setFileUploadList, MyDispatch, resetFileUploadList, setErrorMessage, uploadReseachData, resetNewVersionUploader, handleAddNewVersion } from '../../../Actions/Actions';\r\nimport FileUploader from '../../FileUploader/FileUploader';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { withStyles, Tabs, Tab, Typography, FormControl, InputLabel, Input, FormHelperText } from '@material-ui/core';\r\nimport { Item } from '../../../Api/Item';\r\nimport { getVersion } from '../../../Api/aclUtils';\r\nimport { version } from 'punycode';\r\n\r\nclass FormDialog extends Component<AddNewVersionProp> {\r\n    state = {\r\n        lastBlobUrl: null as string | null,\r\n        currentVersion: \"1.0\",\r\n        nextVersion: \"\"\r\n    }\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const item = this.props.item;\r\n        const currentVersion = this.state.currentVersion;\r\n        const nextVersion = this.state.nextVersion;\r\n        if (item) {\r\n            this.props.handleSubmit(event, { item, currentVersion, nextVersion });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            this.props.blobUrl && fetch(this.props.blobUrl).then(r => {\r\n                return r.text();\r\n            }).then(async t => {\r\n                let subj = this.props.initialHost + '/' + this.props.initialPath.join('/') + '/' + this.props.selectedItems[0].name + '.ttl';\r\n                let version = getVersion(t, subj)\r\n                this.setState({\r\n                    currentVersion: version,\r\n                    content: t\r\n                });\r\n\r\n                // console.log(this.state.aclList)\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleTextChange = () => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.state.nextVersion = event.target.value;\r\n        this.setState({ ...this.state, [name]: event.target.value });\r\n    };\r\n\r\n    render() {\r\n        const { handleClose, handleReset, open, canUpload, progress, fileList, handleSelectedFiles } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-upload\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-upload\">\r\n                        Add New Version\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <FormControl fullWidth={true}>\r\n                            <InputLabel htmlFor=\"oldversion\">Current Version</InputLabel>\r\n                            <Input id=\"oldversion\" aria-describedby=\"my-helper-text\" value={this.state.currentVersion} disabled />\r\n                        </FormControl>\r\n                        <FormControl fullWidth={true}>\r\n                            <InputLabel htmlFor=\"newversion\">New version</InputLabel>\r\n                            <Input fullWidth={true} onChange={this.handleTextChange()} id=\"newversion\" placeholder=\"Enter new version\" />\r\n                        </FormControl>\r\n                        <FormControl fullWidth={true}>\r\n                            <InputLabel htmlFor=\"newversion\">Message</InputLabel>\r\n                            <Input fullWidth={true} id=\"message\" placeholder=\"Enter your message\" />\r\n                        </FormControl>\r\n                        <FormControl fullWidth={true}>\r\n                            <FileUploader fileList={fileList} handleSelectedFiles={handleSelectedFiles} handleReset={handleReset} />\r\n                            {canUpload ? <LinearProgress variant=\"determinate\" value={progress} /> : null}\r\n                        </FormControl>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={this.handleSubmit.bind(this)} disabled={!canUpload} type=\"submit\">\r\n                            Upload\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    canUpload: boolean;\r\n    fileList: FileList | null;\r\n    progress: number;\r\n    item?: Item;\r\n    blobUrl: string;\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { item }: { item: Item, currentVersion: string, nextVersion: string }): void;\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n    handleReset(): void;\r\n}\r\ninterface AddNewVersionProp extends StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.ADD_NEW_VERSION,\r\n        item: state.items.selected[0],\r\n        canUpload: state.upload.fileList ? state.upload.fileList.length > 0 : false,\r\n        fileList: state.upload.fileList,\r\n        progress: state.upload.progress,\r\n        blobUrl: state.blob || '',\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n\r\n        handleClose: (event) => {\r\n            dispatch(resetNewVersionUploader());\r\n        },\r\n        handleSubmit: (event, { item, currentVersion, nextVersion }) => {\r\n            event.preventDefault();\r\n            dispatch(handleAddNewVersion(item, currentVersion, nextVersion));\r\n        },\r\n        handleSelectedFiles: (event) => {\r\n            const files = event.target.files;\r\n            dispatch(setFileUploadList(files));\r\n        },\r\n        handleReset: () => {\r\n            // dispatch(resetFileUploadList());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { DialogStateProps, DialogButtonClickEvent, DialogDispatchProps } from '../dialogTypes';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Button, Input, FormControl, InputLabel } from '@material-ui/core';\r\nimport { MyDispatch, closeDialog, handleExposeData } from '../../../Actions/Actions';\r\nimport { getContent } from '../../../Api/aclUtils';\r\n\r\nclass ExposeMetadata extends Component<ExposeMetadataProps> {\r\n    state = {\r\n        lastBlobUrl: null as string | null,\r\n        currentVersion: \"1.0\",\r\n        metadatainfo: { keyword:\"\", discipline: \"\" },\r\n        name: this.props.selectedItems[0] ? this.props.selectedItems[0].name : ''\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            this.props.blobUrl && fetch(this.props.blobUrl).then(r => {\r\n                return r.text();\r\n            }).then(async t => {\r\n                let subj = this.props.initialHost + '/' + this.props.initialPath.join('/') + '/' + this.props.selectedItems[0].name;\r\n                let content = getContent(t, subj)\r\n                this.setState({\r\n                    name :subj,\r\n                    metadatainfo: content,\r\n                    content: t\r\n                });\r\n\r\n                // console.log(this.state.aclList)\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleTextChange = (key: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (key == \"keyword\")\r\n            this.state.metadatainfo.keyword = event.target.value;\r\n        if (key == \"discipline\")\r\n            this.state.metadatainfo.discipline = event.target.value;\r\n        this.setState({ ...this.state, [name]: event.target.value });\r\n    };\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const item = this.props.item;\r\n        const metadatainfo = this.state.metadatainfo;\r\n        if (item) {\r\n            this.props.handleSubmit(event, { item, metadatainfo });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open, initialHost, initialPath } = this.props;\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-upload\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-upload\">\r\n                        Expose Metadata\r\n                </DialogTitle>\r\n                    <DialogContent>\r\n                        {this.state.name}\r\n                        <FormControl fullWidth={true} >\r\n                            <InputLabel htmlFor=\"my-input\">Keyword</InputLabel>\r\n                            <Input value={this.state.metadatainfo.keyword} onChange={this.handleTextChange(\"keyword\")} id=\"keyword\" aria-describedby=\"my-helper-text\" />\r\n                        </FormControl>\r\n                        <FormControl fullWidth={true} >\r\n                            <InputLabel htmlFor=\"my-input\">Discipline</InputLabel>\r\n                            <Input value={this.state.metadatainfo.discipline} disabled onChange={this.handleTextChange(\"discipline\")} id=\"discipline\" aria-describedby=\"my-helper-text\" />\r\n                        </FormControl>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Close\r\n                    </Button>\r\n                        <Button color=\"primary\" onClick={this.handleSubmit.bind(this)} type=\"submit\">\r\n                            Expose\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        )\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    blobUrl: string;\r\n    item?: Item;\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { item }:\r\n        { item: Item, metadatainfo: {keyword:string, discipline:string} }): void;\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n    handleReset(): void;\r\n}\r\ninterface ExposeMetadataProps extends StateProps, DispatchProps { }\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.EXPOSE_METADATA,\r\n        blobUrl: state.blob || '',\r\n        item: state.items.selected[0],\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n\r\n    return {\r\n\r\n        handleClose: (event) => {\r\n            dispatch(closeDialog(DIALOGS.EXPOSE_METADATA));\r\n        },\r\n        handleSubmit: (event, { item, metadatainfo }) => {\r\n            event.preventDefault();\r\n            dispatch(handleExposeData(item, metadatainfo));\r\n        },\r\n        handleSelectedFiles: (event) => {\r\n            const files = event.target.files;\r\n            // dispatch(setFileUploadList(files));\r\n        },\r\n        handleReset: () => {\r\n            // dispatch(resetFileUploadList());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExposeMetadata);","import React from 'react';\r\nimport DialogMenu from './Menu/Menu';\r\nimport DialogContent from './Content/Content';\r\nimport DialogMedia from './Media/Media';\r\nimport DialogEdit from './Edit/Edit';\r\nimport DialogCreateFolder from './CreateFolder/CreateFolder';\r\nimport DialogCreateFile from './CreateFile/CreateFile';\r\nimport DialogRename from './Rename/Rename';\r\nimport DialogMove from './Move/Move';\r\nimport DialogCopy from './Copy/Copy';\r\nimport DialogUploadFile from './UploadFile/UploadFile';\r\nimport DialogUploadMetadata from './UploadMetadata/UploadMetadata';\r\nimport DialogAccessControl from './AccessControl/AccessControl';\r\nimport DialogAddNewVersion from './AddNewVersion/AddNewVersion';\r\nimport DialogExposeMetadata from './ExposeMetadata/ExposeMetadata'\r\n\r\n// TODO: Consider moving the visibility logic here\r\nfunction Dialogs() {\r\n    return (\r\n        <div className=\"Dialogs\">\r\n            <DialogMenu />\r\n            <DialogContent />\r\n            <DialogMedia />\r\n            <DialogEdit />\r\n            <DialogCreateFolder />\r\n            <DialogCreateFile />\r\n            <DialogMove />\r\n            <DialogCopy />\r\n            <DialogRename />\r\n            <DialogUploadFile />\r\n            <DialogUploadMetadata />\r\n            <DialogAddNewVersion />\r\n            <DialogExposeMetadata />\r\n            <DialogAccessControl />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Theme, createStyles, WithStyles } from '@material-ui/core/styles';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { connect, MapDispatchToPropsFactory } from 'react-redux';\r\nimport { MyDispatch, resetErrorMessage } from '../../Actions/Actions';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  close: {\r\n    padding: theme.spacing.unit / 2,\r\n  },\r\n});\r\n\r\nclass DynamicSnackbar extends React.Component<DynamicSnackbarProps> {\r\n  render() {\r\n    const { classes, errorMsg, handleClose, open, notificationDuration } = this.props;\r\n    return (\r\n      <div>\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left',\r\n          }}\r\n          open={open}\r\n          autoHideDuration={notificationDuration}\r\n          onClose={handleClose}\r\n          ContentProps={{\r\n            'aria-describedby': 'message-id',\r\n          }}\r\n          message={<span id=\"message-id\">{errorMsg}</span>}\r\n          action={[\r\n            <IconButton key=\"close\" aria-label=\"Close\" color=\"inherit\" className={classes.close} onClick={handleClose} >\r\n              <CloseIcon />\r\n            </IconButton>,\r\n          ]}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface StateProps {\r\n  open: boolean;\r\n  errorMsg: string;\r\n  notificationDuration: number;\r\n}\r\ninterface DispatchProps {\r\n  handleClose(): void;\r\n}\r\ninterface DynamicSnackbarProps extends StateProps, DispatchProps, WithStyles<typeof styles> {}\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: !!state.errorMessage,\r\n        errorMsg: state.errorMessage,\r\n        notificationDuration: 60000\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n          dispatch(resetErrorMessage());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(DynamicSnackbar));\r\n\r\n","import React, { Component } from 'react';\r\nimport FileList from './Components/FileList/FileList';\r\nimport Navbar from './Components/Navbar/Navbar';\r\nimport ContextMenu from './Components/ContextMenu/ContextMenu';\r\nimport Dialogs from './Components/Dialogs/Dialogs';\r\n\r\nimport { MuiThemeProvider as MaterialUI, createMuiTheme, WithStyles } from '@material-ui/core/styles';\r\nimport green from '@material-ui/core/colors/green';\r\nimport { connect } from 'react-redux';\r\nimport { initApp, MyDispatch, closeContextMenu } from './Actions/Actions';\r\nimport DynamicSnackbar from './Components/Notification/DynamicSnackbar';\r\nimport HistoryHandler from './Components/HistoryHandler/HistoryHandler';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: green,\r\n    },\r\n    typography: {\r\n        useNextVariants: true,\r\n    }\r\n});\r\n\r\nclass App extends Component<AppProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.init();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <MaterialUI theme={theme}>\r\n                    <div onClick={this.props.handleHideContextMenu} onContextMenu={this.props.handleHideContextMenu}>\r\n                        <Navbar />\r\n                        <FileList />\r\n                        <ContextMenu />\r\n                        <DynamicSnackbar />\r\n                        <Dialogs />\r\n                    </div>\r\n                </MaterialUI>\r\n                <HistoryHandler />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface DispatchProps {\r\n    init(): void;\r\n    handleHideContextMenu(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n}\r\n\r\ninterface AppProps extends DispatchProps {}\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        init: () => {\r\n            dispatch(initApp());\r\n        },\r\n\r\n        handleHideContextMenu: (event) => {\r\n            const element = event.target as HTMLElement;\r\n            if (!(element.tagName === 'INPUT' || /label/i.test(element.className))) {\r\n                event.preventDefault();\r\n            }\r\n            dispatch(closeContextMenu());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunk from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport reducer from './Reducers/reducer'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport './index.css';\r\nimport 'typeface-roboto';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider >\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register({\r\n    onUpdate: (config) => {\r\n        console.group('serviceWorker.onUpdate');\r\n        console.log(config);\r\n        console.groupEnd();\r\n    },\r\n    onSuccess: (config) => {\r\n        console.group('serviceWorker.onSuccess');\r\n        console.log(config);\r\n        console.groupEnd();\r\n    }\r\n});"],"sourceRoot":""}